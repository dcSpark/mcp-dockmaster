const availableTools: RegistryTool[] = [
  {
    "id": "helius-proxy",
    "name": "Helius Proxy",
    "description": "A simple tool that proxies requests to Helius",
    "fullDescription": "A simple tool that proxies requests to Helius",
    "publisher": {
      "id": "dcspark",
      "name": "dcspark",
      "url": "https://www.dcspark.com/"
    },
    "isOfficial": true,
    "sourceUrl": "https://github.com/dcspark/mcp-server-helius",
    "distribution": {
      "type": "npm",
      "package": "@mcp-dockmaster/mcp-server-helius"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@mcp-dockmaster/mcp-server-helius"
      ],
      "env": {
        "HELIUS_API_KEY": {
          "required": true,
          "description": "Your Helius API key. See: https://www.helius.xyz/api"
        }
      }
    }
  },
  {
    "id": "91cb9233-616f-482a-b8d3-6e209005fd42",
    "name": "deepfates/mcp-replicate",
    "description": "Replicate MCP Server",
    "fullDescription": "# Replicate MCP Server\n\nA [Model Context Protocol](https://github.com/mcp-sdk/mcp) server implementation for Replicate. Run Replicate models through a simple tool-based interface.\n\n## Installation\n\n```bash\nnpm install -g mcp-replicate\n```\n\nOr install from source:\n```bash\ngit clone https://github.com/deepfates/mcp-replicate\ncd mcp-replicate\nnpm install\nnpm run build\n```\n\n## Features\n\n### Models\n- Search models using semantic search\n- Browse models and collections\n- Get detailed model information and versions\n\n### Predictions\n- Create predictions with text or structured input\n- Track prediction status\n- Cancel running predictions \n- List your recent predictions\n\n### Image Handling\n- View generated images in your browser\n- Manage image cache for better performance\n\n## Configuration \n\nThe server needs a Replicate API token to work. Set it as an environment variable:\n\n```bash\nexport REPLICATE_API_TOKEN=your_token_here\n```\n\n## Usage\n\nIf installed globally:\n```bash\nmcp-replicate\n```\n\nOr run directly with npx:\n```bash\nnpx mcp-replicate\n```\n\nOr if installed from source:\n```bash\nnpm start\n```\n\nThe server uses stdio to communicate via the MCP protocol. You'll need an MCP client to interact with it.\n\n## Available Tools\n\n### Model Tools\n- `search_models`: Find models using semantic search\n- `list_models`: Browse available models\n- `get_model`: Get details about a specific model\n- `list_collections`: Browse model collections\n- `get_collection`: Get details about a specific collection\n\n### Prediction Tools  \n- `create_prediction`: Run a model with your inputs\n- `get_prediction`: Check a prediction's status\n- `cancel_prediction`: Stop a running prediction\n- `list_predictions`: See your recent predictions\n\n### Image Tools\n- `view_image`: Open an image in your browser\n- `clear_image_cache`: Clean up cached images\n- `get_image_cache_stats`: Check cache usage\n\n## Examples\n\nHere are some examples using an MCP client:\n\n### Search Models\n```typescript\n// Find text-to-image models\nconst results = await mcpClient.invoke(\"search_models\", {\n  query: \"text to image models\"\n});\n```\n\n### Create a Prediction\n```typescript\n// Run a model\nconst prediction = await mcpClient.invoke(\"create_prediction\", {\n  version: \"model_version_id\",\n  input: {\n    prompt: \"A friendly robot making pancakes\"\n  }\n});\n```\n\n### Check Prediction Status\n```typescript\n// Get prediction results\nconst status = await mcpClient.invoke(\"get_prediction\", {\n  prediction_id: \"prediction_id\"\n});\n```\n\n### Browse Collections\n```typescript\n// List featured collections\nconst collections = await mcpClient.invoke(\"list_collections\", {});\n```\n\n## Development\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Start development server (with auto-reload):\n```bash\nnpm run dev\n```\n\n3. Check code style:\n```bash\nnpm run lint\n```\n\n4. Format code:\n```bash\nnpm run format\n```\n\n## Requirements\n\n- Node.js >= 18.0.0\n- TypeScript >= 5.0.0\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "deepfates",
      "name": "deepfates",
      "url": "https://github.com/deepfates/mcp-replicate"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/deepfates/mcp-replicate",
    "distribution": {
      "type": "npm",
      "package": "mcp-replicate"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-replicate"
      ],
      "env": {
        "REPLICATE_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "cb7a957e-2f67-4f43-b10a-51c2c84a1067",
    "name": "BurtTheCoder/mcp-virustotal",
    "description": "VirusTotal MCP Server",
    "fullDescription": "# VirusTotal MCP Server\n\nA Model Context Protocol (MCP) server for querying the [VirusTotal API](https://www.virustotal.com/). This server provides comprehensive security analysis tools with automatic relationship data fetching. It integrates seamlessly with MCP-compatible applications like [Claude Desktop](https://claude.ai).\n\n## Quick Start (Recommended)\n\n### Installing via Smithery\n\nTo install VirusTotal Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@burtthecoder/mcp-virustotal):\n\n```bash\nnpx -y @smithery/cli install @burtthecoder/mcp-virustotal --client claude\n```\n\n### Installing Manually\n\n1. Install the server globally via npm:\n```bash\nnpm install -g @burtthecoder/mcp-virustotal\n```\n\n2. Add to your Claude Desktop configuration file:\n```json\n{\n  \"mcpServers\": {\n    \"virustotal\": {\n      \"command\": \"mcp-virustotal\",\n      \"env\": {\n        \"VIRUSTOTAL_API_KEY\": \"your-virustotal-api-key\"\n      }\n    }\n  }\n}\n```\n\nConfiguration file location:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Restart Claude Desktop\n\n## Alternative Setup (From Source)\n\nIf you prefer to run from source or need to modify the code:\n\n1. Clone and build:\n```bash\ngit clone <repository_url>\ncd mcp-virustotal\nnpm install\nnpm run build\n```\n\n2. Add to your Claude Desktop configuration:\n```json\n{\n  \"mcpServers\": {\n    \"virustotal\": {\n      \"command\": \"node\",\n      \"args\": [\"--experimental-modules\", \"/absolute/path/to/mcp-virustotal/build/index.js\"],\n      \"env\": {\n        \"VIRUSTOTAL_API_KEY\": \"your-virustotal-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Features\n\n- **Comprehensive Analysis Reports**: Each analysis tool automatically fetches relevant relationship data along with the basic report, providing a complete security overview in a single request\n- **URL Analysis**: Security reports with automatic fetching of contacted domains, downloaded files, and threat actors\n- **File Analysis**: Detailed analysis of file hashes including behaviors, dropped files, and network connections\n- **IP Analysis**: Security reports with historical data, resolutions, and related threats\n- **Domain Analysis**: DNS information, WHOIS data, SSL certificates, and subdomains\n- **Detailed Relationship Analysis**: Dedicated tools for querying specific types of relationships with pagination support\n- **Rich Formatting**: Clear categorization and presentation of analysis results and relationship data\n\n## Tools\n\n### Report Tools (with Automatic Relationship Fetching)\n\n### 1. URL Report Tool\n- Name: `get_url_report`\n- Description: Get a comprehensive URL analysis report including security scan results and key relationships (communicating files, contacted domains/IPs, downloaded files, redirects, threat actors)\n- Parameters:\n  * `url` (required): The URL to analyze\n\n### 2. File Report Tool\n- Name: `get_file_report`\n- Description: Get a comprehensive file analysis report using its hash (MD5/SHA-1/SHA-256). Includes detection results, file properties, and key relationships (behaviors, dropped files, network connections, embedded content, threat actors)\n- Parameters:\n  * `hash` (required): MD5, SHA-1 or SHA-256 hash of the file\n\n### 3. IP Report Tool\n- Name: `get_ip_report`\n- Description: Get a comprehensive IP address analysis report including geolocation, reputation data, and key relationships (communicating files, historical certificates/WHOIS, resolutions)\n- Parameters:\n  * `ip` (required): IP address to analyze\n\n### 4. Domain Report Tool\n- Name: `get_domain_report`\n- Description: Get a comprehensive domain analysis report including DNS records, WHOIS data, and key relationships (SSL certificates, subdomains, historical data)\n- Parameters:\n  * `domain` (required): Domain name to analyze\n  * `relationships` (optional): Array of specific relationships to include in the report\n\n### Relationship Tools (for Detailed Analysis)\n\n### 1. URL Relationship Tool\n- Name: `get_url_relationship`\n- Description: Query a specific relationship type for a URL with pagination support. Choose from 17 relationship types including analyses, communicating files, contacted domains/IPs, downloaded files, graphs, referrers, redirects, and threat actors\n- Parameters:\n  * `url` (required): The URL to get relationships for\n  * `relationship` (required): Type of relationship to query\n    - Available relationships: analyses, comments, communicating_files, contacted_domains, contacted_ips, downloaded_files, graphs, last_serving_ip_address, network_location, referrer_files, referrer_urls, redirecting_urls, redirects_to, related_comments, related_references, related_threat_actors, submissions\n  * `limit` (optional, default: 10): Maximum number of related objects to retrieve (1-40)\n  * `cursor` (optional): Continuation cursor for pagination\n\n### 2. File Relationship Tool\n- Name: `get_file_relationship`\n- Description: Query a specific relationship type for a file with pagination support. Choose from 41 relationship types including behaviors, network connections, dropped files, embedded content, execution chains, and threat actors\n- Parameters:\n  * `hash` (required): MD5, SHA-1 or SHA-256 hash of the file\n  * `relationship` (required): Type of relationship to query\n    - Available relationships: analyses, behaviours, bundled_files, carbonblack_children, carbonblack_parents, ciphered_bundled_files, ciphered_parents, clues, collections, comments, compressed_parents, contacted_domains, contacted_ips, contacted_urls, dropped_files, email_attachments, email_parents, embedded_domains, embedded_ips, embedded_urls, execution_parents, graphs, itw_domains, itw_ips, itw_urls, memory_pattern_domains, memory_pattern_ips, memory_pattern_urls, overlay_children, overlay_parents, pcap_children, pcap_parents, pe_resource_children, pe_resource_parents, related_references, related_threat_actors, similar_files, submissions, screenshots, urls_for_embedded_js, votes\n  * `limit` (optional, default: 10): Maximum number of related objects to retrieve (1-40)\n  * `cursor` (optional): Continuation cursor for pagination\n\n### 3. IP Relationship Tool\n- Name: `get_ip_relationship`\n- Description: Query a specific relationship type for an IP address with pagination support. Choose from 12 relationship types including communicating files, historical SSL certificates, WHOIS records, resolutions, and threat actors\n- Parameters:\n  * `ip` (required): IP address to analyze\n  * `relationship` (required): Type of relationship to query\n    - Available relationships: comments, communicating_files, downloaded_files, graphs, historical_ssl_certificates, historical_whois, related_comments, related_references, related_threat_actors, referrer_files, resolutions, urls\n  * `limit` (optional, default: 10): Maximum number of related objects to retrieve (1-40)\n  * `cursor` (optional): Continuation cursor for pagination\n\n### 4. Domain Relationship Tool\n- Name: `get_domain_relationship`\n- Description: Query a specific relationship type for a domain with pagination support. Choose from 21 relationship types including SSL certificates, subdomains, historical data, and DNS records\n- Parameters:\n  * `domain` (required): Domain name to analyze\n  * `relationship` (required): Type of relationship to query\n    - Available relationships: caa_records, cname_records, comments, communicating_files, downloaded_files, historical_ssl_certificates, historical_whois, immediate_parent, mx_records, ns_records, parent, referrer_files, related_comments, related_references, related_threat_actors, resolutions, soa_records, siblings, subdomains, urls, user_votes\n  * `limit` (optional, default: 10): Maximum number of related objects to retrieve (1-40)\n  * `cursor` (optional): Continuation cursor for pagination\n\n## Requirements\n\n- Node.js (v18 or later)\n- A valid [VirusTotal API Key](https://www.virustotal.com/gui/my-apikey)\n\n## Troubleshooting\n\n### API Key Issues\n\nIf you see \"Wrong API key\" errors:\n\n1. Check the log file at `/tmp/mcp-virustotal-server.log` (on macOS) for API key status\n2. Verify your API key:\n   - Should be a valid VirusTotal API key (usually 64 characters)\n   - No extra spaces or quotes around the key\n   - Must be from the API Keys section in your VirusTotal account\n3. After any configuration changes:\n   - Save the config file\n   - Restart Claude Desktop\n   - Check logs for new API key status\n\n### Module Loading Issues\n\nIf you see ES module loading warnings:\n1. For global installation: Use the simple configuration shown in Quick Start\n2. For source installation: Ensure you include `--experimental-modules` in the args\n\n## Development\n\nTo run in development mode with hot reloading:\n```bash\nnpm run dev\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Invalid API keys\n- Rate limiting\n- Network errors\n- Invalid input parameters\n- Invalid hash formats\n- Invalid IP formats\n- Invalid URL formats\n- Invalid relationship types\n- Pagination errors\n\n## Version History\n\n- v1.0.0: Initial release with core functionality\n- v1.1.0: Added relationship analysis tools for URLs, files, and IP addresses\n- v1.2.0: Added improved error handling and logging\n- v1.3.0: Added pagination support for relationship queries\n- v1.4.0: Added automatic relationship fetching in report tools and domain analysis support\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "burtthecoder",
      "name": "burtthecoder",
      "url": "https://github.com/BurtTheCoder/mcp-virustotal"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/BurtTheCoder/mcp-virustotal",
    "distribution": {
      "type": "npm",
      "package": "@burtthecoder/mcp-virustotal"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@burtthecoder/mcp-virustotal"
      ],
      "env": {
        "VIRUSTOTAL_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "d5df44ff-dffe-47c5-aa44-4934fd1d3589",
    "name": "recursechat/mcp-server-apple-shortcuts",
    "description": "Apple Shortcuts MCP Server 🤖",
    "fullDescription": "# Apple Shortcuts MCP Server 🤖\n\nA Model Context Protocol (MCP) server that lets AI assistants like Claude control Apple Shortcuts automations. This enables AI models to trigger shortcuts and automate tasks on macOS in a safe and controlled way.\n\n<a href=\"https://www.npmjs.com/package/mcp-server-apple-shortcuts\"><img src=\"https://img.shields.io/npm/v/mcp-server-apple-shortcuts\"/></a>\n\n<a href=\"https://glama.ai/mcp/servers/15z6abk6p2\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/15z6abk6p2/badge\" /></a>\n\n## What is MCP? 🤔\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do? 🚀\n\nThe Apple Shortcuts MCP server:\n- Enables AI assistants to list available shortcuts\n- Allows running shortcuts by name with optional input parameters \n- Provides a simple interface for automation control\n\n## Prerequisites 📋\n\nBefore you begin, ensure you have:\n\n- [Node.js](https://nodejs.org/) (v18 or higher)\n- [Claude Desktop](https://claude.ai/download) installed\n- macOS with Shortcuts app configured\n\n## Configuration to use Apple Shortcuts Server ⚙️\n\nHere's the Claude Desktop configuration to use the Apple Shortcuts server:\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-apple-shortcuts\"]\n    }\n  }\n}\n```\n\n## Build Apple Shortcuts Server and run locally 🛠️\n\n1. Clone this repository:\n\n```sh\ngit clone git@github.com:recursechat/mcp-server-apple-shortcuts.git\n```\n\n2. Install dependencies:\n```sh\nnpm install\n```\n\n3. Build project\n```sh\nnpm run build\n```\n\nHere's the Claude Desktop configuration to use the Apple Shortcuts server with a local build:\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"/path/to/mcp-server-apple-shortcuts/build/index.js\"],\n    }\n  }\n}\n```\n\n<!--\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-apple-shortcuts\"]\n    }\n  }\n}\n```\n-->\n\n## Usage 🎯\n\nYou can ask Claude \"list shortcuts\" or run a specific shortcut with the shortcut name, for example \"get word of the day\" or \"play a song\".\n\n## License ⚖️\n\nApache-2.0\n",
    "publisher": {
      "id": "recursechat",
      "name": "recursechat",
      "url": "https://github.com/recursechat/mcp-server-apple-shortcuts"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/recursechat/mcp-server-apple-shortcuts",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-apple-shortcuts"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-apple-shortcuts"
      ],
      "env": {}
    }
  },
  {
    "id": "41dc99d6-5f1d-46d9-ba92-9d726b348a48",
    "name": "integration-app/mcp-server",
    "description": "Integration App MCP Server ",
    "fullDescription": "# Integration App MCP Server \n\n## Overview \n\nThis is an implementation of the [Model Context Protocol (MCP) server](https://modelcontextprotocol.org/) that exposes tools powered by [Integration App](https://integration.app).\n\n## Managing Tools\n\nThis server uses Actions defined in an Integration App workspace as tools. \nTo understand how this works and how to effectively manage tools for each application, please refer to the [Using Tools](https://console.integration.app/docs/building/use-cases/ai/use-tools) guide.\n\n## Running the server\n\n1. Install [node.js](https://nodejs.org)\n2. Configure some actions in your Integration App workspace\n3. Get Integration App token from your [Workspace Settings](https://console.integration.app/w/0/settings/testing) page or generate using your Workspace Key and Secret ([Authentication Guide](https://console.integration.app/w/625eb136b4af031bffb2e9eb/docs/getting-started/authentication)).\n\nYou need to provide two environment variables to the server:\n* `INTEGRATION_APP_TOKEN` - token for accessing Integration App API\n* `INTEGRATION_KEY` - key of the integration you want to use tools for\n\nThis server exposes tools from one integration at a time. If you want to expose tools from multiple integrations, you can create multiple servers or modify the code to iterate over multiple integrations.\n\nHere is an example of claude_desktop_config.json file with the server configured: \n\n```json\n{\n  \"mcpServers\": {\n    \"integration-app-hubspot\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@integration-app/mcp-server\"],\n      \"env\": {\n         \"INTEGRATION_APP_TOKEN\": \"<your-integration-app-token>\",\n         \"INTEGRATION_KEY\": \"hubspot\"\n      }\n    }\n  }\n}\n```\n\n## Testing \n\nTo understand if everything works as expected, you can ask Claude what tools are available: \n\n![Claude Test](https://github.com/user-attachments/assets/693aba6f-d7ee-47ad-9fcd-a966e1935214)\n",
    "publisher": {
      "id": "integration-app",
      "name": "integration-app",
      "url": "https://github.com/integration-app/mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/integration-app/mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@integration-app/mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@integration-app/mcp-server"
      ],
      "env": {
        "INTEGRATION_APP_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "INTEGRATION_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "67da022c-692f-4577-835e-3ca4b42fde24",
    "name": "emzimmer/server-moz-readability",
    "description": "Mozilla Readability Parser MCP Server",
    "fullDescription": "# Mozilla Readability Parser MCP Server\n\nAn [model context protocol (MCP)](https://github.com/modelcontextprotocol) server that extracts and transforms webpage content into clean, LLM-optimized Markdown. Returns article title, main content, excerpt, byline and site name. Uses [Mozilla's Readability algorithm](https://github.com/mozilla/readability) to remove ads, navigation, footers and non-essential elements while preserving the core content structure. [More about MCP](https://modelcontextprotocol.io/introduction).\n\n<a href=\"https://glama.ai/mcp/servers/jdcx8fmajm\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jdcx8fmajm/badge\" alt=\"Mozilla Readability Parser Server MCP server\" /></a>\n\n## Features\n- Removes ads, navigation, footers and other non-essential content\n- Converts clean HTML into well-formatted Markdown (also uses Turndown)\n- Returns article metadata (title, excerpt, byline, site name)\n- Handles errors gracefully\n\n## Why Not Just Fetch?\nUnlike simple fetch requests, this server:\n- Extracts only relevant content using Mozilla's Readability algorithm\n- Eliminates noise like ads, popups, and navigation menus\n- Reduces token usage by removing unnecessary HTML/CSS\n- Provides consistent Markdown formatting for better LLM processing\n- Includes useful metadata about the content\n\n## Installation\n\n### Installing via Smithery\n\nTo install Mozilla Readability Parser for Claude Desktop automatically via [Smithery](https://smithery.ai/server/server-moz-readability):\n\n```bash\nnpx -y @smithery/cli install server-moz-readability --client claude\n```\n\n### Manual Installation\n```bash\nnpm install server-moz-readability\n```\n\n## Tool Reference\n\n### `parse`\nFetches and transforms webpage content into clean Markdown.\n\n**Arguments:**\n```json\n{\n  \"url\": {\n    \"type\": \"string\",\n    \"description\": \"The website URL to parse\",\n    \"required\": true\n  }\n}\n```\n\n**Returns:**\n```json\n{\n  \"title\": \"Article title\",\n  \"content\": \"Markdown content...\",\n  \"metadata\": {\n    \"excerpt\": \"Brief summary\",\n    \"byline\": \"Author information\",\n    \"siteName\": \"Source website name\"\n  }\n}\n```\n\n## Usage with Claude Desktop\nAdd to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"readability\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"server-moz-readability\"]\n    }\n  }\n}\n```\n\n## Dependencies\n- @mozilla/readability - Content extraction\n- turndown - HTML to Markdown conversion\n- jsdom - DOM parsing\n- axios - HTTP requests\n\n## License\nMIT\n",
    "publisher": {
      "id": "emzimmer",
      "name": "emzimmer",
      "url": "https://github.com/emzimmer/server-moz-readability"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/emzimmer/server-moz-readability",
    "distribution": {
      "type": "npm",
      "package": "server-moz-readability"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "server-moz-readability"
      ],
      "env": {}
    }
  },
  {
    "id": "2c8c4f1a-0083-4449-9f99-3155076b29c4",
    "name": "emgeee/mcp-ollama",
    "description": "MCP Ollama",
    "fullDescription": "# MCP Ollama\n\nA Model Context Protocol (MCP) server for integrating Ollama with Claude Desktop or other MCP clients.\n\n## Requirements\n\n- Python 3.10 or higher\n- Ollama installed and running (https://ollama.com/download)\n- At least one model pulled with Ollama (e.g., `ollama pull llama2`)\n\n### Configure Claude Desktop\n\nAdd to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS, `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"ollama\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-ollama\"\n      ]\n    }\n  }\n}\n```\n\n### Development\n\nInstall in development mode:\n```bash\ngit clone https://github.com/yourusername/mcp-ollama.git\ncd mcp-ollama\nuv sync\n```\n\nTest with MCP Inspector:\n```bash\nmcp dev src/mcp_ollama/server.py\n```\n\n## Features\n\nThe server provides four main tools:\n- `list_models` - List all downloaded Ollama models\n- `show_model` - Get detailed information about a specific model\n- `ask_model` - Ask a question to a specified model\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "emgeee",
      "name": "emgeee",
      "url": "https://github.com/emgeee/mcp-ollama"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/emgeee/mcp-ollama",
    "distribution": {
      "type": "pip",
      "package": "mcp-ollama"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-ollama"
      ],
      "env": {}
    }
  },
  {
    "id": "448f7e38-8cf6-48d1-a9c6-c5087262bc78",
    "name": "sammcj/mcp-package-docs",
    "description": "Package Documentation MCP Server",
    "fullDescription": "# Package Documentation MCP Server\n\nAn MCP (Model Context Protocol) server that provides LLMs with efficient access to package documentation across multiple programming languages.\n\n## Features\n\n- **Multi-Language Support**:\n  - Go packages via `go doc`\n  - Python libraries via built-in `help()`\n  - NPM packages via registry documentation\n\n- **Smart Documentation Parsing**:\n  - Structured output with description, usage, and examples\n  - Focused information to avoid context overload\n  - Support for specific symbol/function lookups\n\n- **Performance Optimised**:\n  - Built-in caching\n  - Efficient parsing\n  - Minimal memory footprint\n\n## Installation\n\n### Installing via Smithery\n\nTo install Package Docs for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-package-docs):\n\n```bash\nnpx -y @smithery/cli install mcp-package-docs --client claude\n```\n\n### Manual Installation\n```bash\nnpx -y mcp-package-docs\n```\n\n## Usage\n\n### As an MCP Server\n\n1. Add to your MCP settings configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"package-docs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-package-docs\"]\n    }\n  }\n}\n```\n\n2. The server provides three tools:\n\n#### lookup_go_doc\n\nFetches Go package documentation\n```typescript\n{\n  \"name\": \"lookup_go_doc\",\n  \"arguments\": {\n    \"package\": \"encoding/json\", // required\n    \"symbol\": \"Marshal\"        // optional\n  }\n}\n```\n\n#### lookup_python_doc\n\nFetches Python package documentation\n```typescript\n{\n  \"name\": \"lookup_python_doc\",\n  \"arguments\": {\n    \"package\": \"requests\",    // required\n    \"symbol\": \"get\"          // optional\n  }\n}\n```\n\n#### lookup_npm_doc\n\nFetches NPM package documentation\n```typescript\n{\n  \"name\": \"lookup_npm_doc\",\n  \"arguments\": {\n    \"package\": \"axios\",      // required\n    \"version\": \"1.6.0\"       // optional\n  }\n}\n```\n\n### Example Usage in an LLM\n\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"package-docs\",\n  tool_name: \"lookup_python_doc\",\n  arguments: {\n    package: \"requests\",\n    symbol: \"post\"\n  }\n});\n```\n\n## Requirements\n\n- Node.js >= 20\n- Go (for Go package documentation)\n- Python 3 (for Python package documentation)\n- Internet connection (for NPM package documentation)\n\n## Development\n\n```bash\n# Install dependencies\nnpm i\n\n# Build\nnpm run build\n\n# Watch mode\nnpm run watch\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "sammcj",
      "name": "sammcj",
      "url": "https://github.com/sammcj/mcp-package-docs"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sammcj/mcp-package-docs",
    "distribution": {
      "type": "npm",
      "package": "mcp-package-docs"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-package-docs"
      ],
      "env": {}
    }
  },
  {
    "id": "733b79b6-efd7-45e3-81c2-23e3f952deb9",
    "name": "kazuph/mcp-obsidian",
    "description": "MCP Obsidian",
    "fullDescription": "# MCP Obsidian\n\nModel Context Protocol server for Obsidian vault integration. This allows Claude Desktop (or any MCP client) to search and read your Obsidian notes.\n\n## Quick Start (For Users)\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Obsidian vault\n- Claude Desktop (install from https://claude.ai/desktop)\n\n### Configuration\n\n1. Open your Claude Desktop configuration file at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nYou can find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\n2. Add the following to your configuration:\n\n```json\n{\n  \"tools\": {\n    \"obsidian\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-obsidian\"],\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/obsidian/vault\"\n      }\n    }\n  }\n}\n```\n\nNote: Replace `/path/to/your/obsidian/vault` with your actual Obsidian vault path.\n\n## For Developers\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Obsidian vault\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n## Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-obsidian.git\ncd mcp-obsidian\nnpm install\nnpm run build\n```\n\n## Configuration\n\n1. Make sure Claude Desktop is installed and running.\n\n2. Install tsx globally if you haven't:\n```bash\nnpm install -g tsx\n# or\npnpm add -g tsx\n```\n\n3. Modify your Claude Desktop config located at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nYou can easily find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\nAdd the following to your MCP client's configuration:\n\n```json\n{\n  \"tools\": {\n    \"obsidian\": {\n      \"args\": [\"tsx\", \"/path/to/mcp-obsidian/index.ts\"],\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/obsidian/vault\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `obsidian_read_notes`: Read the contents of multiple notes. Each note's content is returned with its path as a reference.\n- `obsidian_search_notes`: Search for notes by name (case-insensitive, supports partial matches and regex).\n- `obsidian_read_notes_dir`: List the directory structure under a specified path.\n- `obsidian_write_note`: Create a new note at the specified path.\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-obsidian"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-obsidian",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-obsidian"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-obsidian"
      ],
      "env": {
        "OBSIDIAN_VAULT_PATH": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "610042b1-8afb-4957-b9b7-d5785ba19458",
    "name": "shannonlal/mcp-postman",
    "description": "Postman MCP Server",
    "fullDescription": "# Postman MCP Server\n\nAn MCP (Model Context Protocol) server that enables running Postman collections using Newman. This server allows LLMs to execute API tests and get detailed results through a standardized interface.\n\n[![MCP Postman Server Demo](https://img.youtube.com/vi/d1WgTqwMsog/0.jpg)](https://youtu.be/d1WgTqwMsog)\n\n## Features\n\n- Run Postman collections using Newman\n- Support for environment files\n- Support for global variables\n- Detailed test results including:\n  - Overall success/failure status\n  - Test summary (total, passed, failed)\n  - Detailed failure information\n  - Execution timings\n\n## Installation\n\n### Installing via Smithery\n\nTo install Postman Runner for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-postman):\n\n```bash\nnpx -y @smithery/cli install mcp-postman --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd mcp-postman\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n## Usage\n\n### Configuration\n\nAdd the server to your Claude desktop configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"postman-runner\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-postman/build/index.js\"]\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### run-collection\n\nRuns a Postman collection and returns the test results.\n\n**Parameters:**\n\n- `collection` (required): Path or URL to the Postman collection\n- `environment` (optional): Path or URL to environment file\n- `globals` (optional): Path or URL to globals file\n- `iterationCount` (optional): Number of iterations to run\n\n**Example Response:**\n\n```json\n{\n  \"success\": true,\n  \"summary\": {\n    \"total\": 5,\n    \"failed\": 0,\n    \"passed\": 5\n  },\n  \"failures\": [],\n  \"timings\": {\n    \"started\": \"2024-03-14T10:00:00.000Z\",\n    \"completed\": \"2024-03-14T10:00:01.000Z\",\n    \"duration\": 1000\n  }\n}\n```\n\n### Example Usage in Claude\n\nYou can use the server in Claude by asking it to run a Postman collection:\n\n\"Run the Postman collection at /path/to/collection.json and tell me if all tests passed\"\n\nClaude will:\n\n1. Use the run-collection tool\n2. Analyze the test results\n3. Provide a human-friendly summary of the execution\n\n## Development\n\n### Project Structure\n\n```\nsrc/\n  ├── index.ts           # Entry point\n  ├── server/\n  │   ├── server.ts     # MCP Server implementation\n  │   └── types.ts      # Type definitions\n  └── newman/\n      └── runner.ts     # Newman runner implementation\ntest/\n  ├── server.test.ts    # Server tests\n  ├── newman-runner.test.ts  # Runner tests\n  └── fixtures/         # Test fixtures\n      └── sample-collection.json\n```\n\n### Running Tests\n\n```bash\n# Run tests\npnpm test\n\n# Run tests with coverage\npnpm test:coverage\n```\n\n### Building\n\n```bash\n# Build the project\npnpm build\n\n# Clean build artifacts\npnpm clean\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nISC\n",
    "publisher": {
      "id": "shannonlal",
      "name": "shannonlal",
      "url": "https://github.com/shannonlal/mcp-postman"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/shannonlal/mcp-postman",
    "distribution": {
      "type": "npm",
      "package": "mcp-postman"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-postman"
      ],
      "env": {}
    }
  },
  {
    "id": "be7ef09e-0cba-4f11-8935-f114d907f3a1",
    "name": "QuantGeekDev/coincap-mcp",
    "description": "Coincap MCP",
    "fullDescription": "# Coincap MCP\n\n## What does this server do?\n\nAllows you to query crypto information from coincap's public API - no API keys or registration required\n\n## 🚀 Quick Start\n\nTo get started, add this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"npx\",\n      \"args\": [\"coincap-mcp\"]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Coincap for Claude Desktop automatically via [Smithery](https://smithery.ai/server/coincap-mcp):\n\n```bash\nnpx -y @smithery/cli install coincap-mcp --client claude\n```\n\n### Prerequisites\n\n- Node.js 18+\n- npx\n\nThen, launch Claude Desktop and you're ready to go!\n\n## Sample Prompts\n\n- What is the price of bitcoin?\n- What are the available crypto assets?\n- What is the market cap of ethereum?\n\n## Tools\n\n#### Bitcoin Price Tool\n\nGets price for Bitcoin specifically, it's a simple example of a primitive API call tool\n\n#### Get Crypto Price Tool\n\nGets price for any cryptocurrency available on coincap API. It's a good example of how to get mandatory parameter data for your tool calls\n\n#### List Assets\n\nGets a list of all crypto assets available in coincap API\n\n## Development - local build\n\nTo build it locally:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"coincap-mcp\": {\n      \"command\": \"/path/to/coincap-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "QuantGeekDev",
      "name": "QuantGeekDev",
      "url": "https://github.com/QuantGeekDev/coincap-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/QuantGeekDev/coincap-mcp",
    "distribution": {
      "type": "npm",
      "package": "coincap-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "coincap-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "75fe771a-4e13-46bc-869f-6b75e1e6f189",
    "name": "vivekVells/mcp-pandoc",
    "description": "mcp-pandoc: A Document Conversion MCP Server",
    "fullDescription": "# mcp-pandoc: A Document Conversion MCP Server\n\n> Officially included in the [Model Context Protocol servers](https://github.com/modelcontextprotocol/servers/blob/main/README.md) open-source project. 🎉\n\n<a href=\"https://glama.ai/mcp/servers/xyzzgaj9bk\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xyzzgaj9bk/badge\" /></a>\n<a href=\"https://smithery.ai/server/mcp-pandoc\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/mcp-pandoc\"></a>\n\n## Overview\n\nA Model Context Protocol server for document format conversion using [pandoc](https://pandoc.org/index.html). This server provides tools to transform content between different document formats while preserving formatting and structure.\n\nPlease note that mcp-pandoc is currently in early development. PDF support is under development, and the functionality and available tools are subject to change and expansion as we continue to improve the server.\n\nCredit: This project uses the [Pandoc Python package](https://pypi.org/project/pandoc/) for document conversion, forming the foundation for this project.\n\n## Demo\n\n[![mcp-pandoc - v1: Seamless Document Format Conversion for Claude using MCP server](https://img.youtube.com/vi/vN3VOb0rygM/maxresdefault.jpg)](https://youtu.be/vN3VOb0rygM)\n\n> 🎥 [Watch on YouTube](https://youtu.be/vN3VOb0rygM)\n\n<details>\n<summary>Screenshots</summary>\n\n<img width=\"2407\" alt=\"Screenshot 2024-12-26 at 3 33 54 PM\" src=\"https://github.com/user-attachments/assets/ce3f5396-252a-4bba-84aa-65b2a06b859e\" />\n<img width=\"2052\" alt=\"Screenshot 2024-12-26 at 3 38 24 PM\" src=\"https://github.com/user-attachments/assets/8c525ad1-b184-41ca-b068-7dd34b60b85d\" />\n<img width=\"1498\" alt=\"Screenshot 2024-12-26 at 3 40 51 PM\" src=\"https://github.com/user-attachments/assets/a1e0682d-fe44-40b6-9988-bf805627beeb\" />\n<img width=\"760\" alt=\"Screenshot 2024-12-26 at 3 41 20 PM\" src=\"https://github.com/user-attachments/assets/1d7f5998-6d7f-48fa-adcf-fc37d0521213\" />\n<img width=\"1493\" alt=\"Screenshot 2024-12-26 at 3 50 27 PM\" src=\"https://github.com/user-attachments/assets/97992c5d-8efc-40af-a4c3-94c51c392534\" />\n</details>\n\nMore to come...\n\n## Tools\n\n1. `convert-contents`\n   - Transforms content between supported formats\n   - Inputs:\n     - `contents` (string): Source content to convert (required if input_file not provided)\n     - `input_file` (string): Complete path to input file (required if contents not provided)\n     - `input_format` (string): Source format of the content (defaults to markdown)\n     - `output_format` (string): Target format (defaults to markdown)\n     - `output_file` (string): Complete path for output file (required for pdf, docx, rst, latex, epub formats)\n   - Supported input/output formats:\n     - markdown\n     - html\n     - pdf\n     - docx\n     - rst\n     - latex\n     - epub\n     - txt\n   - Note: For advanced formats (pdf, docx, rst, latex, epub), an output_file path is required\n\n### Supported Formats\n\nCurrently supported formats:\n\nBasic formats (direct conversion):\n\n- Plain text (.txt)\n- Markdown (.md)\n- HTML (.html)\n\nAdvanced formats (requires complete file paths):\n\n- PDF (.pdf) - requires TeX Live installation\n- DOCX (.docx)\n- RST (.rst)\n- LaTeX (.tex)\n- EPUB (.epub)\n\nNote: For advanced formats:\n\n1. Complete file paths with filename and extension are required\n2. **PDF conversion requires TeX Live installation** (see Critical Requirements section -> For macOS: `brew install texlive`)\n3. When no output path is specified:\n   - Basic formats: Displays converted content in the chat\n   - Advanced formats: May save in system temp directory (/tmp/ on Unix systems)\n\n## Usage & configuration\n\nTo use the published one\n\n```bash\n{\n  \"mcpServers\": {\n    \"mcp-pandoc\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-pandoc\"]\n    }\n  }\n}\n```\n\n### ⚠️ Important Notes\n\n#### Critical Requirements\n\n1. **PDF Conversion Prerequisites**\n   - TeX Live must be installed before attempting PDF conversion\n   - Installation commands:\n\n     ```bash\n     # Ubuntu/Debian\n     sudo apt-get install texlive-xetex\n\n     # macOS\n     brew install texlive\n\n     # Windows\n     # Install MiKTeX or TeX Live from:\n     # https://miktex.org/ or https://tug.org/texlive/\n     ```\n\n2. **File Path Requirements**\n   - When saving or converting files, you MUST provide complete file paths including filename and extension\n   - The tool does not automatically generate filenames or extensions\n\n#### Examples\n\n✅ Correct Usage:\n\n```bash\n# Converting content to PDF\n\"Convert this text to PDF and save as /path/to/document.pdf\"\n\n# Converting between file formats\n\"Convert /path/to/input.md to PDF and save as /path/to/output.pdf\"\n```\n\n❌ Incorrect Usage:\n\n```bash\n# Missing filename and extension\n\"Save this as PDF in /documents/\"\n\n# Missing complete path\n\"Convert this to PDF\"\n\n# Missing extension\n\"Save as /documents/story\"\n```\n\n#### Common Issues and Solutions\n\n1. **PDF Conversion Fails**\n   - Error: \"xelatex not found\"\n   - Solution: Install TeX Live first (see installation commands above)\n\n2. **File Conversion Fails**\n   - Error: \"Invalid file path\"\n   - Solution: Provide complete path including filename and extension\n   - Example: `/path/to/document.pdf` instead of just `/path/to/`\n\n3. **Format Conversion Fails**\n   - Error: \"Unsupported format\"\n   - Solution: Use only supported formats:\n     - Basic: txt, html, markdown\n     - Advanced: pdf, docx, rst, latex, epub\n\n## Quickstart\n\n### Install\n\n#### Option 1: Installing manually via claude_desktop_config.json config file\n\n- On MacOS: `open ~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n\n  ℹ️ Replace <DIRECTORY> with your locally cloned project path\n  \n  ```bash\n  \"mcpServers\": {\n    \"mcp-pandoc\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<DIRECTORY>/mcp-pandoc\",\n        \"run\",\n        \"mcp-pandoc\"\n      ]\n    }\n  }\n  ```\n  \n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n\n  ```bash\n  \"mcpServers\": {\n    \"mcp-pandoc\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-pandoc\"\n      ]\n    }\n  }\n  ```\n\n</details>\n\n#### Option 2: To install Published Servers Configuration automatically via Smithery\n\nRun the following bash command to install **published** [mcp-pandoc pypi](https://pypi.org/project/mcp-pandoc) for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-pandoc):\n\n```bash\nnpx -y @smithery/cli install mcp-pandoc --client claude\n```\n\n**Note**: To use locally configured mcp-pandoc, follow \"Development/Unpublished Servers Configuration\" step above.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n\n```bash\nuv sync\n```\n\n2. Build package distributions:\n\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/vivekvells/Desktop/code/ai/mcp-pandoc run mcp-pandoc\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n---\n\n## Contributing\n\nWe welcome contributions to enhance mcp-pandoc! Here's how you can get involved:\n\n1. **Report Issues**: Found a bug or have a feature request? Open an issue on our [GitHub Issues](https://github.com/vivekVells/mcp-pandoc/issues) page.\n2. **Submit Pull Requests**: Improve the codebase or add features by creating a pull request.\n\n---\n",
    "publisher": {
      "id": "vivekVells",
      "name": "vivekVells",
      "url": "https://github.com/vivekVells/mcp-pandoc"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/vivekVells/mcp-pandoc",
    "distribution": {
      "type": "pip",
      "package": "mcp-pandoc"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-pandoc"
      ],
      "env": {}
    }
  },
  {
    "id": "5504da19-9918-4379-a869-c17170e36f9c",
    "name": "kazuph/mcp-taskmanager",
    "description": "MCP TaskManager",
    "fullDescription": "# MCP TaskManager\n\nModel Context Protocol server for Task Management. This allows Claude Desktop (or any MCP client) to manage and execute tasks in a queue-based system.\n\n## Quick Start (For Users)\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Claude Desktop (install from https://claude.ai/desktop)\n\n### Configuration\n\n1. Open your Claude Desktop configuration file at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nYou can find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\n2. Add the following to your configuration:\n\n```json\n{\n  \"tools\": {\n    \"taskmanager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-taskmanager\"]\n    }\n  }\n}\n```\n\n## For Developers\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n### Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-taskmanager.git\ncd mcp-taskmanager\nnpm install\nnpm run build\n```\n\n### Development Configuration\n\n1. Make sure Claude Desktop is installed and running.\n\n2. Install tsx globally if you haven't:\n```bash\nnpm install -g tsx\n# or\npnpm add -g tsx\n```\n\n3. Modify your Claude Desktop config located at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nAdd the following to your MCP client's configuration:\n\n```json\n{\n  \"tools\": {\n    \"taskmanager\": {\n      \"args\": [\"tsx\", \"/path/to/mcp-taskmanager/index.ts\"]\n    }\n  }\n}\n```\n\n## Available Operations\n\nThe TaskManager supports two main phases of operation:\n\n### Planning Phase\n- Accepts a task list (array of strings) from the user\n- Stores tasks internally as a queue\n- Returns an execution plan (task overview, task ID, current queue status)\n\n### Execution Phase\n- Returns the next task from the queue when requested\n- Provides feedback mechanism for task completion\n- Removes completed tasks from the queue\n- Prepares the next task for execution\n\n### Parameters\n\n- `action`: \"plan\" | \"execute\" | \"complete\"\n- `tasks`: Array of task strings (required for \"plan\" action)\n- `taskId`: Task identifier (required for \"complete\" action)\n- `getNext`: Boolean flag to request next task (for \"execute\" action)\n\n## Example Usage\n\n```typescript\n// Planning phase\n{\n  action: \"plan\",\n  tasks: [\"Task 1\", \"Task 2\", \"Task 3\"]\n}\n\n// Execution phase\n{\n  action: \"execute\",\n  getNext: true\n}\n\n// Complete task\n{\n  action: \"complete\",\n  taskId: \"task-123\"\n}\n```\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-taskmanager"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-taskmanager",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-taskmanager"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-taskmanager"
      ],
      "env": {}
    }
  },
  {
    "id": "47b28fa4-1288-42a0-893a-697182896875",
    "name": "johnneerdael/netskope-mcp",
    "description": "Netskope NPA MCP Server",
    "fullDescription": "# Netskope NPA MCP Server\n\nA Model Context Protocol (MCP) server for managing Netskope Network Private Access (NPA) infrastructure through Large Language Models (LLMs).\n\n## Warning\n\nStill lots of work needs to be done for all 50 tools to be operational, i strongly advise against using this with any production environment\n\n## Demonstration\nhttps://github.com/user-attachments/assets/61878042-861a-4262-bac8-17720a4b4bd8\n\n## Installation\n\n### Option 1: NPM Package\n\nInstall the package using npm:\n\n```bash\nnpm install @johnneerdael/netskope-mcp\n```\n\n### Option 2: Local Development\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/johnneerdael/netskope-mcp.git\ncd netskope-mcp\nnpm install\nnpm run build\n```\n\n### MCP Configuration\n\nAdd the following configuration to your MCP settings file:\n\n#### Windows with WSL\n\nFor NPM installation:\n```json\n{\n  \"mcpServers\": {\n    \"netskope-mcp\": {\n      \"command\": \"wsl.exe\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"source ~/.nvm/nvm.sh && NETSKOPE_BASE_URL=https://your-tenant.goskope.com NETSKOPE_API_KEY=your-token npx -y @johnneerdael/netskope-mcp\"\n      ]\n    }\n  }\n}\n```\n\nFor local development:\n```json\n{\n  \"mcpServers\": {\n    \"netskope-mcp\": {\n      \"command\": \"wsl.exe\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"cd /path/to/netskope-mcp && NETSKOPE_BASE_URL=https://your-tenant.goskope.com NETSKOPE_API_KEY=your-token node dist/cli.js\"\n      ]\n    }\n  }\n}\n```\n\n#### Linux and macOS\n\nFor NPM installation:\n```json\n{\n  \"mcpServers\": {\n    \"netskope-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@johnneerdael/netskope-mcp\"],\n      \"env\": {\n        \"NETSKOPE_BASE_URL\": \"https://your-tenant.goskope.com\",\n        \"NETSKOPE_API_KEY\": \"your-token\"\n      }\n    }\n  }\n}\n```\n\nFor local development:\n```json\n{\n  \"mcpServers\": {\n    \"netskope-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"dist/cli.js\"],\n      \"cwd\": \"/path/to/netskope-mcp\",\n      \"env\": {\n        \"NETSKOPE_BASE_URL\": \"https://your-tenant.goskope.com\",\n        \"NETSKOPE_API_KEY\": \"your-token\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\nThe Netskope NPA MCP Server requires the following environment variables to be configured for proper operation:\n\n### Required Variables\n\n- **NETSKOPE_BASE_URL**\n  - **Description**: The base URL of your Netskope tenant\n  - **Format**: Full URL including protocol\n  - **Example**: `https://your-tenant.goskope.com`\n  - **Usage**: Used for all API communications with your Netskope tenant\n  - **Note**: Must be the complete tenant URL without any path components\n\n- **NETSKOPE_API_KEY**\n  - **Description**: API token for authentication with Netskope services\n  - **Format**: String token from Netskope admin console\n  - **Example**: `030f31f7d57fd94834af57a3edc4bbda`\n  - **Usage**: Required for authenticating all API requests\n  - **Security Note**: Keep this token secure and never commit it to version control\n\n### Configuration Examples\n\n#### Development Environment\n```bash\nexport NETSKOPE_BASE_URL=\"https://dev-tenant.goskope.com\"\nexport NETSKOPE_API_KEY=\"your-development-token\"\n```\n\n#### Production Environment\n```bash\nexport NETSKOPE_BASE_URL=\"https://prod-tenant.goskope.com\"\nexport NETSKOPE_API_KEY=\"your-production-token\"\n```\n\n### AlertsTools\n- **getAlertConfig**\n  - **Description**: Retrieves the current alert configuration settings for publishers, including notification preferences for various events such as upgrades and connection status changes.\n  - **Required Parameters**: None\n  - **Response Schema**:\n    ```typescript\n    {\n      adminUsers: string[],      // Array of admin user emails to notify\n      eventTypes: string[],      // Array of event types to monitor\n      selectedUsers: string      // Additional users to notify\n    }\n    ```\n  - **Event Types**:\n    - `UPGRADE_WILL_START`: Notification before a publisher upgrade begins\n    - `UPGRADE_STARTED`: Notification when upgrade process initiates\n    - `UPGRADE_SUCCEEDED`: Notification upon successful upgrade completion\n    - `UPGRADE_FAILED`: Notification if upgrade process fails\n    - `CONNECTION_FAILED`: Notification when publisher connection issues occur\n  - **Usage Examples**:\n    1. \"Check which administrators are configured to receive upgrade notifications: Use `getAlertConfig` to return the current list of admin users and their notification preferences.\"\n    2. \"Verify the alert configuration before a planned maintenance window: Use `getAlertConfig` to ensure the right team members will be notified of upgrade events.\"\n    3. \"Audit the publisher monitoring setup: Use `getAlertConfig` to show which critical events are being tracked and who receives notifications.\"\n\n- **updateAlertConfig**\n  - **Description**: Updates the alert configuration settings for publishers, allowing customization of notification preferences for various system events including upgrades and connection status changes.\n  - **Required Parameters**:\n    ```typescript\n    {\n      adminUsers: string[],      // Array of admin user emails to receive notifications\n      eventTypes: string[],      // Array of event types to monitor\n      selectedUsers: string      // Additional users to receive notifications\n    }\n    ```\n  - **Response Schema**: Same as getAlertConfig\n  - **Usage Examples**:\n    1. \"Configure notifications: Update alert settings to ensure critical events are properly monitored.\"\n    2. \"Modify recipients: Adjust the list of administrators who receive specific types of alerts.\"\n    3. \"Event selection: Customize which event types trigger notifications for different user groups.\"\n\n### LocalBrokerTools\n- **listLocalBrokers**\n  - **Description**: Lists all configured local brokers in your Netskope environment. Local brokers are used for on-premises Zero Trust Network Access (ZTNA) scenarios where end-users connect to a Local Broker instead of a Cloud Broker to access private applications hosted on-premises.\n  - **Required Parameters**: None\n  - **Optional Parameters**:\n    - `fields`: Array of specific fields to return in the response\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      total: number,\n      data: Array<{\n        id: number,              // Unique identifier for the local broker\n        name: string,            // Display name of the local broker\n        common_name: string,     // Common name used for broker identification\n        registered: boolean      // Registration status of the broker\n      }>\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Monitor your local broker deployment by listing your local brokers to get an overview of all registered brokers and their current status.\"\n    2. \"Verify high availability setup: Check if you have multiple local brokers configured per site by reviewing the list of deployed brokers.\"\n    3. \"Audit broker registration: List all local brokers to identify any unregistered instances that need attention.\"\n\n- **createLocalBroker**\n  - **Description**: Creates a new local broker instance for handling on-premises ZTNA traffic. This is typically used when setting up new sites or expanding capacity for existing locations.\n  - **Required Parameters**:\n    ```typescript\n    {\n      name: string              // Name for the new local broker\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        id: number,             // Assigned unique identifier\n        name: string,           // Configured broker name\n        common_name: string,    // Assigned common name\n        registered: boolean     // Initial registration status\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Deploy a new site: Create a local broker  twice to ensure high availability for a new office location.\"\n    2. \"Expand capacity: Add additional local brokers to handle increased on-premises traffic by creating new broker instances.\"\n    3. \"Initialize HA setup: Create multiple local brokers with descriptive names indicating their site and role.\"\n\n- **getLocalBroker**\n  - **Description**: Retrieves detailed information about a specific local broker by its ID. Use this to monitor the status and configuration of individual broker instances.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the local broker to retrieve\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        id: number,             // Broker's unique identifier\n        name: string,           // Broker's display name\n        common_name: string,    // Broker's common name\n        registered: boolean     // Current registration status\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Check broker health: Retrieve specific broker details to verify its registration status and configuration.\"\n    2. \"Troubleshoot connectivity: Get detailed information about a broker that's experiencing issues.\"\n    3. \"Verify deployment: Confirm the successful creation of a new broker by retrieving its details.\"\n\n- **updateLocalBroker**\n  - **Description**: Updates the configuration of an existing local broker. This allows you to modify broker settings such as its name while maintaining its identity and connections.\n  - **Required Parameters**:\n    ```typescript\n    {\n      id: number,               // Identifier of broker to update\n      name: string              // New name for the broker\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        id: number,             // Broker's identifier\n        name: string,           // Updated broker name\n        common_name: string,    // Broker's common name\n        registered: boolean     // Current registration status\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Rename for clarity: Update a broker's name to better reflect its location or role in your infrastructure.\"\n    2. \"Standardize naming: Modify broker names to follow updated naming conventions across your organization.\"\n    3. \"Update HA pair: Adjust broker names to clearly indicate primary and secondary roles.\"\n\n- **deleteLocalBroker**\n  - **Description**: Removes a local broker from your Netskope configuration. Use this when decommissioning brokers or cleaning up unused instances.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the local broker to delete\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Decommission old brokers: Remove brokers that are no longer needed or have been replaced.\"\n    2. \"Clean up test instances: Delete temporary brokers created for testing purposes.\"\n    3. \"Site consolidation: Remove brokers from decommissioned locations while maintaining service at active sites.\"\n\n- **getBrokerConfig**\n  - **Description**: Retrieves the global configuration settings for local brokers, including hostname configurations that affect all broker instances.\n  - **Required Parameters**: None\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        hostname: string        // Global hostname configuration\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Review global settings: Check the current hostname configuration affecting all local brokers.\"\n    2. \"Prepare for changes: Verify existing configuration before planning updates.\"\n    3. \"Audit configuration: Ensure hostname settings align with your network architecture.\"\n\n- **updateBrokerConfig**\n  - **Description**: Updates the global configuration settings for all local brokers, allowing you to modify system-wide broker behavior.\n  - **Required Parameters**:\n    ```typescript\n    {\n      hostname: string          // New hostname configuration\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        hostname: string        // Updated hostname configuration\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Modify global settings: Update the hostname configuration to reflect network changes.\"\n    2. \"Infrastructure updates: Adjust broker configurations to accommodate new networking requirements.\"\n    3. \"Standardize setup: Ensure consistent hostname configuration across all broker instances.\"\n\n- **generateLocalBrokerRegistrationToken**\n  - **Description**: Generates a new registration token for a specific local broker, enabling secure registration with the Netskope management plane.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the local broker\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found',\n      data: {\n        token: string          // Generated registration token\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Secure new broker: Generate a token to safely register a newly deployed local broker.\"\n    2. \"Re-register broker: Create a new token when needing to re-establish broker registration.\"\n    3. \"Token rotation: Generate new registration tokens as part of security maintenance.\"\n\n### PolicyTools\n- **listRules**\n  - **Description**: Lists all policy rules configured in your Netskope Private Access environment. These rules define access controls for private applications using Zero Trust Network Access (ZTNA) principles.\n  - **Required Parameters**: None\n  - **Optional Parameters**: \n    - `fields`: Array of specific fields to return\n    - `filter`: Filter criteria for the rules\n    - `limit`: Maximum number of rules to return\n    - `offset`: Number of rules to skip\n    - `sortby`: Field to sort by\n    - `sortorder`: Sort direction ('asc' or 'desc')\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        rules: Array<{\n          id: number,\n          name: string,\n          description?: string,\n          enabled: boolean,\n          action: 'allow' | 'block',\n          policy_group_id: number,\n          priority: number,\n          conditions: Array<{\n            type: 'private_app' | 'user' | 'group' | 'organization_unit' | 'location' | 'device',\n            operator: 'in' | 'not_in' | 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'starts_with' | 'ends_with',\n            value: string | string[] | number | number[]\n          }>,\n          created_at: string,\n          updated_at: string\n        }>\n      },\n      status: 'success' | 'error',\n      total: number\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Audit access policies to review all configured rules and their conditions to ensure proper access controls.\"\n    2. \"Prioritize rules: List rules sorted by priority to understand the order of policy evaluation and identify potential conflicts.\"\n    3. \"Filter specific policies: Retrieve rules related to specific applications or user groups using the filter parameter.\"\n\n- **getRule**\n  - **Description**: Retrieves detailed information about a specific policy rule by its ID. Use this to examine individual rule configurations and conditions.\n  - **Required Parameters**: \n    - `id`: Numeric identifier of the policy rule\n  - **Optional Parameters**: \n    - `fields`: Array of specific fields to return\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        id: number,\n        name: string,\n        description?: string,\n        enabled: boolean,\n        action: 'allow' | 'block',\n        policy_group_id: number,\n        priority: number,\n        conditions: Array<{\n          type: 'private_app' | 'user' | 'group' | 'organization_unit' | 'location' | 'device',\n          operator: 'in' | 'not_in' | 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'starts_with' | 'ends_with',\n          value: string | string[] | number | number[]\n        }>,\n        created_at: string,\n        updated_at: string\n      },\n      status: 'success' | 'error'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Troubleshoot access issues: Examine specific rule details to understand why access might be blocked or allowed.\"\n    2. \"Verify rule conditions: Check the exact conditions configured for a critical access policy.\"\n    3. \"Review rule history: Check creation and update timestamps to track policy changes.\"\n\n- **createRule**\n  - **Description**: Creates a new policy rule to control access to private applications. Rules can be based on various conditions including user identity, device status, and location.\n  - **Required Parameters**:\n    ```typescript\n    {\n      name: string,                // Rule name\n      description?: string,        // Optional rule description\n      enabled: boolean,            // Rule status\n      action: 'allow' | 'block',   // Access action\n      policy_group_id: number,     // Associated policy group\n      priority: number,            // Rule priority\n      conditions: Array<{\n        type: 'private_app' | 'user' | 'group' | 'organization_unit' | 'location' | 'device',\n        operator: 'in' | 'not_in' | 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'starts_with' | 'ends_with',\n        value: string | string[] | number | number[]\n      }>\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Implement least privilege access: Create rules that grant access only to specific applications based on user roles and device status.\"\n    2. \"Set up location-based policies: Define rules that restrict access based on user location for compliance requirements.\"\n    3. \"Configure group-based access: Create rules that allow specific user groups to access designated private applications.\"\n\n- **updateRule**\n  - **Description**: Updates an existing policy rule's configuration. Use this to modify access controls, conditions, or rule properties.\n  - **Required Parameters**: \n    - `id`: Numeric identifier of the rule to update\n    - `data`: Updated rule configuration following the same schema as create_rule\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        // Updated rule details (same as get_rule response)\n      },\n      status: 'success' | 'error'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Adjust access conditions: Modify rule conditions to accommodate new security requirements or organizational changes.\"\n    2. \"Update rule priority: Change a rule's priority to ensure proper policy evaluation order.\"\n    3. \"Enable/disable rules: Toggle rule status during maintenance or when implementing policy changes.\"\n\n- **deleteRule**\n  - **Description**: Removes a policy rule from your configuration. Use with caution as this permanently removes the access control policy.\n  - **Required Parameters**: \n    - `id`: Numeric identifier of the rule to delete\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Clean up obsolete policies: Remove rules that are no longer needed or have been superseded by new policies.\"\n    2. \"Policy consolidation: Delete redundant rules after merging policy configurations.\"\n    3. \"Remove temporary rules: Clean up temporary access policies created for specific projects or maintenance.\"\n\n### PrivateAppsTools\n- **createPrivateApp**\n  - **Description**: Creates a new private application in your Netskope environment. This allows you to define and configure applications that will be accessible through your Zero Trust Network Access (ZTNA) infrastructure.\n  - **Required Parameters**:\n    ```typescript\n    {\n      app_name: string,                    // Name of the private application\n      host: string,                        // Host address of the application\n      clientless_access: boolean,          // Enable clientless access\n      is_user_portal_app: boolean,         // Show in user portal\n      protocols: Array<{\n        port: string,                      // Port number\n        type: 'tcp' | 'udp'               // Protocol type\n      }>,\n      publisher_tags?: Array<{            // Optional publisher tags\n        tag_name: string\n      }>,\n      publishers: Array<{                 // Associated publishers\n        publisher_id: string,\n        publisher_name: string\n      }>,\n      trust_self_signed_certs: boolean,   // Trust self-signed certificates\n      use_publisher_dns: boolean,         // Use publisher DNS\n      allow_unauthenticated_cors?: boolean, // Optional CORS settings\n      allow_uri_bypass?: boolean,         // Optional URI bypass\n      bypass_uris?: string[],            // Optional bypass URIs\n      real_host?: string,                // Optional real host\n      app_option?: Record<string, unknown> // Additional options\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        allow_unauthenticated_cors: boolean,\n        allow_uri_bypass: boolean,\n        uribypass_header_value: string,\n        bypass_uris: string[],\n        app_option: Record<string, unknown>,\n        clientless_access: boolean,\n        host: string,\n        id: number,\n        is_user_portal_app: boolean,\n        name: string,\n        protocols: Array<{\n          ports: string[],\n          type: string\n        }>,\n        real_host: string,\n        service_publisher_assignments: Array<{\n          primary: boolean,\n          publisher_id: number,\n          publisher_name: string,\n          reachability: {\n            error_code: number,\n            error_string: string,\n            reachable: boolean\n          },\n          service_id: number\n        }>,\n        tags: Array<{\n          tag_id: number,\n          tag_name: string\n        }>,\n        trust_self_signed_certs: boolean,\n        use_publisher_dns: boolean\n      },\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Deploy internal application: Create a private app definition for an internal web service with specific protocol and security settings.\"\n    2. \"Configure high availability: Set up a private application with multiple publishers for redundancy.\"\n    3. \"Enable secure access: Create a private app with strict security settings and specific bypass rules.\"\n\n- **updatePrivateApp**\n  - **Description**: Updates the configuration of an existing private application, allowing modification of access settings, protocols, and security parameters.\n  - **Required Parameters**:\n    ```typescript\n    {\n      id: number,                         // Application ID\n      // All other fields same as create_private_app\n    }\n    ```\n  - **Response Schema**: Same as create_private_app\n  - **Usage Examples**:\n    1. \"Modify security settings: Update certificate trust settings and CORS configuration for enhanced security.\"\n    2. \"Adjust access parameters: Update protocols or bypass rules to accommodate changing requirements.\"\n    3. \"Publisher reassignment: Modify the list of publishers handling the application traffic.\"\n\n- **deletePrivateApp**\n  - **Description**: Removes a private application from your Netskope configuration. This action permanently removes the application definition and associated access controls.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the private application\n  - **Response Schema**:\n    ```typescript\n    {\n      status: number,\n      result: string\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Decommission service: Remove a private application that is no longer in use.\"\n    2. \"Clean up test apps: Delete temporary applications used for testing.\"\n    3. \"Remove deprecated services: Clean up old application definitions during infrastructure updates.\"\n\n- **getPrivateApp**\n  - **Description**: Retrieves detailed configuration information about a specific private application.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the private application\n  - **Response Schema**: Same as create_private_app response\n  - **Usage Examples**:\n    1. \"Audit configuration: Review detailed settings of a private application for compliance checks.\"\n    2. \"Troubleshoot access: Examine application configuration to resolve connectivity issues.\"\n    3. \"Verify settings: Confirm proper configuration after making changes to the application.\"\n\n- **listPrivateApps**\n  - **Description**: Retrieves a list of all configured private applications with their configurations.\n  - **Required Parameters**: None\n  - **Optional Parameters**:\n    - `fields`: Specific fields to return\n    - `filter`: Filter criteria\n    - `query`: Search query\n    - `limit`: Maximum number of results\n    - `offset`: Number of results to skip\n  - **Response Schema**:\n    ```typescript\n    {\n      data: Array<{\n        // Same fields as get_private_app response\n      }>,\n      status: 'success' | 'not found',\n      total: number\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Inventory applications: Get a complete list of all private applications for audit purposes.\"\n    2. \"Filter by criteria: Search for applications with specific configurations or tags.\"\n    3. \"Paginated review: Retrieve applications in manageable chunks for large deployments.\"\n\n- **getPrivateAppTags**\n  - **Description**: Retrieves all tags associated with private applications, useful for organizing and categorizing applications.\n  - **Required Parameters**: None\n  - **Optional Parameters**:\n    - `query`: Search query for tags\n    - `limit`: Maximum number of tags\n    - `offset`: Number of tags to skip\n  - **Response Schema**:\n    ```typescript\n    {\n      data: Array<{\n        tag_id: number,\n        tag_name: string\n      }>,\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"List categories: Retrieve all tags to understand application categorization.\"\n    2. \"Search tags: Find specific tags matching certain criteria.\"\n    3. \"Tag inventory: Review all available tags for standardization purposes.\"\n\n- **createPrivateAppTags**\n  - **Description**: Associates new tags with a private application for better organization and management.\n  - **Required Parameters**:\n    - `id`: Application identifier\n    - `tags`: Array of tag objects\n  - **Usage Examples**:\n    1. \"Categorize apps: Add organizational tags to group related applications.\"\n    2. \"Environment labeling: Tag applications based on their deployment environment.\"\n    3. \"Team assignment: Add tags to indicate which team owns or manages the application.\"\n\n- **updatePrivateAppTags**\n  - **Description**: Updates the tags associated with one or more private applications.\n  - **Required Parameters**:\n    - `ids`: Array of application identifiers\n    - `tags`: Array of updated tag objects\n  - **Usage Examples**:\n    1. \"Bulk tag update: Modify tags for multiple applications simultaneously.\"\n    2. \"Tag standardization: Update tags to conform to new naming conventions.\"\n    3. \"Ownership changes: Update tags to reflect new team assignments.\"\n\n- **updatePrivateAppPublishers**\n  - **Description**: Updates the publisher assignments for private applications, controlling which publishers handle application traffic.\n  - **Required Parameters**:\n    ```typescript\n    {\n      private_app_ids: string[],          // Application IDs\n      publisher_ids: string[]             // Publisher IDs\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Load balancing: Distribute application traffic across multiple publishers.\"\n    2. \"Publisher migration: Move applications to new or different publishers.\"\n    3. \"HA configuration: Add backup publishers for high availability.\"\n\n- **deletePrivateAppPublishers**\n  - **Description**: Removes publisher assignments from private applications.\n  - **Required Parameters**:\n    ```typescript\n    {\n      private_app_ids: string[],          // Application IDs\n      publisher_ids: string[]             // Publisher IDs to remove\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Publisher decommission: Remove old publishers from application configurations.\"\n    2. \"Clean up assignments: Remove unnecessary publisher assignments.\"\n    3. \"Reconfigure routing: Remove publishers during traffic flow updates.\"\n\n- **getDiscoverySettings**\n  - **Description**: Retrieves the current discovery settings for private applications, which control how applications are discovered and monitored.\n  - **Required Parameters**: None\n  - **Usage Examples**:\n    1. \"Review discovery: Check current application discovery configuration.\"\n    2. \"Audit settings: Verify discovery parameters for compliance.\"\n    3. \"Monitor configuration: Examine how applications are being discovered and tracked.\"\n\n- **getPolicyInUse**\n  - **Description**: Retrieves the active policies associated with specified private applications.\n  - **Required Parameters**:\n    - `ids`: Array of application identifiers\n  - **Usage Examples**:\n    1. \"Policy audit: Review which policies are affecting specific applications.\"\n    2. \"Access control review: Verify policy assignments for security compliance.\"\n    3. \"Troubleshoot access: Check policies when investigating access issues.\"\n\n### PublishersTools\n- **listPublishers**\n  - **Description**: Lists all publishers configured in your Netskope environment. Publishers are the components that handle private application traffic and require proper management for optimal performance.\n  - **Required Parameters**: None\n  - **Optional Parameters**:\n    - `fields`: Specific fields to return in the response\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        publishers: Array<{\n          apps_count: number,\n          assessment: {\n            ca_certs_status: {\n              hashes: string[],\n              last_modified: number\n            },\n            eee_support: boolean,\n            hdd_free: string,\n            hdd_total: string,\n            ip_address: string,\n            latency: number,\n            version: string\n          },\n          capabilities: {\n            DTLS: boolean,\n            EEE: boolean,\n            auto_upgrade: boolean,\n            nwa_ba: boolean,\n            pull_nsconfig: {\n              orgkey_exist: boolean,\n              orguri_exist: boolean\n            }\n          },\n          common_name: string,\n          connected_apps: string[],\n          id: number,\n          lbrokerconnect: boolean,\n          name: string,\n          publisher_upgrade_profiles_id: number,\n          registered: boolean,\n          status: 'connected' | 'not registered',\n          stitcher_id: number,\n          sticher_pop: string,\n          upgrade_request: boolean,\n          upgrade_status: {\n            upstat: string\n          }\n        }>\n      },\n      status: 'success' | 'not found',\n      total: number\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Monitor deployment: List all publishers to check their connection status and capabilities.\"\n    2. \"Audit configuration: Review publisher settings and associated applications.\"\n    3. \"Capacity planning: Check the number of apps and load across publishers.\"\n\n- **getPublisher**\n  - **Description**: Retrieves detailed information about a specific publisher, including its configuration, status, and capabilities.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the publisher\n  - **Response Schema**: Same as individual publisher in list_publishers response\n  - **Usage Examples**:\n    1. \"Health check: Get detailed status information for a specific publisher.\"\n    2. \"Troubleshoot connectivity: Examine publisher capabilities and connection status.\"\n    3. \"Version verification: Check publisher version and upgrade status.\"\n\n- **createPublisher**\n  - **Description**: Creates a new publisher instance in your Netskope environment.\n  - **Required Parameters**:\n    ```typescript\n    {\n      name: string,                        // Publisher name\n      lbrokerconnect?: boolean,           // Optional local broker connection\n      publisher_upgrade_profiles_id?: number // Optional upgrade profile assignment\n    }\n    ```\n  - **Response Schema**: Same as get_publisher response\n  - **Usage Examples**:\n    1. \"Deploy new publisher: Create a publisher for a new data center location.\"\n    2. \"Expand capacity: Add publishers to handle increased application traffic.\"\n    3. \"Configure HA: Create additional publishers for high availability setup.\"\n\n- **patchPublisher**\n  - **Description**: Partially updates a publisher's configuration, allowing modification of specific settings while maintaining others.\n  - **Required Parameters**:\n    ```typescript\n    {\n      name: string,                        // Publisher name\n      id?: number,                        // Optional publisher ID\n      lbrokerconnect?: boolean,           // Optional local broker connection\n      publisher_upgrade_profiles_id?: number // Optional upgrade profile assignment\n    }\n    ```\n  - **Response Schema**: Same as get_publisher response\n  - **Usage Examples**:\n    1. \"Update name: Change publisher name to match new naming convention.\"\n    2. \"Modify connection: Update local broker connection settings.\"\n    3. \"Assign profile: Link publisher to an upgrade profile.\"\n\n- **updatePublisher**\n  - **Description**: Performs a complete update of a publisher's configuration, replacing all settings with the provided values.\n  - **Required Parameters**:\n    ```typescript\n    {\n      id: number,                         // Publisher ID\n      name: string,                       // Publisher name\n      lbrokerconnect?: boolean,          // Optional local broker connection\n      tags?: Array<{                     // Optional tags\n        tag_id: number,\n        tag_name: string\n      }>\n    }\n    ```\n  - **Response Schema**: Same as get_publisher response\n  - **Usage Examples**:\n    1. \"Full reconfiguration: Update all publisher settings at once.\"\n    2. \"Tag management: Update publisher tags and configuration together.\"\n    3. \"Reset settings: Replace existing configuration with new values.\"\n\n- **deletePublisher**\n  - **Description**: Removes a publisher from your Netskope configuration. Use with caution as this affects application access.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the publisher to delete\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Decommission publisher: Remove a publisher that's being retired.\"\n    2. \"Clean up test instances: Delete publishers used for testing.\"\n    3. \"Remove unused: Clean up publishers that are no longer needed.\"\n\n- **bulkUpgradePublishers**\n  - **Description**: Initiates upgrades for multiple publishers simultaneously.\n  - **Required Parameters**:\n    ```typescript\n    {\n      publishers: {\n        apply: {\n          upgrade_request: boolean      // Whether to request upgrade\n        },\n        id: string[]                   // Array of publisher IDs\n      }\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        publishers: Array<PublisherResponse>\n      },\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Mass upgrade: Upgrade all publishers in a specific region.\"\n    2. \"Staged rollout: Upgrade a subset of publishers at once.\"\n    3. \"Emergency patching: Apply critical updates to multiple publishers.\"\n\n- **getReleases**\n  - **Description**: Retrieves information about available publisher releases.\n  - **Required Parameters**: None\n  - **Response Schema**:\n    ```typescript\n    {\n      data: Array<{\n        docker_tag: string,\n        is_recommended: boolean,\n        release_type: 'Beta' | 'Latest' | 'Latest-1' | 'Latest-2',\n        version: string\n      }>,\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Version planning: Check available releases for upgrade planning.\"\n    2. \"Release tracking: Monitor new versions and recommendations.\"\n    3. \"Compatibility check: Verify release types before upgrading.\"\n\n- **getPrivateApps**\n  - **Description**: Retrieves the list of private applications associated with a specific publisher.\n  - **Required Parameters**:\n    - `publisherId`: Numeric identifier of the publisher\n  - **Response Schema**: Application-specific response\n  - **Usage Examples**:\n    1. \"App inventory: List all applications handled by a publisher.\"\n    2. \"Load assessment: Check number and type of apps on a publisher.\"\n    3. \"Migration planning: Review apps before moving to a different publisher.\"\n\n- **generatePublisherRegistrationToken**\n  - **Description**: Creates a new registration token for a publisher, enabling secure registration with the Netskope control plane.\n  - **Required Parameters**:\n    - `publisherId`: Numeric identifier of the publisher\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        token: string          // Registration token\n      },\n      status: string\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Initial setup: Generate token for new publisher registration.\"\n    2. \"Re-registration: Create new token for publisher reconnection.\"\n    3. \"Security refresh: Rotate registration tokens periodically.\"\n\n### UpgradeProfileTools\n- **listUpgradeProfiles**\n  - **Description**: Lists all upgrade profiles configured in your Netskope environment. Upgrade profiles define when and how publisher upgrades are performed.\n  - **Required Parameters**: None\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        upgrade_profiles: Array<{\n          id: number,\n          external_id: number,\n          name: string,\n          docker_tag: string,\n          enabled: boolean,\n          frequency: string,          // Cron format: minute hour day * DAY_OF_WEEK\n          timezone: string,           // Standard timezone identifier\n          release_type: 'Beta' | 'Latest' | 'Latest-1' | 'Latest-2',\n          created_at: string,\n          updated_at: string,\n          next_update_time?: number,\n          num_associated_publisher: number,\n          upgrading_stage?: number,\n          will_start?: boolean\n        }>\n      },\n      status: 'success' | 'not found',\n      total: number\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Review upgrade schedules: List all profiles to understand when different publishers are scheduled for upgrades.\"\n    2. \"Audit configurations: Check all upgrade profiles for consistency in settings and schedules.\"\n    3. \"Monitor upgrade status: View which profiles are actively upgrading or scheduled for updates.\"\n\n- **getUpgradeProfile**\n  - **Description**: Retrieves detailed information about a specific upgrade profile, including its schedule and configuration.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the upgrade profile\n  - **Response Schema**: Same as individual profile in list_upgrade_profiles\n  - **Usage Examples**:\n    1. \"Verify settings: Check specific profile configuration before an upgrade window.\"\n    2. \"Troubleshoot upgrades: Examine profile details when investigating upgrade issues.\"\n    3. \"Monitor progress: Track the status of an ongoing upgrade process.\"\n\n- **createUpgradeProfile**\n  - **Description**: Creates a new upgrade profile to manage automated publisher upgrades. Profiles control when and how updates are applied to publishers.\n  - **Required Parameters**:\n    ```typescript\n    {\n      name: string,                  // Profile name\n      enabled: boolean,              // Profile status\n      docker_tag: string,            // Docker image tag for upgrade\n      frequency: string,             // Cron schedule format\n      timezone: string,              // Timezone for schedule\n      release_type: 'Beta' | 'Latest' | 'Latest-1' | 'Latest-2'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Schedule maintenance: Create a profile for regular off-hours upgrades.\"\n    2. \"Beta testing: Set up a profile for testing new releases on selected publishers.\"\n    3. \"Regional updates: Create profiles aligned with different timezone maintenance windows.\"\n\n- **updateUpgradeProfile**\n  - **Description**: Updates an existing upgrade profile's configuration, allowing modification of schedule, release type, and other settings.\n  - **Required Parameters**:\n    - `id`: Profile identifier\n    - `data`: Updated profile configuration (same schema as create_upgrade_profile)\n  - **Response Schema**:\n    ```typescript\n    {\n      data: {\n        // Updated profile details (same as get_upgrade_profile response)\n      },\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Adjust schedule: Modify upgrade timing to better align with maintenance windows.\"\n    2. \"Change release track: Update profile to use a different release type.\"\n    3. \"Enable/disable upgrades: Toggle profile status during change freeze periods.\"\n\n- **deleteUpgradeProfile**\n  - **Description**: Removes an upgrade profile from your configuration. Use with caution as this affects automated upgrade scheduling.\n  - **Required Parameters**:\n    - `id`: Numeric identifier of the profile to delete\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'not found'\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Remove obsolete profiles: Clean up unused upgrade configurations.\"\n    2. \"Profile consolidation: Delete redundant profiles after consolidating upgrade schedules.\"\n    3. \"Clean up test profiles: Remove temporary profiles used for upgrade testing.\"\n\n### SteeringTools\n- **updatePublisherAssociation**\n  - **Description**: Updates the association between private applications and publishers, allowing you to modify which publishers handle specific application traffic.\n  - **Required Parameters**:\n    ```typescript\n    {\n      private_app_ids: string[],          // Array of private application IDs\n      publisher_ids: string[]             // Array of publisher IDs\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error',\n      data: {\n        private_app_ids: string[],\n        publisher_ids: string[]\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Reassign publishers: Update which publishers handle specific private applications.\"\n    2. \"Load distribution: Modify publisher assignments for better traffic distribution.\"\n    3. \"HA configuration: Set up multiple publishers for application redundancy.\"\n\n- **deletePublisherAssociation**\n  - **Description**: Removes associations between private applications and publishers, effectively stopping those publishers from handling the applications' traffic.\n  - **Required Parameters**:\n    ```typescript\n    {\n      private_app_ids: string[],          // Array of private application IDs\n      publisher_ids: string[]             // Array of publisher IDs to remove\n    }\n    ```\n  - **Response Schema**: Same as update_publisher_association\n  - **Usage Examples**:\n    1. \"Remove associations: Stop specific publishers from handling certain applications.\"\n    2. \"Clean up configuration: Remove unnecessary publisher assignments.\"\n    3. \"Prepare for decommission: Remove applications before retiring a publisher.\"\n\n- **getUserDiagnostics**\n  - **Description**: Retrieves diagnostic information about user access to private applications, helping troubleshoot connectivity issues.\n  - **Required Parameters**: None\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error',\n      data: {\n        user_id: string,\n        diagnostics: Array<{\n          private_app_id: string,\n          private_app_name: string,\n          publisher_id: string,\n          publisher_name: string,\n          status: string,\n          timestamp: string\n        }>\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Access troubleshooting: Investigate user connectivity issues to private applications.\"\n    2. \"Audit access patterns: Review which publishers users are connecting through.\"\n    3. \"Monitor performance: Check connection status and timing for user access.\"\n\n- **getDeviceDiagnostics**\n  - **Description**: Retrieves diagnostic information about device access to specific private applications.\n  - **Required Parameters**:\n    - `deviceId`: Device identifier\n    - `privateAppId`: Private application identifier\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error',\n      data: {\n        device_id: string,\n        private_app_id: string,\n        diagnostics: Array<{\n          publisher_id: string,\n          publisher_name: string,\n          status: string,\n          timestamp: string\n        }>\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Device troubleshooting: Investigate specific device connectivity issues.\"\n    2. \"Application access: Check device-specific access to private applications.\"\n    3. \"Connection history: Review device connection patterns and status.\"\n\n### ValidationTools\n- **validateName**\n  - **Description**: Validates names for various resources (publishers, private apps, policies, etc.) to ensure they meet naming requirements.\n  - **Required Parameters**:\n    ```typescript\n    {\n      resourceType: 'publisher' | 'private_app' | 'policy' | 'policy_group' | 'upgrade_profile',\n      name: string,\n      tagType?: 'publisher' | 'private_app'\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error',\n      data: {\n        valid: boolean,\n        message?: string\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Name validation: Check if a proposed resource name meets requirements.\"\n    2. \"Tag verification: Validate tag names before creation.\"\n    3. \"Policy naming: Ensure policy names follow conventions.\"\n\n- **validateResource**\n  - **Description**: Validates complete resource configurations before creation or update operations.\n  - **Required Parameters**:\n    ```typescript\n    {\n      resourceType: 'publisher' | 'private_app' | 'policy' | 'policy_group' | 'upgrade_profile',\n      data: {\n        name: string,\n        // Additional resource-specific fields\n      }\n    }\n    ```\n  - **Response Schema**:\n    ```typescript\n    {\n      status: 'success' | 'error',\n      data: {\n        valid: boolean,\n        errors?: string[]\n      }\n    }\n    ```\n  - **Usage Examples**:\n    1. \"Configuration validation: Verify resource settings before creation.\"\n    2. \"Update verification: Validate changes before applying updates.\"\n    3. \"Compliance check: Ensure resources meet required standards.\"\n\n- **searchResources**\n  - **Description**: Searches for publishers or private applications based on specified criteria.\n  - **Required Parameters**:\n    ```typescript\n    {\n      resourceType: 'publishers' | 'private_apps',\n      query: string\n    }\n    ```\n  - **Response Schema**: Resource-specific response format\n  - **Usage Examples**:\n    1. \"Resource search: Find resources matching specific criteria.\"\n    2. \"Publisher lookup: Search for publishers by name or attributes.\"\n    3. \"Application discovery: Find private apps matching search terms.\"\n\n",
    "publisher": {
      "id": "johnneerdael",
      "name": "johnneerdael",
      "url": "https://github.com/johnneerdael/netskope-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/johnneerdael/netskope-mcp",
    "distribution": {
      "type": "npm",
      "package": "@johnneerdael/netskope-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@johnneerdael/netskope-mcp"
      ],
      "env": {
        "NETSKOPE_BASE_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "NETSKOPE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "210e5aec-c61f-44f3-b70c-60385e48da57",
    "name": "kazuph/mcp-github-pera1",
    "description": "GitHub MCP Server for Pera1",
    "fullDescription": "# GitHub MCP Server for Pera1\n\nA Model Context Protocol server that connects GitHub code to Claude.ai. This server utilizes the Pera1 service to extract code from GitHub repositories and provide better context to Claude.\n\n### Setup\n\nAdd the following to your MCP config file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-github-pera1\"]\n    }\n  }\n}\n```\n\nNow you can ask Claude about GitHub code repositories.\n\n### Parameters\n\n- `url`: GitHub repository URL (required)\n\n### Usage Example\n\nYou can ask Claude questions like:\n```\nTell me about the implementation of GitHub repository https://github.com/username/repository\n```\n\n### License\n\nMIT\n\n### Author\n\nkazuph (https://x.com/kazuph)\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-github-pera1"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-github-pera1",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-github-pera1"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-github-pera1"
      ],
      "env": {}
    }
  },
  {
    "id": "e9b17cc1-aa60-4b89-b9b7-c72248ae8417",
    "name": "QuantGeekDev/mongo-mcp",
    "description": "🗄️ MongoDB MCP Server for LLMS",
    "fullDescription": "# 🗄️ MongoDB MCP Server for LLMS\n\nA Model Context Protocol (MCP) server that enables LLMs to interact directly with MongoDB databases. Query collections, inspect schemas, and manage data seamlessly through natural language.\n\n## ✨ Features\n\n- 🔍 Collection schema inspection\n- 📊 Document querying and filtering\n- 📈 Index management\n- 📝 Document operations (insert, update, delete)\n\n## Demo Video\n\n\nhttps://github.com/user-attachments/assets/2389bf23-a10d-49f9-bca9-2b39a1ebe654\n\n\n\n\n## 🚀 Quick Start\n\nTo get started, find your mongodb connection url and add this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mongo-mcp\",\n        \"mongodb://<username>:<password>@<host>:<port>/<database>?authSource=admin\"\n      ]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install MongoDB MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mongo-mcp):\n\n```bash\nnpx -y @smithery/cli install mongo-mcp --client claude\n```\n\n### Prerequisites\n\n- Node.js 18+\n- npx\n- Docker and Docker Compose (for local sandbox testing only)\n- MCP Client (Claude Desktop App for example)\n\n### Test Sandbox Setup\n\nIf you don't have a mongo db server to connect to and want to create a sample sandbox, follow these steps\n\n1. Start MongoDB using Docker Compose:\n\n```bash\ndocker-compose up -d\n```\n\n2. Seed the database with test data:\n\n```bash\nnpm run seed\n```\n\n### Configure Claude Desktop\n\nAdd this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n#### Local Development Mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"dist/index.js\",\n        \"mongodb://root:example@localhost:27017/test?authSource=admin\"\n      ]\n    }\n  }\n}\n```\n\n### Test Sandbox Data Structure\n\nThe seed script creates three collections with sample data:\n\n#### Users\n\n- Personal info (name, email, age)\n- Nested address with coordinates\n- Arrays of interests\n- Membership dates\n\n#### Products\n\n- Product details (name, SKU, category)\n- Nested specifications\n- Price and inventory info\n- Tags and ratings\n\n#### Orders\n\n- Order details with items\n- User references\n- Shipping and payment info\n- Status tracking\n\n## 🎯 Example Prompts\n\nTry these prompts with Claude to explore the functionality:\n\n### Basic Operations\n\n```plaintext\n\"What collections are available in the database?\"\n\"Show me the schema for the users collection\"\n\"Find all users in San Francisco\"\n```\n\n### Advanced Queries\n\n```plaintext\n\"Find all electronics products that are in stock and cost less than $1000\"\n\"Show me all orders from the user john@example.com\"\n\"List the products with ratings above 4.5\"\n```\n\n### Index Management\n\n```plaintext\n\"What indexes exist on the users collection?\"\n\"Create an index on the products collection for the 'category' field\"\n\"List all indexes across all collections\"\n```\n\n### Document Operations\n\n```plaintext\n\"Insert a new product with name 'Gaming Laptop' in the products collection\"\n\"Update the status of order with ID X to 'shipped'\"\n\"Find and delete all products that are out of stock\"\n```\n\n## 📝 Available Tools\n\nThe server provides these tools for database interaction:\n\n### Query Tools\n\n- `find`: Query documents with filtering and projection\n- `listCollections`: List available collections\n- `insertOne`: Insert a single document\n- `updateOne`: Update a single document\n- `deleteOne`: Delete a single document\n\n### Index Tools\n\n- `createIndex`: Create a new index\n- `dropIndex`: Remove an index\n- `indexes`: List indexes for a collection\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "QuantGeekDev",
      "name": "QuantGeekDev",
      "url": "https://github.com/QuantGeekDev/mongo-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/QuantGeekDev/mongo-mcp",
    "distribution": {
      "type": "npm",
      "package": "mongo-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mongo-mcp",
        "$ENVARG_MONGODB_CONNECTION_URL"
      ],
      "env": {
        "ENVARG_MONGODB_CONNECTION_URL": {
          "description": "MongoDB connection string including authentication credentials and database name",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "a84b4dec-fae1-448e-94b2-addd54f94139",
    "name": "crazyrabbitLTC/mcp-twitter-server",
    "description": "Twitter MCP Server",
    "fullDescription": "# Twitter MCP Server\n\nA Model Context Protocol server implementation for Twitter API integration.\n\n## Setup\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Copy `.env.example` to `.env` and fill in your Twitter API credentials\n4. Build the project: `npm run build`\n5. Start the server: `npm start`\n\n## Environment Variables\n\nRequired Twitter API credentials in `.env`:\n\n```env\nX_API_KEY=your_api_key\nX_API_SECRET=your_api_secret\nX_ACCESS_TOKEN=your_access_token\nX_ACCESS_TOKEN_SECRET=your_access_token_secret\n```\n\n## Available Tools\n\n### Tweet Operations\n\n- `postTweet`: Post a new tweet\n  ```json\n  {\n    \"text\": \"Your tweet text here\"\n  }\n  ```\n\n- `postTweetWithMedia`: Post a tweet with media attachment\n  ```json\n  {\n    \"text\": \"Your tweet text\",\n    \"mediaPath\": \"path/to/media/file\",\n    \"mediaType\": \"image/jpeg|image/png|image/gif|video/mp4\",\n    \"altText\": \"Optional alt text for accessibility\"\n  }\n  ```\n\n- `getTweetById`: Get a specific tweet by ID\n  ```json\n  {\n    \"tweetId\": \"tweet_id\",\n    \"tweetFields\": [\"created_at\", \"public_metrics\"]\n  }\n  ```\n\n- `replyToTweet`: Reply to an existing tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\",\n    \"text\": \"Your reply text\"\n  }\n  ```\n\n- `deleteTweet`: Delete a tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\"\n  }\n  ```\n\n### Search & Analytics\n\n- `searchTweets`: Search for tweets\n  ```json\n  {\n    \"query\": \"search query\",\n    \"maxResults\": 10,\n    \"tweetFields\": [\"created_at\", \"public_metrics\"]\n  }\n  ```\n\n- `getHashtagAnalytics`: Get analytics for a hashtag\n  ```json\n  {\n    \"hashtag\": \"hashtag\",\n    \"startTime\": \"ISO-8601 date\",\n    \"endTime\": \"ISO-8601 date\"\n  }\n  ```\n\n### User Operations\n\n- `getUserInfo`: Get user information\n  ```json\n  {\n    \"username\": \"twitter_username\",\n    \"fields\": [\"description\", \"public_metrics\"]\n  }\n  ```\n\n- `getUserTimeline`: Get user's tweets\n  ```json\n  {\n    \"username\": \"twitter_username\",\n    \"maxResults\": 10,\n    \"tweetFields\": [\"created_at\", \"public_metrics\"]\n  }\n  ```\n\n- `getFollowers`: Get user's followers\n  ```json\n  {\n    \"username\": \"twitter_username\",\n    \"maxResults\": 100,\n    \"userFields\": [\"description\", \"public_metrics\"]\n  }\n  ```\n\n- `getFollowing`: Get accounts a user follows\n  ```json\n  {\n    \"username\": \"twitter_username\",\n    \"maxResults\": 100,\n    \"userFields\": [\"description\", \"public_metrics\"]\n  }\n  ```\n\n### Engagement\n\n- `likeTweet`: Like a tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\"\n  }\n  ```\n\n- `unlikeTweet`: Unlike a tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\"\n  }\n  ```\n\n- `retweet`: Retweet a tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\"\n  }\n  ```\n\n- `undoRetweet`: Undo a retweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\"\n  }\n  ```\n\n- `getRetweets`: Get users who retweeted a tweet\n  ```json\n  {\n    \"tweetId\": \"tweet_id\",\n    \"maxResults\": 100,\n    \"userFields\": [\"description\", \"public_metrics\"]\n  }\n  ```\n\n- `getLikedTweets`: Get tweets liked by a user\n  ```json\n  {\n    \"userId\": \"user_id\",\n    \"maxResults\": 100,\n    \"tweetFields\": [\"created_at\", \"public_metrics\"]\n  }\n  ```\n\n### List Management\n\n- `createList`: Create a new list\n  ```json\n  {\n    \"name\": \"List name\",\n    \"description\": \"List description\",\n    \"isPrivate\": false\n  }\n  ```\n\n- `addUserToList`: Add a user to a list\n  ```json\n  {\n    \"listId\": \"list_id\",\n    \"username\": \"twitter_username\"\n  }\n  ```\n\n- `removeUserFromList`: Remove a user from a list\n  ```json\n  {\n    \"listId\": \"list_id\",\n    \"username\": \"twitter_username\"\n  }\n  ```\n\n- `getListMembers`: Get members of a list\n  ```json\n  {\n    \"listId\": \"list_id\",\n    \"maxResults\": 100,\n    \"userFields\": [\"description\", \"public_metrics\"]\n  }\n  ```\n\n## Error Handling\n\nAll tools return standardized error responses:\n- Missing parameters: `Missing required parameter: parameter_name`\n- API errors: Error message from Twitter API\n- Not found errors: Appropriate \"not found\" message for the resource\n\n## Response Format\n\nAll successful responses follow this format:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Operation result message\"\n    }\n  ]\n}\n```\n\n## Development\n\n- Build: `npm run build`\n- Start: `npm start`\n- Watch mode: `npm run dev`\n```\nHere's a comprehensive status report of all Twitter tools:\n\n## Working Tools (✓)\n\n1. postTweet\n```\nStatus: Working perfectly\nResponse: Returns tweet ID\nLatest test: Success\n```\n\n2. getTweetById\n```\nStatus: Working perfectly\nResponse: Returns complete tweet data\nLatest test: Success\n```\n\n3. likeTweet & unlikeTweet\n```\nStatus: Working perfectly\nResponse: Confirmation of action\nLatest test: Success\n```\n\n4. retweet & undoRetweet\n```\nStatus: Working perfectly\nResponse: Confirmation of action\nLatest test: Success\n```\n\n5. replyToTweet\n```\nStatus: Working perfectly\nResponse: Returns reply tweet ID\nLatest test: Success\n```\n\n6. getUserInfo\n```\nStatus: Working perfectly\nResponse: Complete user profile data\nLatest test: Success\n```\n\n7. followUser & unfollowUser\n```\nStatus: Working perfectly\nResponse: Confirmation of action\nLatest test: Success\n```\n\n8. createList\n```\nStatus: Working perfectly\nResponse: Confirmation of list creation\nLatest test: Success\n```\n\n9. getUserLists\n```\nStatus: Working perfectly\nResponse: Returns both owned and member lists\nLatest test: Success\n```\n\n## Tools with Issues (⚠️)\n\n1. getUserTimeline\n```\nStatus: Error 400\nError: Invalid Request parameters\nFix needed: Parameter validation\n```\n\n2. searchTweets\n```\nStatus: Error 400\nError: Invalid Request parameters\nFix needed: Query parameter formatting\n```\n\n3. getLikedTweets\n```\nStatus: Error 400\nError: Invalid Request parameters\nFix needed: Parameter validation\n```\n\n## Missing Tools (❌)\n- getHomeTimeline (not found in available tools)\n- getFollowers (not available)\n- getFollowing (not available)\n- getHashtagAnalytics (not available)\n\n## Priority Fixes Needed\n\n1. Parameter Validation:\n```typescript\n// Implement for getUserTimeline, searchTweets, getLikedTweets\ninterface TwitterParamValidator {\n  validateTimelineParams(params: any): boolean;\n  validateSearchParams(params: any): boolean;\n  validateLikedTweetsParams(params: any): boolean;\n}\n```\n\n2. Error Handling:\n```typescript\n// Enhance error handling for 400 errors\ninterface TwitterErrorHandler {\n  handle400Error(endpoint: string, params: any): void;\n  logErrorDetails(error: any): void;\n  suggestParameterFixes(params: any): string[];\n}\n```",
    "publisher": {
      "id": "crazyrabbitltc",
      "name": "crazyrabbitltc",
      "url": "https://github.com/crazyrabbitLTC/mcp-twitter-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/crazyrabbitLTC/mcp-twitter-server",
    "distribution": {
      "type": "npm",
      "package": "@crazyrabbitltc/mcp-twitter-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@crazyrabbitltc/mcp-twitter-server"
      ],
      "env": {
        "X_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "X_API_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "X_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "X_ACCESS_TOKEN_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "79e2c72c-4ff7-430c-bb03-2cb32ecf9f9b",
    "name": "kazuph/mcp-pocket",
    "description": "MCP Pocket",
    "fullDescription": "# MCP Pocket\n\nThis is a connector to allow Claude Desktop (or any MCP client) to fetch your saved articles from Pocket API.\n\n## Prerequisites\n- Node.js (install via `brew install node`)\n- Claude Desktop (install from https://claude.ai/desktop)\n- Pocket API credentials\n\n## Quick Start\n\n1. Modify your Claude Desktop config located here:\n`~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nYou can easily find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\nIf you don't have this config, you can create an empty file at this location.\n\nAdd the following to the config file, replacing the credentials with your own:\n\n```json\n{\n  \"mcpServers\": {\n    \"pocket\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-pocket\"],\n      \"env\": {\n        \"POCKET_CONSUMER_KEY\": \"your-pocket-consumer-key\",\n        \"POCKET_ACCESS_TOKEN\": \"your-pocket-access-token\"\n      }\n    }\n  }\n}\n```\n\n## Development Setup\n\n1. Clone this repository and install dependencies:\n```bash\ngit clone https://github.com/kazuph/mcp-pocket.git\ncd mcp-pocket\nnpm install\n```\n\n2. For development, use this configuration instead:\n```json\n{\n  \"mcpServers\": {\n    \"pocket\": {\n      \"command\": \"npx\",\n      \"args\": [\"tsx\", \"/path/to/mcp-pocket/index.ts\"],\n      \"env\": {\n        \"POCKET_CONSUMER_KEY\": \"your-pocket-consumer-key\",\n        \"POCKET_ACCESS_TOKEN\": \"your-pocket-access-token\"\n      }\n    }\n  }\n}\n```\n\n### Development Commands\n\n```bash\n# Build TypeScript\nnpm run build\n\n# Watch mode for development\nnpm run watch\n\n# Publish to npm\nnpm login\nnpm publish\n```\n\n## Available Commands\n\nThe following MCP tools will be available in Claude Desktop:\n\n- `pocket_get_articles`: Fetch your saved articles from Pocket API. Returns title, URL, and excerpt for each article.\n- `pocket_mark_as_read`: Mark a specific article as read (archived) in your Pocket account using its item ID.\n\n## Getting Pocket API Credentials\n\nFor detailed instructions on obtaining your Pocket API credentials, please refer to [Issue #2](https://github.com/kazuph/mcp-pocket/issues/2).\n\nQuick steps:\n1. Create a new app at [Pocket Developer Portal](https://getpocket.com/developer/apps/new)\n2. Follow the authentication process to get your Consumer Key and Access Token\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-pocket"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-pocket",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-pocket"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-pocket"
      ],
      "env": {
        "POCKET_CONSUMER_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "POCKET_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ddbbefd2-13e5-4aa6-9351-9abaad21bc6a",
    "name": "sirmews/mcp-pinecone",
    "description": "Pinecone Model Context Protocol Server for Claude Desktop.",
    "fullDescription": "# Pinecone Model Context Protocol Server for Claude Desktop.\n\n\nRead and write to a Pinecone index.\n\n\n## Components\n\n```mermaid\nflowchart TB\n    subgraph Client[\"MCP Client (e.g., Claude Desktop)\"]\n        UI[User Interface]\n    end\n\n    subgraph MCPServer[\"MCP Server (pinecone-mcp)\"]\n        Server[Server Class]\n        \n        subgraph Handlers[\"Request Handlers\"]\n            ListRes[list_resources]\n            ReadRes[read_resource]\n            ListTools[list_tools]\n            CallTool[call_tool]\n            GetPrompt[get_prompt]\n            ListPrompts[list_prompts]\n        end\n        \n        subgraph Tools[\"Implemented Tools\"]\n            SemSearch[semantic-search]\n            ReadDoc[read-document]\n            ListDocs[list-documents]\n            PineconeStats[pinecone-stats]\n            ProcessDoc[process-document]\n        end\n    end\n\n    subgraph PineconeService[\"Pinecone Service\"]\n        PC[Pinecone Client]\n        subgraph PineconeFunctions[\"Pinecone Operations\"]\n            Search[search_records]\n            Upsert[upsert_records]\n            Fetch[fetch_records]\n            List[list_records]\n            Embed[generate_embeddings]\n        end\n        Index[(Pinecone Index)]\n    end\n\n    %% Connections\n    UI --> Server\n    Server --> Handlers\n    \n    ListTools --> Tools\n    CallTool --> Tools\n    \n    Tools --> PC\n    PC --> PineconeFunctions\n    PineconeFunctions --> Index\n    \n    %% Data flow for semantic search\n    SemSearch --> Search\n    Search --> Embed\n    Embed --> Index\n    \n    %% Data flow for document operations\n    UpsertDoc --> Upsert\n    ReadDoc --> Fetch\n    ListRes --> List\n\n    classDef primary fill:#2563eb,stroke:#1d4ed8,color:white\n    classDef secondary fill:#4b5563,stroke:#374151,color:white\n    classDef storage fill:#059669,stroke:#047857,color:white\n    \n    class Server,PC primary\n    class Tools,Handlers secondary\n    class Index storage\n```\n\n### Resources\n\nThe server implements the ability to read and write to a Pinecone index.\n\n### Tools\n\n- `semantic-search`: Search for records in the Pinecone index.\n- `read-document`: Read a document from the Pinecone index.\n- `list-documents`: List all documents in the Pinecone index.\n- `pinecone-stats`: Get stats about the Pinecone index, including the number of records, dimensions, and namespaces.\n- `process-document`: Process a document into chunks and upsert them into the Pinecone index. This performs the overall steps of chunking, embedding, and upserting.\n\nNote: embeddings are generated via Pinecone's inference API and chunking is done with a token-based chunker. Written by copying a lot from langchain and debugging with Claude.\n## Quickstart\n\n### Installing via Smithery\n\nTo install Pinecone MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-pinecone):\n\n```bash\nnpx -y @smithery/cli install mcp-pinecone --client claude\n```\n\n### Install the server\n\nRecommend using [uv](https://docs.astral.sh/uv/getting-started/installation/) to install the server locally for Claude.\n\n```\nuvx install mcp-pinecone\n```\nOR\n```\nuv pip install mcp-pinecone\n```\n\nAdd your config as described below.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nNote: You might need to use the direct path to `uv`. Use `which uv` to find the path.\n\n\n__Development/Unpublished Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"mcp-pinecone\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{project_dir}\",\n      \"run\",\n      \"mcp-pinecone\"\n    ]\n  }\n}\n```\n\n\n__Published Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"mcp-pinecone\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"--index-name\",\n      \"{your-index-name}\",\n      \"--api-key\",\n      \"{your-secret-api-key}\",\n      \"mcp-pinecone\"\n    ]\n  }\n}\n```\n\n#### Sign up to Pinecone\n\nYou can sign up for a Pinecone account [here](https://www.pinecone.io/).\n\n#### Get an API key\n\nCreate a new index in Pinecone, replacing `{your-index-name}` and get an API key from the Pinecone dashboard, replacing `{your-secret-api-key}` in the config.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {project_dir} run mcp-pinecone\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Source Code\n\nThe source code is available on [GitHub](https://github.com/sirmews/mcp-pinecone).\n\n## Contributing\n\nSend your ideas and feedback to me on [Bluesky](https://bsky.app/profile/perfectlycromulent.bsky.social) or by opening an issue.\n",
    "publisher": {
      "id": "sirmews",
      "name": "sirmews",
      "url": "https://github.com/sirmews/mcp-pinecone"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sirmews/mcp-pinecone",
    "distribution": {
      "type": "pip",
      "package": "mcp-pinecone"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-pinecone",
        "--index-name",
        "$ENVARG_INDEX_NAME",
        "--api-key",
        "$ENVARG_API_KEY"
      ],
      "env": {
        "ENVARG_INDEX_NAME": {
          "description": "The name of your Pinecone index",
          "type": "input",
          "required": true
        },
        "ENVARG_API_KEY": {
          "description": "Your Pinecone API key",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "71288768-2dd9-429c-b809-a3881f29779a",
    "name": "bigcodegen/mcp-neovim-server",
    "description": "Neovim MCP Server",
    "fullDescription": "# Neovim MCP Server\n\nA proof of concept integration between Claude Desktop and Neovim using Model Context Protocol (MCP) and the official neovim/node-client JavaScript library. This demo leverages Vim's native text editing commands and workflows, which Claude already understands, to create a lightweight code assistance layer.\n\n<a href=\"https://glama.ai/mcp/servers/s0fywdwp87\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/s0fywdwp87/badge\" alt=\"mcp-neovim-server MCP server\" /></a>\n\n## Features\n\n- Connects to your nvim instance if you expose `--listen /tmp/nvim` when starting nvim\n- Views your current buffer\n- Gets cursor location, mode, file name\n- Runs vim commands\n- Can make edits using insert or replacement\n\n## API\n\n### Resources\n\n- `nvim://session`: Current neovim text editor session\n\n### Tools\n- **vim_buffer**\n  - Current VIM text editor buffer with line numbers shown\n  - Input `filename` (string)\n  - Filename is ignored, returns a string of numbered lines with the current active buffer content\n- **vim_command**\n  - Send a command to VIM for navigation, spot editing, and line deletion.\n  - Input `command` (string)\n  - Runs a vim command first passed through `nvim.replaceTermcodes`. Multiple commands will work if separated by newlines.\n  - On error, `'nvim:errmsg'` contents are returned \n- **vim_status**\n  - Get the status of the VIM editor\n  - Status contains line, col, mode, filename, and visual selection\n- **vim_edit**\n  - Edit lines using insert or replace in the VIM editor.\n  - Input `startLine` (number), `mode` (`\"insert\"` | `\"replace\"`), `lines` (string)\n  - insert will insert lines at startLine. replace will replace lines starting at the startLine to the end of the buffer.\n\nUsing this simple set of tools, Claude can peer into your neovim session to answer questions as well as make edits to the buffer.\n\n## Limitations\n\n- This is a quick proof of concept to experiment with Model Context Protocol. Use at your own risk.\n- May not interact well with a custom neovim config!\n- It may or may not be properly handling the socket connections to neovim.\n- Error handling could be better.\n- Sometimes Claude doesn't get the vim command input just right or the way I am passing it along doesn't agree.\n- Reading the output from a vim command needs improvement.\n- Support for multiple buffers/windows.\n\n## Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"MCP Neovim Server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-neovim-server\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "bigcodegen",
      "name": "bigcodegen",
      "url": "https://github.com/bigcodegen/mcp-neovim-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/bigcodegen/mcp-neovim-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-neovim-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-neovim-server"
      ],
      "env": {}
    }
  },
  {
    "id": "3d79e984-1ea6-4bda-9546-5a4507666b7a",
    "name": "wopal-cn/mcp-hotnews-server",
    "description": "HotNews MCP Server",
    "fullDescription": "# HotNews MCP Server\n\nA Model Context Protocol (MCP) server that provides real-time hot trending topics from major Chinese social platforms and news sites.\n\n## Features\n\n- Real-time hot topics from 9 major Chinese platforms\n- MCP protocol compatible\n- Easy integration with AI models\n- Markdown formatted output with clickable links\n- Heat index support (where available)\n\n## Supported Platforms\n\n1. Zhihu Hot List (知乎热榜)\n2. 36Kr Hot List (36氪热榜)\n3. Baidu Hot Discussion (百度热点)\n4. Bilibili Hot List (B站热榜)\n5. Weibo Hot Search (微博热搜)\n6. Douyin Hot List (抖音热点)\n7. Hupu Hot List (虎扑热榜)\n8. Douban Hot List (豆瓣热榜)\n9. IT News (IT新闻)\n\n> API Source, This project uses the `api.vvhan.com` service for fetching hot topics data.\n\n## Available Tools\n- `get_hot_news`\n  - `sources` - Required arguments: Platform ID list\n- Example usage:\n  - `get_hot_news([3])` : Get Baidu Hot Discussion only\n  - `get_hot_news([1,3,7])` : Get hot lists from zhihuHot, Baidu, and huPu\n  - `get_hot_news([1,2,3,4])` : Get hot lists from zhihuHot, 36Kr, Baidu, and Bilibili`\n\n## Installation\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-hotnews\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wopal/mcp-server-hotnews\"\n      ]\n    }\n  }\n}\n```\n\n### Docker \n（ Docker image not uploaded to Docker Hub, need to build it yourself. ）\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-hotnews\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"wopal/mcp-server-hotnews\"\n      ]\n    }\n  }\n}\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Watch mode\nnpm run watch\n\n# Build\nnpm run build\n\n# Test URLs\nnpm run test:urls\n```\n\nDocker build:\n\n```bash\ndocker build -t wopal/mcp-server-hotnews:latest -f Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "wopal",
      "name": "wopal",
      "url": "https://github.com/wopal-cn/mcp-hotnews-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/wopal-cn/mcp-hotnews-server",
    "distribution": {
      "type": "npm",
      "package": "@wopal/mcp-server-hotnews"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@wopal/mcp-server-hotnews"
      ],
      "env": {}
    }
  },
  {
    "id": "ee77373a-a803-43be-b0e7-4be72d40564e",
    "name": "Braffolk/mcp-summarization-functions",
    "description": "Summarization Functions",
    "fullDescription": "# Summarization Functions\n\nIntelligent text summarization for the Model Context Protocol\n\n## Overview\n\nA powerful MCP server that provides intelligent summarization capabilities through a clean, extensible architecture. Built with modern TypeScript and designed for seamless integration with AI workflows.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Summarization Functions for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-summarization-functions):\n\n```bash\nnpx -y @smithery/cli install mcp-summarization-functions --client claude\n```\n\n```bash\nnpm i mcp-summarization-functions\n```\n\n## AI Agent Integration\n\nThis MCP server was primarily developed to enhance the performance and reliability of AI agents like Roo Cline and Cline. It addresses a critical challenge in AI agent operations: context window management.\n\n### Context Window Optimization\n\nAI agents frequently encounter situations where their context window gets rapidly filled with large outputs from:\n- Command execution results\n- File content readings\n- Directory listings\n- API responses\n- Error messages and stack traces\n\nThis server helps maintain efficient context usage by:\n1. Providing concise, relevant summaries instead of full content\n2. Storing full content for reference when needed\n3. Offering focused analysis based on specific needs (security, API surface, etc.)\n4. Supporting multiple output formats for optimal context utilization\n\n### Benefits for AI Agents\n\n- **Reduced Failure Rates**: By preventing context window overflow\n- **Improved Response Quality**: Through focused, relevant summaries\n- **Enhanced Efficiency**: By maintaining important context while reducing noise\n- **Better Resource Management**: Through intelligent content caching and retrieval\n- **Flexible Integration**: Supporting multiple AI providers and configuration options\n\n### Recommended AI Agent Prompt\n\nWhen integrating with AI agents, include the following in your agent's instructions:\n\n```\n# CONTEXT MANAGEMENT\n\nYou have access to summarization functions through the MCP server. These functions are NOT optional - you MUST use them for ALL potentially large outputs to prevent context overflow:\n\nMANDATORY SUMMARIZATION:\n- You MUST ALWAYS use summarization functions for:\n    - ANY first time file reading operations (unless you are CERTAIN its small and you are going to edit it)\n    - ALL command execution outputs\n    - EVERY directory analysis\n    - ANY API responses or error logs\n    - ANY output that could be large\n\nNEVER attempt to process raw output directly - ALWAYS use the appropriate summarization function:\n• For commands: summarize_command\n• For files: summarize_files\n• For directories: summarize_directory\n• For other text: summarize_text\n\nALWAYS utilize available features:\n• Specify hints for focused analysis\n• Choose appropriate output formats\n• Use content IDs to access full details only when absolutely necessary\n\nThere is NO NEED to process perfect or complete output. Summarized content is ALWAYS preferred over raw data. When in doubt, use summarization.\n```\n\n<b>Summarization in action on the Ollama repository (Gemini 2.0 Flash summarization, Claude 3.5 agent)</b>\n\n![alt text](in_action.png)\n\n\n## Features\n\n- **Command Output Summarization**  \n  Execute commands and get concise summaries of their output\n\n- **File Content Analysis**  \n  Summarize single or multiple files while maintaining technical accuracy\n\n- **Directory Structure Understanding**  \n  Get clear overviews of complex directory structures\n\n- **Flexible Model Support**\n  Use models from different providers\n\n- **AI Agent Context Optimization**\n  Prevent context window overflow and improve AI agent performance through intelligent summarization\n\n## Configuration\n\nThe server supports multiple AI providers through environment variables:\n\n### Required Environment Variables\n\n- `PROVIDER`: AI provider to use. Supported values:\n\t\t- `ANTHROPIC` - Claude models from Anthropic\n\t\t- `OPENAI` - GPT models from OpenAI\n\t\t- `OPENAI-COMPATIBLE` - OpenAI-compatible APIs (e.g. Azure)\n\t\t- `GOOGLE` - Gemini models from Google\n- `API_KEY`: API key for the selected provider\n\n### Optional Environment Variables\n\n- `MODEL_ID`: Specific model to use (defaults to provider's standard model)\n- `PROVIDER_BASE_URL`: Custom API endpoint for OpenAI-compatible providers\n- `MAX_TOKENS`: Maximum tokens for model responses (default: 1024)\n- `SUMMARIZATION_CHAR_THRESHOLD`: Character count threshold for when to summarize (default: 512)\n- `SUMMARIZATION_CACHE_MAX_AGE`: Cache duration in milliseconds (default: 3600000 - 1 hour)\n- `MCP_WORKING_DIR` - fallback directory for trying to find files with relative paths from\n\n### Example Configurations\n\n```bash\n# Anthropic Configuration\nPROVIDER=ANTHROPIC\nAPI_KEY=your-anthropic-key\nMODEL_ID=claude-3-5-sonnet-20241022\n\n# OpenAI Configuration\nPROVIDER=OPENAI\nAPI_KEY=your-openai-key\nMODEL_ID=gpt-4-turbo-preview\n\n# Azure OpenAI Configuration\nPROVIDER=OPENAI-COMPATIBLE\nAPI_KEY=your-azure-key\nPROVIDER_BASE_URL=https://your-resource.openai.azure.com\nMODEL_ID=your-deployment-name\n\n# Google Configuration\nPROVIDER=GOOGLE\nAPI_KEY=your-google-key\nMODEL_ID=gemini-2.0-flash-exp\n```\n\n## Usage\n\nAdd the server to your MCP configuration file:\n\n```json\n{\n\t\t\"mcpServers\": {\n\t\t\t\t\"MUST_USE_summarization\": {\n\t\t\t\t\t\t\"command\": \"node\",\n\t\t\t\t\t\t\"args\": [\"path/to/summarization-functions/build/index.js\"],\n\t\t\t\t\t\t\"env\": {\n\t\t\t\t\t\t\t\t\"PROVIDER\": \"ANTHROPIC\",\n\t\t\t\t\t\t\t\t\"API_KEY\": \"your-api-key\",\n\t\t\t\t\t\t\t\t\"MODEL_ID\": \"claude-3-5-sonnet-20241022\",\n                \"MCP_WORKING_DIR\": \"default_working_directory\"\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n}\n```\n\n### Available Functions\n\nThe server provides the following summarization tools:\n\n#### `summarize_command`\nExecute and summarize command output.\n```typescript\n{\n  // Required\n  command: string,    // Command to execute\n  cwd: string,       // Working directory for command execution\n  \n  // Optional\n  hint?: string,      // Focus area: \"security_analysis\" | \"api_surface\" | \"error_handling\" | \"dependencies\" | \"type_definitions\"\n  output_format?: string  // Format: \"text\" | \"json\" | \"markdown\" | \"outline\" (default: \"text\")\n}\n```\n\n#### `summarize_files`\nSummarize file contents.\n```typescript\n{\n  // Required\n  paths: string[],    // Array of file paths to summarize (relative to cwd)\n  cwd: string,       // Working directory for resolving file paths\n  \n  // Optional\n  hint?: string,      // Focus area: \"security_analysis\" | \"api_surface\" | \"error_handling\" | \"dependencies\" | \"type_definitions\"\n  output_format?: string  // Format: \"text\" | \"json\" | \"markdown\" | \"outline\" (default: \"text\")\n}\n```\n\n#### `summarize_directory`\nGet directory structure overview.\n```typescript\n{\n  // Required\n  path: string,       // Directory path to summarize (relative to cwd)\n  cwd: string,       // Working directory for resolving directory path\n  \n  // Optional\n  recursive?: boolean,  // Whether to include subdirectories. Safe for deep directories\n  hint?: string,       // Focus area: \"security_analysis\" | \"api_surface\" | \"error_handling\" | \"dependencies\" | \"type_definitions\"\n  output_format?: string   // Format: \"text\" | \"json\" | \"markdown\" | \"outline\" (default: \"text\")\n}\n```\n\n#### `summarize_text`\nSummarize arbitrary text content.\n```typescript\n{\n  // Required\n  content: string,    // Text content to summarize\n  type: string,       // Type of content (e.g., \"log output\", \"API response\")\n  \n  // Optional\n  hint?: string,      // Focus area: \"security_analysis\" | \"api_surface\" | \"error_handling\" | \"dependencies\" | \"type_definitions\"\n  output_format?: string  // Format: \"text\" | \"json\" | \"markdown\" | \"outline\" (default: \"text\")\n}\n```\n\n#### `get_full_content`\nRetrieve the full content for a given summary ID.\n```typescript\n{\n  // Required\n  id: string         // ID of the stored content\n}\n```\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "Braffolk",
      "name": "Braffolk",
      "url": "https://github.com/Braffolk/mcp-summarization-functions"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Braffolk/mcp-summarization-functions",
    "distribution": {
      "type": "npm",
      "package": "mcp-summarization-functions"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-summarization-functions"
      ],
      "env": {
        "PROVIDER": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MODEL_ID": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "PROVIDER_BASE_URL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "MAX_TOKENS": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "SUMMARIZATION_CHAR_THRESHOLD": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "SUMMARIZATION_CACHE_MAX_AGE": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "MCP_WORKING_DIR": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "3ee73ecc-6890-4f67-bf82-d92503515f6a",
    "name": "filesystem",
    "description": "Filesystem MCP Server",
    "fullDescription": "# Filesystem MCP Server\n\nNode.js server implementing Model Context Protocol (MCP) for filesystem operations.\n\n## Features\n\n- Read/write files\n- Create/list/delete directories\n- Move files/directories\n- Search files\n- Get file metadata\n\n**Note**: The server will only allow operations within directories specified via `args`.\n\n## API\n\n### Resources\n\n- `file://system`: File system operations interface\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file\n  - Input: `path` (string)\n  - Reads complete file contents with UTF-8 encoding\n\n- **read_multiple_files**\n  - Read multiple files simultaneously\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **write_file**\n  - Create new file or overwrite existing (exercise caution with this)\n  - Inputs:\n    - `path` (string): File location\n    - `content` (string): File content\n\n- **edit_file**\n  - Make selective edits using advanced pattern matching and formatting\n  - Features:\n    - Line-based and multi-line content matching\n    - Whitespace normalization with indentation preservation\n    - Fuzzy matching with confidence scoring\n    - Multiple simultaneous edits with correct positioning\n    - Indentation style detection and preservation\n    - Git-style diff output with context\n    - Preview changes with dry run mode\n    - Failed match debugging with confidence scores\n  - Inputs:\n    - `path` (string): File to edit\n    - `edits` (array): List of edit operations\n      - `oldText` (string): Text to search for (can be substring)\n      - `newText` (string): Text to replace with\n    - `dryRun` (boolean): Preview changes without applying (default: false)\n    - `options` (object): Optional formatting settings\n      - `preserveIndentation` (boolean): Keep existing indentation (default: true)\n      - `normalizeWhitespace` (boolean): Normalize spaces while preserving structure (default: true)\n      - `partialMatch` (boolean): Enable fuzzy matching (default: true)\n  - Returns detailed diff and match information for dry runs, otherwise applies changes\n  - Best Practice: Always use dryRun first to preview changes before applying them\n\n- **create_directory**\n  - Create new directory or ensure it exists\n  - Input: `path` (string)\n  - Creates parent directories if needed\n  - Succeeds silently if directory exists\n\n- **list_directory**\n  - List directory contents with [FILE] or [DIR] prefixes\n  - Input: `path` (string)\n\n- **move_file**\n  - Move or rename files and directories\n  - Inputs:\n    - `source` (string)\n    - `destination` (string)\n  - Fails if destination exists\n\n- **search_files**\n  - Recursively search for files/directories\n  - Inputs:\n    - `path` (string): Starting directory\n    - `pattern` (string): Search pattern\n    - `excludePatterns` (string[]): Exclude any patterns. Glob formats are supported.\n  - Case-insensitive matching\n  - Returns full paths to matches\n\n- **get_file_info**\n  - Get detailed file/directory metadata\n  - Input: `path` (string)\n  - Returns:\n    - Size\n    - Creation time\n    - Modified time\n    - Access time\n    - Type (file/directory)\n    - Permissions\n\n- **list_allowed_directories**\n  - List all directories the server is allowed to access\n  - No input required\n  - Returns:\n    - Directories that this server can read/write from\n\n## Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n\nNote: you can provide sandboxed directories to the server by mounting them to `/projects`. Adding the `ro` flag will make the directory readonly by the server.\n\n### Docker\nNote: all directories must be mounted to `/projects` by default.\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/filesystem -f src/filesystem/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-filesystem"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "$ENVARG_ALLOWED_DIRECTORIES"
      ],
      "env": {
        "ENVARG_ALLOWED_DIRECTORIES": {
          "description": "List of directories allowed to be accessed by this mcp server, one path per line.",
          "type": "array",
          "required": true
        }
      }
    }
  },
  {
    "id": "ca980230-1912-4647-b376-fec364b6b1ce",
    "name": "sequential-thinking",
    "description": "Sequential Thinking MCP Server",
    "fullDescription": "# Sequential Thinking MCP Server\n\nAn MCP server implementation that provides a tool for dynamic and reflective problem-solving through a structured thinking process.\n\n## Features\n\n- Break down complex problems into manageable steps\n- Revise and refine thoughts as understanding deepens\n- Branch into alternative paths of reasoning\n- Adjust the total number of thoughts dynamically\n- Generate and verify solution hypotheses\n\n## Tool\n\n### sequential_thinking\n\nFacilitates a detailed, step-by-step thinking process for problem-solving and analysis.\n\n**Inputs:**\n- `thought` (string): The current thinking step\n- `nextThoughtNeeded` (boolean): Whether another thought step is needed\n- `thoughtNumber` (integer): Current thought number\n- `totalThoughts` (integer): Estimated total thoughts needed\n- `isRevision` (boolean, optional): Whether this revises previous thinking\n- `revisesThought` (integer, optional): Which thought is being reconsidered\n- `branchFromThought` (integer, optional): Branching point thought number\n- `branchId` (string, optional): Branch identifier\n- `needsMoreThoughts` (boolean, optional): If more thoughts are needed\n\n## Usage\n\nThe Sequential Thinking tool is designed for:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-sequential-thinking\"\n      ]\n    }\n  }\n}\n```\n\n#### docker\n\n```json\n{\n  \"mcpServers\": {\n    \"sequentialthinking\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"mcp/sequentialthinking\"\n      ]\n    }\n  }\n}\n```\n\n## Building\n\nDocker:\n\n```bash\ndocker build -t mcp/sequentialthinking -f src/sequentialthinking/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-sequential-thinking"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "env": {}
    }
  },
  {
    "id": "2557d644-69c1-4f4f-b5aa-1dfc8fec3c18",
    "name": "JoshuaRileyDev/mac-apps-launcher",
    "description": "Mac Apps Launcher MCP Server",
    "fullDescription": "# Mac Apps Launcher MCP Server\n\nA Model Context Protocol (MCP) server for launching and managing macOS applications.\n\n## Features\n\n- List all applications installed in the `/Applications` folder\n- Launch applications by name\n- Open files with specific applications\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/mac-apps-launcher-mcp-server\"\n      ]\n    }\n  }\n}\n```",
    "publisher": {
      "id": "joshuarileydev",
      "name": "joshuarileydev",
      "url": "https://github.com/JoshuaRileyDev/mac-apps-launcher"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
    "distribution": {
      "type": "npm",
      "package": "@joshuarileydev/mac-apps-launcher-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@joshuarileydev/mac-apps-launcher-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "d08c6ff0-cec8-412b-87f9-89d739f61188",
    "name": "domdomegg/airtable-mcp-server",
    "description": "airtable-mcp-server",
    "fullDescription": "# airtable-mcp-server\n\nA Model Context Protocol server that provides read and write access to Airtable databases. This server enables LLMs to inspect database schemas, then read and write records.\n\nhttps://github.com/user-attachments/assets/c8285e76-d0ed-4018-94c7-20535db6c944\n\n## Usage\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"airtable\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"airtable-mcp-server\"\n      ],\n      \"env\": {\n        \"AIRTABLE_API_KEY\": \"pat123.abc123\"\n      }\n    }\n  }\n}\n```\n\nReplace `pat123.abc123` with your [Airtable personal access token](https://airtable.com/create/tokens). Your token should have at least `schema.bases:read` and `data.records:read`, and optionally the corresponding write permissions.\n\n## Components\n\n### Tools\n\n- **list_records**\n  - Lists records from a specified Airtable table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to query\n    - `maxRecords` (number, optional): Maximum number of records to return. Defaults to 100.\n    - `filterByFormula` (string, optional): Airtable formula to filter records\n\n- **search_records**\n  - Search for records containing specific text\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to query\n    - `searchTerm` (string, required): Text to search for in records\n    - `fieldIds` (array, optional): Specific field IDs to search in. If not provided, searches all text-based fields.\n    - `maxRecords` (number, optional): Maximum number of records to return. Defaults to 100.\n\n- **list_bases**\n  - Lists all accessible Airtable bases\n  - No input parameters required\n  - Returns base ID, name, and permission level\n\n- **list_tables**\n  - Lists all tables in a specific base\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `detailLevel` (string, optional): The amount of detail to get about the tables (`tableIdentifiersOnly`, `identifiersOnly`, or `full`)\n  - Returns table ID, name, description, fields, and views (to the given `detailLevel`)\n\n- **describe_table**\n  - Gets detailed information about a specific table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to describe\n    - `detailLevel` (string, optional): The amount of detail to get about the table (`tableIdentifiersOnly`, `identifiersOnly`, or `full`)\n  - Returns the same format as list_tables but for a single table\n  - Useful for getting details about a specific table without fetching information about all tables in the base\n\n- **get_record**\n  - Gets a specific record by ID\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `recordId` (string, required): The ID of the record to retrieve\n\n- **create_record**\n  - Creates a new record in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `fields` (object, required): The fields and values for the new record\n\n- **update_records**\n  - Updates one or more records in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `records` (array, required): Array of objects containing record ID and fields to update\n\n- **delete_records**\n  - Deletes one or more records from a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `recordIds` (array, required): Array of record IDs to delete\n\n- **create_table**\n  - Creates a new table in a base\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `name` (string, required): Name of the new table\n    - `description` (string, optional): Description of the table\n    - `fields` (array, required): Array of field definitions (name, type, description, options)\n\n- **update_table**\n  - Updates a table's name or description\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `name` (string, optional): New name for the table\n    - `description` (string, optional): New description for the table\n\n- **create_field**\n  - Creates a new field in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `name` (string, required): Name of the new field\n    - `type` (string, required): Type of the field\n    - `description` (string, optional): Description of the field\n    - `options` (object, optional): Field-specific options\n\n- **update_field**\n  - Updates a field's name or description\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `fieldId` (string, required): The ID of the field\n    - `name` (string, optional): New name for the field\n    - `description` (string, optional): New description for the field\n\n### Resources\n\nThe server provides schema information for Airtable bases and tables:\n\n- **Table Schemas** (`airtable://<baseId>/<tableId>/schema`)\n  - JSON schema information for each table\n  - Includes:\n    - Base id and table id\n    - Table name and description\n    - Primary field ID\n    - Field definitions (ID, name, type, description, options)\n    - View definitions (ID, name, type)\n  - Automatically discovered from Airtable's metadata API\n\n## Contributing\n\nPull requests are welcomed on GitHub! To get started:\n\n1. Install Git and Node.js\n2. Clone the repository\n3. Install dependencies with `npm install`\n4. Run `npm run test` to run tests\n5. Build with `npm run build`\n  - You can use `npm run build:watch` to automatically build after editing [`src/index.ts`](./src/index.ts). This means you can hit save, reload Claude Desktop (with Ctrl/Cmd+R), and the changes apply.\n\n## Releases\n\nVersions follow the [semantic versioning spec](https://semver.org/).\n\nTo release:\n\n1. Use `npm version <major | minor | patch>` to bump the version\n2. Run `git push --follow-tags` to push with tags\n3. Wait for GitHub Actions to publish to the NPM registry.\n",
    "publisher": {
      "id": "domdomegg",
      "name": "domdomegg",
      "url": "https://github.com/domdomegg/airtable-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/domdomegg/airtable-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "airtable-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "airtable-mcp-server"
      ],
      "env": {
        "AIRTABLE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "66ed7b5f-3d08-4713-902a-996bd6841ab2",
    "name": "ivo-toby/contentful-mcp",
    "description": "Contentful MCP Server",
    "fullDescription": "# Contentful MCP Server\n\nAn MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities.\n\n- Please note \\*; if you are not interested in the code, and just want to use this MCP in\n  Claude Desktop (or any other tool that is able to use MCP servers) you don't have to\n  clone this repo, you can just set it up in Claude desktop, refer to the section\n  \"Usage with Claude Desktop\" for instructions on how to install it.\n\n## Features\n\n- **Content Management**: Full CRUD operations for entries and assets\n- **Space Management**: Create, update, and manage spaces and environments\n- **Content Types**: Manage content type definitions\n- **Localization**: Support for multiple locales\n- **Publishing**: Control content publishing workflow\n- **Smart Pagination**: List operations return maximum 3 items per request to prevent context window overflow, with built-in pagination support\n\n## Pagination\n\nTo prevent context window overflow in LLMs, list operations (like search_entries and list_assets) are limited to 3 items per request. Each response includes:\n- Total number of available items\n- Current page of items (max 3)\n- Number of remaining items\n- Skip value for the next page\n- Message prompting the LLM to offer retrieving more items\n\nThis pagination system allows the LLM to efficiently handle large datasets while maintaining context window limits.\n\n## Tools\n\n### Entry Management\n\n- **search_entries**: Search for entries using query parameters\n- **create_entry**: Create new entries\n- **get_entry**: Retrieve existing entries\n- **update_entry**: Update entry fields\n- **delete_entry**: Remove entries\n- **publish_entry**: Publish entries\n- **unpublish_entry**: Unpublish entries\n\n### Asset Management\n\n- **list_assets**: List assets with pagination (3 items per page)\n- **upload_asset**: Upload new assets with metadata\n- **get_asset**: Retrieve asset details and information\n- **update_asset**: Update asset metadata and files\n- **delete_asset**: Remove assets from space\n- **publish_asset**: Publish assets to delivery API\n- **unpublish_asset**: Unpublish assets from delivery API\n\n### Space & Environment Management\n\n- **list_spaces**: List available spaces\n- **get_space**: Get space details\n- **list_environments**: List environments in a space\n- **create_environment**: Create new environment\n- **delete_environment**: Remove environment\n\n### Content Type Management\n\n- **list_content_types**: List available content types\n- **get_content_type**: Get content type details\n- **create_content_type**: Create new content type\n- **update_content_type**: Update content type\n- **delete_content_type**: Remove content type\n- **publish_content_type**: Publish a content type\n\n## Development Tools\n\n### MCP Inspector\n\nThe project includes an MCP Inspector tool that helps with development and debugging:\n\n- **Inspect Mode**: Run `npm run inspect` to start the inspector, you can open the inspector by going to http://localhost:5173\n- **Watch Mode**: Use `npm run inspect:watch` to automatically restart the inspector when files change\n- **Visual Interface**: The inspector provides a web interface to test and debug MCP tools\n- **Real-time Testing**: Try out tools and see their responses immediately\n\nThe project also contains a `npm run dev` command which rebuilds and reloads the MCP server on every change.\n\n## Configuration\n\n### Prerequisites\n\n1. Create a Contentful account at [Contentful](https://www.contentful.com/)\n2. Generate a Content Management API token from your account settings\n\n### Environment Variables\n\nThese variables can also be set as arguments\n\n- `CONTENTFUL_HOST` / `--host`: Contentful Management API Endpoint (defaults to https://api.contentful.com)\n- `CONTENTFUL_MANAGEMENT_ACCESS_TOKEN` / `--management-token`: Your Content Management API token\n\n### Space and Environment Scoping (EXPERIMENTAL)\n\nYou can scope the spaceId and EnvironmentId to ensure the LLM will only do operations on the defined space/env ID's.\nThis is mainly to support agents that are to operate within specific spaces. If both `SPACE_ID` and `ENVIRONMENT_ID` env-vars are set\nthe tools will not report needing these values and the handlers will use the environment vars to do CMA operations.\nYou will also loose access to the tools in the space-handler, since these tools are across spaces.\nYou can also add the `SPACE_ID` and `ENVIRONMENT_ID` by using arguments `--space-id` and `--environment-id`\n\n#### Using App Identity\n\nInstead of providing a Management token you can also leverage [App Identity](https://www.contentful.com/developers/docs/extensibility/app-framework/app-identity/)\nfor handling authentication. You would have to setup and install a Contentful App and set the following parameters when calling the MCP-server:\n\n- `--app-id` = the app Id which is providing the Apptoken\n- `--private-key` = the private key you created in the user-interface with your app, tied to `app_id`\n- `--space-id` = the spaceId in which the app is installed\n- `--environment-id` = the environmentId (within the space) in which the app is installed.\n\nWith these values the MCP server will request a temporary AppToken to do content operation in the defined space/environment-id. This especially useful when using this MCP server in backend systems that act as MCP-client (like chat-agents)\n\n### Usage with Claude Desktop\n\nYou do not need to clone this repo to use this MCP, you can simply add it to\nyour `claude_desktop_config.json`:\n\nAdd or edit `~/Library/Application Support/Claude/claude_desktop_config.json`\nand add the following lines:\n\n```json\n{\n  \"mcpServers\": {\n    \"contentful\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@ivotoby/contentful-management-mcp-server\"],\n      \"env\": {\n        \"CONTENTFUL_MANAGEMENT_ACCESS_TOKEN\": \"<Your CMA token>\"\n      }\n    }\n  }\n}\n```\n\nIf your MCPClient does not support setting environment variables you can also set the management token using an argument like this:\n\n```\n{\n  \"mcpServers\": {\n    \"contentful\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@ivotoby/contentful-management-mcp-server\",'--management-token', \"<your token>\", '--host', 'http://api.contentful.com'],\n    }\n  }\n}\n\n```\n\n### Installing via Smithery\n\nTo install Contentful Management Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ivotoby/contentful-management-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @ivotoby/contentful-management-mcp-server --client claude\n```\n\n### Developing and using Claude desktop\n\nIf you want to contribute and test what Claude does with your contributions;\n\n- run `npm run dev`, this will start the watcher that rebuilds the MCP server on every change\n- update `claude_desktop_config.json` to reference the project directly, ie;\n\n```\n{\n  \"mcpServers\": {\n    \"contentful\": {\n      \"command\": \"node\",\n      \"args\": [\"/Users/ivo/workspace/contentful-mcp/bin/mcp-server.js\"],\n      \"env\": {\n        \"CONTENTFUL_MANAGEMENT_ACCESS_TOKEN\": \"<Your CMA Token>\"\n      }\n    }\n  }\n}\n```\n\nThis will allow you to test any modification in the MCP server with Claude directly, however; if you add new tools/resources you will need to restart Claude Desktop\n\n## Error Handling\n\nThe server implements comprehensive error handling for:\n\n- Authentication failures\n- Rate limiting\n- Invalid requests\n- Network issues\n- API-specific errors\n\n## License\n\nMIT License\n\n## Fine print\n\nThis MCP Server enables Claude (or other agents that can consume MCP resources) to update, delete content, spaces and content-models. So be sure what you allow Claude to do with your Contentful spaces!\n",
    "publisher": {
      "id": "ivotoby",
      "name": "ivotoby",
      "url": "https://github.com/ivo-toby/contentful-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ivo-toby/contentful-mcp",
    "distribution": {
      "type": "npm",
      "package": "@ivotoby/contentful-management-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@ivotoby/contentful-management-mcp-server"
      ],
      "env": {
        "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "40e92be6-7e17-4fe9-8fd7-804a4f70e668",
    "name": "johnnyoshika/mcp-server-sqlite-npx",
    "description": "MCP SQLite Server",
    "fullDescription": "# MCP SQLite Server\n\nA Node.js implementation of the Model Context Protocol SQLite server, based on the [official Python reference](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite). This version provides an npx-based alternative for environments where Python's UVX runner is not available, such as [LibreChat](https://github.com/danny-avila/LibreChat/issues/4876#issuecomment-2561363955).\n\n## Use with Claude Desktop\n\n### Installing via Smithery\n\nTo install MCP SQLite Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-sqlite-npx):\n\n```bash\nnpx -y @smithery/cli install mcp-server-sqlite-npx --client claude\n```\n\n### Installing Manually\n\nAdd the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"/absolute/path/to/npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-sqlite-npx\",\n        \"/absolute/path/to/database.db\"\n      ],\n      \"env\": {\n        \"PATH\": \"/absolute/path/to/executables\",\n        \"NODE_PATH\": \"/absolute/path/to/node_modules\"\n      }\n    }\n  }\n}\n```\n\nHere's a full example when using nvm:\n\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"/Users/johnny/.nvm/versions/node/v22.12.0/bin/npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-sqlite-npx\",\n        \"/Users/johnny/projects/database.db\"\n      ],\n      \"env\": {\n        \"PATH\": \"/Users/johnny/.nvm/versions/node/v22.12.0/bin:/usr/local/bin:/usr/bin:/bin\",\n        \"NODE_PATH\": \"/Users/johnny/.nvm/versions/node/v22.12.0/lib/node_modules\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n1. Install dependencies:\n\n```bash\nnpm ci\n```\n\n2. Build the TypeScript code:\n\n```bash\nnpm run build\n```\n\n### Testing with MCP Inspector\n\nYou can test the server using the [MCP Inspector tool](https://modelcontextprotocol.io/docs/tools/inspector):\n\n```bash\nnpx @modelcontextprotocol/inspector node dist/index.js /absolute/path/to/database.db\n```\n\n`Connect` and go to `Tools` to start using the server.\n\n### Testing with Claude Desktop\n\nAdd the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"/absolute/path/to/node\",\n      \"args\": [\n        \"/absolute/path/to/dist/index.js\",\n        \"/absolute/path/to/database.db\"\n      ]\n    }\n  }\n}\n```\n\nExamples:\n\n- `/absolute/path/to/node`: `/Users/johnny/.nvm/versions/node/v20.18.1/bin/node`\n- `/absolute/path/to/index.js`: `/Users/johnny/projects/mcp-server-sqlite-npx/dist/index.js`\n- `/absolute/path/to/database.db`: `/Users/johnny/projects/database.db`\n\n### Publish\n\n- Bump version in package.json\n- `npm install`\n- Commit with message: `Release {version, e.g. 0.1.6}`\n",
    "publisher": {
      "id": "johnnyoshika",
      "name": "johnnyoshika",
      "url": "https://github.com/johnnyoshika/mcp-server-sqlite-npx"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/johnnyoshika/mcp-server-sqlite-npx",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-sqlite-npx"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-sqlite-npx",
        "$ENVARG_DATABASE_PATH"
      ],
      "env": {
        "ENVARG_DATABASE_PATH": {
          "description": "Path to the SQLite database file",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "0edbe796-81d2-4303-879d-55a09efe91c1",
    "name": "crazyrabbitLTC/mcp-etherscan-server",
    "description": "MCP Etherscan Server",
    "fullDescription": "# MCP Etherscan Server\n\nAn MCP (Model Context Protocol) server that provides Ethereum blockchain data tools via Etherscan's API. Features include checking ETH balances, viewing transaction history, tracking ERC20 transfers, fetching contract ABIs, monitoring gas prices, and resolving ENS names.\n\n## Features\n\n- **Balance Checking**: Get ETH balance for any Ethereum address\n- **Transaction History**: View recent transactions with detailed information\n- **Token Transfers**: Track ERC20 token transfers with token details\n- **Contract ABI**: Fetch smart contract ABIs for development\n- **Gas Prices**: Monitor current gas prices (Safe Low, Standard, Fast)\n- **ENS Resolution**: Resolve Ethereum addresses to ENS names\n\n## Prerequisites\n\n- Node.js >= 18\n- An Etherscan API key (get one at https://etherscan.io/apis)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone [your-repo-url]\ncd mcp-etherscan-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a `.env` file in the root directory:\n```bash\nETHERSCAN_API_KEY=your_api_key_here\n```\n\n4. Build the project:\n```bash\nnpm run build\n```\n\n## Running the Server\n\nStart the server:\n```bash\nnpm start\n```\n\nThe server will run on stdio, making it compatible with MCP clients like Claude Desktop.\n\n## How It Works\n\nThis server implements the Model Context Protocol (MCP) to provide tools for interacting with Ethereum blockchain data through Etherscan's API. Each tool is exposed as an MCP endpoint that can be called by compatible clients.\n\n### Available Tools\n\n1. `check-balance`\n   - Input: Ethereum address\n   - Output: ETH balance in both Wei and ETH\n\n2. `get-transactions`\n   - Input: Ethereum address, optional limit\n   - Output: Recent transactions with timestamps, values, and addresses\n\n3. `get-token-transfers`\n   - Input: Ethereum address, optional limit\n   - Output: Recent ERC20 token transfers with token details\n\n4. `get-contract-abi`\n   - Input: Contract address\n   - Output: Contract ABI in JSON format\n\n5. `get-gas-prices`\n   - Input: None\n   - Output: Current gas prices in Gwei\n\n6. `get-ens-name`\n   - Input: Ethereum address\n   - Output: Associated ENS name if available\n\n## Using with Claude Desktop\n\nTo add this server to Claude Desktop:\n\n1. Start the server using `npm start`\n\n2. In Claude Desktop:\n   - Go to Settings\n   - Navigate to the MCP Servers section\n   - Click \"Add Server\"\n   - Enter the following configuration:\n     ```json\n     {\n       \"name\": \"Etherscan Tools\",\n       \"transport\": \"stdio\",\n       \"command\": \"node /path/to/mcp-etherscan-server/build/index.js\"\n     }\n     ```\n   - Save the configuration\n\n3. The Etherscan tools will now be available in your Claude conversations\n\n### Example Usage in Claude\n\nYou can use commands like:\n```\nCheck the balance of 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\n```\nor\n```\nShow me recent transactions for vitalik.eth\n```\n\n## Development\n\nTo add new features or modify existing ones:\n\n1. The main server logic is in `src/server.ts`\n2. Etherscan API interactions are handled in `src/services/etherscanService.ts`\n3. Build after changes: `npm run build`\n\n## License\n\nMIT License - See LICENSE file for details ",
    "publisher": {
      "id": "crazyrabbitLTC",
      "name": "crazyrabbitLTC",
      "url": "https://github.com/crazyrabbitLTC/mcp-etherscan-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/crazyrabbitLTC/mcp-etherscan-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-etherscan-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-etherscan-server"
      ],
      "env": {
        "ETHERSCAN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ce41d340-f454-46e4-a8cd-bae74917afc3",
    "name": "ssut/Remote-MCP",
    "description": "Remote-MCP: Remote Model Context Protocol",
    "fullDescription": "# Remote-MCP: Remote Model Context Protocol\n\nA **type-safe, bidirectional and simple** solution for **remote MCP communication**, allowing remote access and centralized management of model contexts.\n\n![preview](https://github.com/user-attachments/assets/a16804b9-8378-493c-8ca8-f61839458cde)\n\n\n## Architecture\n\n```mermaid\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\ngraph TD\n    %% Modern, Bright Color Styling with white text\n    classDef client fill:#22c55e,stroke:#059669,stroke-width:2px,color:#ffffff\n    classDef gateway fill:#06b6d4,stroke:#0891b2,stroke-width:2px,color:#ffffff\n    classDef backend fill:#f97316,stroke:#ea580c,stroke-width:2px,color:#ffffff\n    classDef resource fill:#8b5cf6,stroke:#7c3aed,stroke-width:2px,color:#ffffff\n    classDef server fill:#06b6d4,stroke:#0891b2,stroke-width:2px,color:#ffffff\n\n    linkStyle default stroke:#64748b,stroke-width:1.5px,stroke-dasharray: 5 5\n\n    %% Current MCP Setup (Multiple Local Servers)\n    subgraph Current[\"Current Setup (Local)\"]\n        direction LR\n        subgraph ClientGroup[\"Client\"]\n            A[Client]:::client\n        end\n\n        subgraph Servers[\"Local MCP Servers\"]\n            direction TB\n            B1[\"Local MCP Server (DB)\"]:::server -->|\"DB Access\"| C1[DB]:::resource\n            B2[\"Local MCP Server (API 1)\"]:::server -->|\"API Access\"| C2[\"Web API 1\"]:::resource\n            B3[\"Local MCP Server (API 2)\"]:::server -->|\"API Access\"| C3[\"Web API 2\"]:::resource\n        end\n\n        A -->|\"MCP Protocol\"| B1\n        A -->|\"MCP Protocol\"| B2\n        A -->|\"MCP Protocol\"| B3\n    end\n\n    %% Vertical separator\n    Current --> Proposed\n\n    %% Proposed MCP Architecture (Decoupled)\n    subgraph Proposed[\"Proposed Architecture (Remote)\"]\n        direction LR\n        D[Client/Host]:::client -->|\"MCP Protocol\"| E[\"Local MCP Server (@remote-mcp/client)\"]:::server\n        E <-->|\"tRPC(HTTP)\"| F[\"Remote MCP Server (@remote-mcp/server)\"]:::backend\n\n        %% Separated Resources\n        F -->|\"DB Access\"| G1[DB]:::resource\n        F -->|\"API Access\"| G2[\"Web API 1\"]:::resource\n        F -->|\"API Access\"| G3[\"Web API 2\"]:::resource\n    end\n```\n\n## Why I Made This (Now)\n\nYes, I know that the official MCP roadmap includes remote MCP support in the first quarter of 2025. However, the need for remote access was *immediate* for me, and likely for many others. This library was created to bridge that gap, providing a way to connect to a remote MCP server from a local MCP client *right now*, without waiting for future official implementations.\n\nNote: I don't want this to be a sophisticated or overcomplicated thing. This way **just works right now**.\n\n## Getting Started\n\n> *Note: This project is currently under active development and is considered experimental. Expect breaking changes and potential issues.*\n\n## Client Usage\n\n### Use Publicly Published Package\n\nJust put the following code in your MCP client settings, in here I'm using Claude as an example:\n\n```json\n{\n  \"mcpServers\": {\n    \"remote-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@remote-mcp/client\"],\n      \"env\": {\n        \"REMOTE_MCP_URL\": \"http://localhost:9512\",\n        \"HTTP_HEADER__Authorization\": \"Bearer <token>\"\n      }\n    }\n  }\n}\n```\n\n### Code Your Own Local MCP Server\n\nInstall requirements:\n\n```sh\n$ npm install @remote-mcp/client @trpc/client@next zod\n```\n\nthen write your own code like the following:\n\n```ts\nimport { RemoteMCPClient } from \"@remote-mcp/client\";\n\nconst client = new RemoteMCPClient({\n  remoteUrl: \"http://localhost:9512\",\n\n  onError: (method, error) => console.error(`Error in ${method}:`, error)\n});\n\nvoid client.start();\n```\n\n## Server Usage (Remote MCP Implementation)\n\nYou can see some examples in the `examples` directory.\n\n- [Cloudflare Workers](examples/cloudflare-workers)\n- [Standalone Node.js](examples/simple-server)\n\n### Code Your Own Remote MCP Server\n\nAfter `npm install @remote-mcp/server`, you can your own remote MCP server like the following:\n\n```typescript\nimport { MCPRouter, LogLevel } from \"@remote-mcp/server\";\nimport { createHTTPServer } from '@trpc/server/adapters/standalone';\n\nimport { z } from \"zod\";\n\n// Create router instance\nconst mcpRouter = new MCPRouter({\n  logLevel: LogLevel.DEBUG,\n  name: \"example-server\",\n  version: \"1.0.0\",\n  capabilities: {\n    logging: {},\n  },\n});\n\n// Add example tool\nmcpRouter.addTool(\n  \"calculator\",\n  {\n    description:\n      \"Perform basic calculations. Add, subtract, multiply, divide. Invoke this every time you need to perform a calculation.\",\n    schema: z.object({\n      operation: z.enum([\"add\", \"subtract\", \"multiply\", \"divide\"]),\n      a: z.string(),\n      b: z.string(),\n    }),\n  },\n  async (args) => {\n    const a = Number(args.a);\n    const b = Number(args.b);\n\n    let result: number;\n    switch (args.operation) {\n      case \"add\":\n        result = Number(a) + b;\n        break;\n      case \"subtract\":\n        result = a - b;\n        break;\n      case \"multiply\":\n        result = a * b;\n        break;\n      case \"divide\":\n        if (b === 0) throw new Error(\"Division by zero\");\n        result = a / b;\n        break;\n    }\n\n    return {\n      content: [{ type: \"text\", text: `${result}` }],\n    };\n  },\n);\n\nconst appRouter = mcpRouter.createTRPCRouter();\n\nvoid createHTTPServer({\n  router: appRouter,\n  createContext: () => ({}),\n}).listen(Number(process.env.PORT || 9512));\n```\n\nThen you can see like the following in your MCP client:\n\n<img src=\"https://github.com/user-attachments/assets/86cf500e-b937-47fc-9ac1-db106ab7a6a3\" width=\"450\">\n\n## Packages\n\nThis repository contains:\n\n*   `@remote-mcp/client`: Client library acting as a local MCP server, connecting to a remote implementation.\n*   `@remote-mcp/server`: Server library for creating remotely accessible MCP services (used as the remote implementation).\n\n## Roadmap\n\n### Core Features\n\n- [x] Basic *Type-safe* Client/Server Communication\n  - [x] Basic MCP Command Support\n  - [x] Basic MCP Tool Support\n  - [x] Basic MCP Prompt Support\n  - [ ] Crash-Safe Handling (WIP, top priority)\n- [ ] Complete Event Subscription System\n  - [ ] Resource change notifications\n  - [ ] Tool/Prompt list change notifications\n- [ ] HTTP Header Support\n  - [x] Custom Headers\n  - [ ] Authentication Middleware\n- [ ] Basic error handling improvements\n- [ ] Basic middleware support\n\n### Framework Support\n\n- [ ] Nest.js Integration (`@remote-mcp/nestjs`)\n\n### Advanced Features\n\n- [ ] Bidirectional communication\n  - [ ] Server-to-client requests\n  - [ ] Resource sharing between server/client\n- [ ] Basic monitoring & logging\n\n## Contribute\n\nContributions are welcome. See [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n## Disclaimer\n\nThis library is a complementary extension, not part of the official MCP specification, built upon existing MCP concepts.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## References\n\n*   [Model Context Protocol](https://modelcontextprotocol.org/)\n",
    "publisher": {
      "id": "remote-mcp",
      "name": "remote-mcp",
      "url": "https://github.com/ssut/Remote-MCP"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ssut/Remote-MCP",
    "distribution": {
      "type": "npm",
      "package": "@remote-mcp/client"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@remote-mcp/client"
      ],
      "env": {
        "REMOTE_MCP_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "HTTP_HEADER__Authorization": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "3c83d848-79f8-4d45-8408-72a7362c8cde",
    "name": "mamertofabian/mcp-everything-search",
    "description": "Everything Search MCP Server",
    "fullDescription": "# Everything Search MCP Server\n\nAn MCP server that provides fast file searching capabilities across Windows, macOS, and Linux. On Windows, it uses the [Everything](https://www.voidtools.com/) SDK. On macOS, it uses the built-in `mdfind` command. On Linux, it uses the `locate`/`plocate` command.\n\n## Tools\n\n### search\n\nSearch for files and folders across your system. The search capabilities and syntax support vary by platform:\n\n- Windows: Full Everything SDK features (see syntax guide below)\n- macOS: Basic filename and content search using Spotlight database\n- Linux: Basic filename search using locate database\n\nParameters:\n\n- `query` (required): Search query string. See platform-specific notes below.\n- `max_results` (optional): Maximum number of results to return (default: 100, max: 1000)\n- `match_path` (optional): Match against full path instead of filename only (default: false)\n- `match_case` (optional): Enable case-sensitive search (default: false)\n- `match_whole_word` (optional): Match whole words only (default: false)\n- `match_regex` (optional): Enable regex search (default: false)\n- `sort_by` (optional): Sort order for results (default: 1). Available options:\n\n```\n  - 1: Sort by filename (A to Z)\n  - 2: Sort by filename (Z to A)\n  - 3: Sort by path (A to Z)\n  - 4: Sort by path (Z to A)\n  - 5: Sort by size (smallest first)\n  - 6: Sort by size (largest first)\n  - 7: Sort by extension (A to Z)\n  - 8: Sort by extension (Z to A)\n  - 11: Sort by creation date (oldest first)\n  - 12: Sort by creation date (newest first)\n  - 13: Sort by modification date (oldest first)\n  - 14: Sort by modification date (newest first)\n```\n\nExamples:\n\n```json\n{\n  \"query\": \"*.py\",\n  \"max_results\": 50,\n  \"sort_by\": 6\n}\n```\n\n```json\n{\n  \"query\": \"ext:py datemodified:today\",\n  \"max_results\": 10\n}\n```\n\nResponse includes:\n\n- File/folder path\n- File size in bytes\n- Last modified date\n\n### Search Syntax Guide\n\nFor detailed information about the search syntax supported on each platform (Windows, macOS, and Linux), please see [SEARCH_SYNTAX.md](SEARCH_SYNTAX.md).\n\n## Prerequisites\n\n### Windows\n\n1. [Everything](https://www.voidtools.com/) search utility:\n   - Download and install from https://www.voidtools.com/\n   - **Make sure the Everything service is running**\n2. Everything SDK:\n   - Download from https://www.voidtools.com/support/everything/sdk/\n   - Extract the SDK files to a location on your system\n\n### Linux\n\n1. Install and initialize the `locate` or `plocate` command:\n   - Ubuntu/Debian: `sudo apt-get install plocate` or `sudo apt-get install mlocate`\n   - Fedora: `sudo dnf install mlocate`\n2. After installation, update the database:\n   - For plocate: `sudo updatedb`\n   - For mlocate: `sudo /etc/cron.daily/mlocate`\n\n### macOS\n\nNo additional setup required. The server uses the built-in `mdfind` command.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Everything Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-everything-search):\n\n```bash\nnpx -y @smithery/cli install mcp-server-everything-search --client claude\n```\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run _mcp-server-everything-search_.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-everything-search` via pip:\n\n```\npip install mcp-server-everything-search\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_everything_search\n```\n\n## Configuration\n\n### Windows\n\nThe server requires the Everything SDK DLL to be available:\n\nEnvironment variable:\n\n```\nEVERYTHING_SDK_PATH=path\\to\\Everything-SDK\\dll\\Everything64.dll\n```\n\n### Linux and macOS\n\nNo additional configuration required.\n\n### Usage with Claude Desktop\n\nAdd one of these configurations to your `claude_desktop_config.json` based on your platform:\n\n<details>\n<summary>Windows (using uvx)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Windows (using pip installation)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Linux and macOS</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"]\n  }\n}\n```\n\nOr if using pip installation:\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"]\n  }\n}\n```\n\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-everything-search\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ngit clone https://github.com/mamertofabian/mcp-everything-search.git\ncd mcp-everything-search/src/mcp_server_everything_search\nnpx @modelcontextprotocol/inspector uv run mcp-server-everything-search\n```\n\nTo view server logs:\n\nLinux/macOS:\n\n```bash\ntail -f ~/.config/Claude/logs/mcp*.log\n```\n\nWindows (PowerShell):\n\n```powershell\nGet-Content -Path \"$env:APPDATA\\Claude\\logs\\mcp*.log\" -Tail 20 -Wait\n```\n\n## Development\n\nIf you are doing local development, there are two ways to test your changes:\n\n1. Run the MCP inspector to test your changes. See [Debugging](#debugging) for run instructions.\n\n2. Test using the Claude desktop app. Add the following to your `claude_desktop_config.json`:\n\n```json\n\"everything-search\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"--directory\",\n    \"/path/to/mcp-everything-search/src/mcp_server_everything_search\",\n    \"run\",\n    \"mcp-server-everything-search\"\n  ],\n  \"env\": {\n    \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis project is not affiliated with, endorsed by, or sponsored by voidtools (the creators of Everything search utility). This is an independent project that utilizes the publicly available Everything SDK.\n",
    "publisher": {
      "id": "mamertofabian",
      "name": "mamertofabian",
      "url": "https://github.com/mamertofabian/mcp-everything-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/mamertofabian/mcp-everything-search",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-everything-search"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-everything-search"
      ],
      "env": {
        "EVERYTHING_SDK_PATH": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "8897417a-5142-4638-b832-e3266f6965a4",
    "name": "da-okazaki/mcp-neo4j-server",
    "description": "MCP Neo4j Server",
    "fullDescription": "# MCP Neo4j Server\n\nAn MCP server that provides integration between Neo4j graph database and Claude Desktop, enabling graph database operations through natural language interactions.\n\n## Quick Start\n\nYou can run this MCP server directly using npx:\n\n```bash\nnpx @alanse/mcp-neo4j\n```\n\nOr add it to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"neo4j\": {\n      \"command\": \"npx\",\n      \"args\": [\"@alanse/mcp-neo4j-server\"],\n      \"env\": {\n        \"NEO4J_URI\": \"bolt://localhost:7687\",\n        \"NEO4J_USERNAME\": \"neo4j\",\n        \"NEO4J_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\n## Features\n\nThis server provides tools for interacting with a Neo4j database:\n\n### Tools\n\n- `execute_query`: Execute Cypher queries on the Neo4j database\n  - Supports all types of Cypher queries (READ, CREATE, UPDATE, DELETE)\n  - Returns query results in a structured format\n  - Parameters can be passed to prevent injection attacks\n\n- `create_node`: Create a new node in the graph database\n  - Specify node labels and properties\n  - Returns the created node with its internal ID\n  - Supports all Neo4j data types for properties\n\n- `create_relationship`: Create a relationship between two existing nodes\n  - Define relationship type and direction\n  - Add properties to relationships\n  - Requires node IDs for source and target nodes\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Neo4j Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@alanse/mcp-neo4j-server):\n\n```bash\nnpx -y @smithery/cli install @alanse/mcp-neo4j-server --client claude\n```\n\n### For Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/da-okazaki/mcp-neo4j-server.git\ncd mcp-neo4j-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `NEO4J_URI`: Neo4j database URI (default: bolt://localhost:7687)\n- `NEO4J_USERNAME`: Neo4j username (default: neo4j)\n- `NEO4J_PASSWORD`: Neo4j password (required)\n\n## Usage Examples\n\nHere are examples of how you can interact with the Neo4j database using natural language:\n\n### Querying Data\n\nYou can ask questions like:\n- \"Show me all employees in the Sales department\"\n- \"Find the top 5 oldest customers\"\n- \"Who has purchased more than 3 products in the last month?\"\n\nExample:\n```\nUser: \"Show me all employees in the Sales department\"\n\nClaude: Let me query the database for Sales department employees.\n\n[Executes query internally: MATCH (e:Employee)-[:WORKS_IN]->(d:Department {name: 'Sales'}) RETURN e.name, e.position]\n\nResult:\n- John Smith (Sales Manager)\n- Sarah Johnson (Sales Representative)\n- Mike Brown (Account Executive)\n```\n\n### Creating Data\n\nYou can give instructions like:\n- \"Add a new person named John Doe who is 30 years old\"\n- \"Create a product called 'Premium Coffee' with price $24.99\"\n- \"Add a new department called 'Research & Development'\"\n\nExample:\n```\nUser: \"Add a new person named John Doe who is 30 years old\"\n\nClaude: I'll create a new Person node with the provided information.\n\n[Creates node internally with label 'Person' and properties {name: 'John Doe', age: 30}]\n\nResult: Created new person node with ID: 123\n```\n\n### Creating Relationships\n\nYou can request relationships like:\n- \"Make John Doe friends with Jane Smith\"\n- \"Set Product A as a component of Product B\"\n- \"Assign John Doe to the Sales department\"\n\nExample:\n```\nUser: \"Make John Doe friends with Jane Smith\"\n\nClaude: I'll create a friendship relationship between these two people.\n\n[Creates relationship internally: MATCH (a:Person {name: 'John Doe'}), (b:Person {name: 'Jane Smith'})\nCREATE (a)-[:FRIENDS_WITH {since: '2024-01-05'}]->(b)]\n\nResult: Created friendship relationship between John Doe and Jane Smith\n```\n\n### Complex Operations\n\nYou can perform more complex operations with natural language:\n- \"Find all products purchased by customers who live in New York\"\n- \"Show me friends of friends of John Doe\"\n- \"Calculate the average age of employees in each department\"\n\nExample:\n```\nUser: \"Find all products purchased by customers who live in New York\"\n\nClaude: I'll query the database for this information.\n\n[Executes query internally:\nMATCH (c:Customer {city: 'New York'})-[:PURCHASED]->(p:Product)\nRETURN c.name, collect(p.name) as products]\n\nResult:\n- Alice Wilson: [Premium Coffee, Tea Set, Cookies]\n- Bob Miller: [Premium Coffee, Water Bottle]\n```\n\n## Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\n## License\n\nMIT\n\n",
    "publisher": {
      "id": "alanse",
      "name": "alanse",
      "url": "https://github.com/da-okazaki/mcp-neo4j-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/da-okazaki/mcp-neo4j-server",
    "distribution": {
      "type": "npm",
      "package": "@alanse/mcp-neo4j-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@alanse/mcp-neo4j-server"
      ],
      "env": {
        "NEO4J_URI": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "NEO4J_USERNAME": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "NEO4J_PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "265835be-304a-483c-84ad-56409e1bd029",
    "name": "9Ninety/MCPNotes",
    "description": "📝 MCP Notes",
    "fullDescription": "# 📝 MCP Notes\n\n\n## ✨ Overview\n\n**MCP Notes Server** is a simple note-taking application built on top of the MCP protocol. Its purpose is to enable users to record and view complex notes and tasks while utilizing AI models, such as recording personal thoughts, notes, inspirations, and insights. It does not rely on creating project files, allowing users to record any content without making it public within the project.\n\nThis project includes two servers: a Node.js server using the Model Context Protocol (MCP) for AI-driven note management and a web server providing a user-friendly interface for manual interaction with your notes.\n\n**Note:** This project requires DynamoDB for note storage. You'll need an AWS account to use it. AWS offers a generous free tier for DynamoDB, making it suitable for frequent personal use at no cost.\n\n---\n\n## 🎯 Core Features\n\n- 🖥️ **Dual Server Architecture:** MCP server for AI-driven note management and Web server for the user interface\n- 🤖 **AI-Powered Note Taking:** Record thoughts, insights, and tasks through AI interactions\n- 🗂️ **Comprehensive Note Management:** Create, list, retrieve, update, and delete notes via AI or web interface\n- 📋 **Reliable Storage:** Secure and efficient note storage with AWS DynamoDB\n- 🔐 **Flexible Authentication:** Support for AWS credentials via connection strings or environment variables\n- 📝 **Project-Independent:** Store personal notes without affecting project files or structure\n\n---\n\n## 🤖 Model Support\n\nYou can use any model that supports function calls as long as your client supports MCP. The following models have been tested and confirmed to work:\n\n- Claude 3.5 Series\n- Gemini 1.5 and 2.0 Series\n- GPT-4 Series\n- Mistral Large\n- Grok-2\n- DeepSeek Chat\n\n---\n\n## 🛠️ Installation\n\n**Recommended**\n\nRun directly with `npx` or `bunx`, see examples below.\n\n**Alternative**\n\n1. Ensure **Node.js** is installed on your system.\n2. Clone this repository and install dependencies with: `npm install`\n3. Configure Claude Desktop or any other tools as shown below\n\n---\n\n## ⚙️ Credential Configuration\n\n### Connection String\n\n```plaintext\ndynamodb://<access_key>:<secret_key>@<region>/<table>\n```\n\n> Example: `dynamodb://AKIAXXXXXXXX:SKXXXXXXXX@us-east-1/mcp-notes`\n\n### Environment Variables\n\n1. Export `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n2. Supply connection information without credentials in the URI: `dynamodb://us-east-1/mcp-notes`\n\n---\n\n## 🤖 Integration with Tools\n\n### Claude Desktop\n\nAdd this snippet to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nor file on local disks:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"file://path/to/notes-mcp-server.js\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cody\n\n> **Note:** Currently, Cody has limited MCP server support.  \n> It only allows one server connection and cannot make tool calls. You'll need to use the web interface to create and manage notes and then reference them in AI chat conversations.\n\nAdd this snippet to your VS Code settings:\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file://path/to/notes-mcp-server.js\",\n      \"mcp.provider.args\": [\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nalternatively, use with `npx` (not guaranteed to work):\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file:///usr/local/bin/npx\",\n      \"mcp.provider.args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cline\n\nAdd this snippet to `cline_mcp_settings.json`:\n\n> You will find a \"MCP Server\" icon next to the \"New Task\" button, and then there is an \"Edit MCP Settings\" button to open this file.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n## 🚀 Running Web Servers\n\nThe web server provides a user-friendly interface for managing your notes. You can launch web interfaces to manage your notes, add new notes for AI, or modify parts of AI-generated notes.\n\n```bash\nnpx -p mcp-notes mcp-notes-web-server --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n```bash\nbun src/notes-web-server.ts --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n> Alternatively, compile with `npm run build` and run `node dist/notes-mcp-server.js` or `node dist/notes-web-server.js`\n\nThen navigate to `http://localhost:3100` in your browser to view notes.\n\n---\n\n## 🔧 Available MCP Tools\n\n### listNotes\n\n- **Input:** `{ tags?: string[] }`\n- **Output:** Array of all notes, optionally filtered by tags.\n\n### getNote\n\n- **Input:** `{ id: string }`\n- **Output:** A single note object matching the given ID, or a \"not found\" message if no match exists.\n\n### writeNote\n\n- **Input:** `{ id: string, title: string, summary: string, tags: string[], content: string }`\n- **Output:** A success confirmation message.\n\n### deleteNote\n\n- **Input:** `{ id: string }`\n- **Output:** Deletion confirmation message 🚮.\n\n---\n\n## 📝 Data Structure\n\nNotes are stored using the following structure:\n\n- **`id`**: A unique identifier for the note. It should be descriptive, with a random number suffix, like \"meeting-notes-1362\".\n- **`title`**: The title of the note.\n- **`summary`**: A short summary of the note's content.\n- **`tags`**: An array of tags associated with the note (e.g., [\"meeting\", \"project-x\"]).\n- **`content`**: The main content of the note.\n\n---\n\n## 📸 Screenshots\n\n### Claude Desktop\n\n✅ Full functionality\n\n![Screenshot of MCP Notes Tool Call in Claude Desktop](./assets/screenshot-claude-desktop-tool-calling.png)\n![Screenshot of MCP Notes Resources in Claude Desktop](./assets/screenshot-claude-desktop-resources.png)\n\n### Cody\n\n✅ Mention Notes via Resource\n\n❎ Tool calls are not supported\n\n![Screenshot of MCP Notes in Cody](./assets/screenshot-cody-mention.png)\n\n### Cline\n\n✅ Full functionality with Tool Calls\n\n❓ Resources don't seem to work; help wanted.\n\n<img src=\"./assets/screenshot-cline-tool-calling.png\" alt=\"Screenshot of MCP Notes in Cline\" style=\"max-height: 1200px;\">\n",
    "publisher": {
      "id": "9Ninety",
      "name": "9Ninety",
      "url": "https://github.com/9Ninety/MCPNotes"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/9Ninety/MCPNotes",
    "distribution": {
      "type": "npm",
      "package": "mcp-notes"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-notes",
        "--dynamodb",
        "$ENVARG_DYNAMODB_CONNECTION_STRING"
      ],
      "env": {
        "ENVARG_DYNAMODB_CONNECTION_STRING": {
          "description": "DynamoDB connection string in the format: dynamodb://<aws_access_key>:<aws_secret_key>@<region>/<table>",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "fbc15c32-c648-417e-95b2-14f88c260a24",
    "name": "Automata-Labs-team/MCP-Server-Playwright",
    "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright.",
    "fullDescription": "A Model Context Protocol server that provides browser automation capabilities using Playwright.\n\nEnable LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Components](#components)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [License](#license)\n\n## Features\n\n- 🌐 Full browser automation capabilities\n- 📸 Screenshot capture of entire pages or specific elements\n- 🖱️ Comprehensive web interaction (navigation, clicking, form filling)\n- 📊 Console log monitoring\n- 🔧 JavaScript execution in browser context\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Server Playwright for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@automatalabs/mcp-server-playwright):\n\n```bash\nnpx -y @smithery/cli install @automatalabs/mcp-server-playwright --client claude\n```\n\nYou can install the package using either npx or mcp-get:\n\nUsing npx:\n```bash\nnpx @automatalabs/mcp-server-playwright install\n```\nThis command will:\n1. Check your operating system compatibility (Windows/macOS)\n2. Create or update the Claude configuration file\n3. Configure the Playwright server integration\n\nThe configuration file will be automatically created/updated at:\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @automatalabs/mcp-server-playwright\n```\n\n## Configuration\n\nThe installation process will automatically add the following configuration to your Claude config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@automatalabs/mcp-server-playwright\"]\n    }\n  }\n}\n```\n\n## Components\n\n### Tools\n\n#### `browser_navigate`\nNavigate to any URL in the browser\n```javascript\n{\n  \"url\": \"https://stealthbrowser.cloud\"\n}\n```\n\n#### `browser_screenshot`\nCapture screenshots of the entire page or specific elements\n```javascript\n{\n  \"name\": \"screenshot-name\",     // required\n  \"selector\": \"#element-id\",     // optional\n  \"fullPage\": true              // optional, default: false\n}\n```\n\n#### `browser_click`\nClick elements on the page using CSS selector\n```javascript\n{\n  \"selector\": \"#button-id\"\n}\n```\n\n#### `browser_click_text`\nClick elements on the page by their text content\n```javascript\n{\n  \"text\": \"Click me\"\n}\n```\n\n#### `browser_hover`\nHover over elements on the page using CSS selector\n```javascript\n{\n  \"selector\": \"#menu-item\"\n}\n```\n\n#### `browser_hover_text`\nHover over elements on the page by their text content\n```javascript\n{\n  \"text\": \"Hover me\"\n}\n```\n\n#### `browser_fill`\nFill out input fields\n```javascript\n{\n  \"selector\": \"#input-field\",\n  \"value\": \"Hello World\"\n}\n```\n\n#### `browser_select`\nSelect an option in a SELECT element using CSS selector\n```javascript\n{\n  \"selector\": \"#dropdown\",\n  \"value\": \"option-value\"\n}\n```\n\n#### `browser_select_text`\nSelect an option in a SELECT element by its text content\n```javascript\n{\n  \"text\": \"Choose me\",\n  \"value\": \"option-value\"\n}\n```\n\n#### `browser_evaluate`\nExecute JavaScript in the browser console\n```javascript\n{\n  \"script\": \"document.title\"\n}\n```\n\n### Resources\n\n1. **Console Logs** (`console://logs`)\n   - Access browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<n>`)\n   - Access PNG images of captured screenshots\n   - Referenced by the name specified during capture\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](https://github.com/Automata-Labs-team/MCP-Server-Playwright/blob/main/LICENSE) file for details.\n",
    "publisher": {
      "id": "automatalabs",
      "name": "automatalabs",
      "url": "https://github.com/Automata-Labs-team/MCP-Server-Playwright"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
    "distribution": {
      "type": "npm",
      "package": "@automatalabs/mcp-server-playwright"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@automatalabs/mcp-server-playwright"
      ],
      "env": {}
    }
  },
  {
    "id": "9cc96864-90a2-4ba8-a901-355fca1d358b",
    "name": "server-gitlab",
    "description": "GitLab MCP Server",
    "fullDescription": "# GitLab MCP Server\n\nMCP Server for the GitLab API, enabling project management, file operations, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a project\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `file_path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `commit_message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `previous_path` (optional string): Path of the file to move/rename\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `file_path` and `content`\n     - `commit_message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitLab projects\n   - Inputs:\n     - `search` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `per_page` (optional number): Results per page (default 20)\n   - Returns: Project search results\n\n4. `create_repository`\n   - Create a new GitLab project\n   - Inputs:\n     - `name` (string): Project name\n     - `description` (optional string): Project description\n     - `visibility` (optional string): 'private', 'internal', or 'public'\n     - `initialize_with_readme` (optional boolean): Initialize with README\n   - Returns: Created project details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `file_path` (string): Path to file/directory\n     - `ref` (optional string): Branch/tag/commit to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `title` (string): Issue title\n     - `description` (optional string): Issue description\n     - `assignee_ids` (optional number[]): User IDs to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone_id` (optional number): Milestone ID\n   - Returns: Created issue details\n\n7. `create_merge_request`\n   - Create a new merge request\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `title` (string): MR title\n     - `description` (optional string): MR description\n     - `source_branch` (string): Branch containing changes\n     - `target_branch` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft MR\n     - `allow_collaboration` (optional boolean): Allow commits from upstream members\n   - Returns: Created merge request details\n\n8. `fork_repository`\n   - Fork a project\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `namespace` (optional string): Namespace to fork to\n   - Returns: Forked project details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `project_id` (string): Project ID or URL-encoded path\n     - `branch` (string): Name for new branch\n     - `ref` (optional string): Source branch/commit for new branch\n   - Returns: Created branch reference\n\n## Setup\n\n### Personal Access Token\n[Create a GitLab Personal Access Token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html) with appropriate permissions:\n   - Go to User Settings > Access Tokens in GitLab\n   - Select the required scopes:\n     - `api` for full API access\n     - `read_api` for read-only access\n     - `read_repository` and `write_repository` for repository operations\n   - Create the token and save it securely\n\n### Usage with Claude Desktop\nAdd the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": { \n    \"gitlab\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\",\n        \"-e\",\n        \"GITLAB_API_URL\",\n        \"mcp/gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gitlab\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\" // Optional, for self-hosted instances\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t vonwig/gitlab:mcp -f src/gitlab/Dockerfile .\n```\n\n## Environment Variables\n\n- `GITLAB_PERSONAL_ACCESS_TOKEN`: Your GitLab personal access token (required)\n- `GITLAB_API_URL`: Base URL for GitLab API (optional, defaults to `https://gitlab.com/api/v4`)\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-gitlab"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-gitlab"
      ],
      "env": {
        "GITLAB_PERSONAL_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "GITLAB_API_URL": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "a8ecb259-db26-43e2-8384-ee4ad65907c5",
    "name": "CamdenClark/jira-mcp",
    "description": "JIRA MCP Server",
    "fullDescription": "# JIRA MCP Server\n\nAn MCP server that enables Large Language Models (LLMs) to interact with JIRA through standardized tools and context. This server provides capabilities for searching issues using JQL and retrieving detailed issue information.\n\n## Features\n\n- **JQL Search**: Execute complex JQL queries with pagination support\n- **Issue Details**: Retrieve detailed information about specific JIRA issues\n\n## Prerequisites\n\n- `npm` installed\n- A JIRA instance with API access\n- JIRA API token or Personal Access Token\n- JIRA user email associated with the API token\n\n### Getting JIRA API Credentials\n\n1. Log in to your Atlassian account at https://id.atlassian.com\n2. Navigate to Security settings\n3. Under API tokens, select \"Create API token\"\n4. Give your token a meaningful name (e.g., \"MCP Server\")\n5. Copy the generated token - you won't be able to see it again!\n6. Use this token as your `JIRA_API_KEY`\n7. Use the email address associated with your Atlassian account as `JIRA_USER_EMAIL`\n\n## Usage\n\n### Integration with Claude Desktop\n\n1. Add the server configuration to Claude Desktop's config file:\n\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\" \"jira-mcp\"],\n      \"env\": {\n        \"JIRA_INSTANCE_URL\": \"https://your-instance.atlassian.net\",\n        \"JIRA_USER_EMAIL\": \"your-email@company.com\",\n        \"JIRA_API_KEY\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\n2. Restart Claude Desktop to load the new configuration.\n\n## Available Tools\n\n### 1. JQL Search (`jql_search`)\n\nExecutes a JQL search query with customizable parameters.\n\n**Parameters**:\n- `jql` (required): JQL query string\n- `nextPageToken`: Token for pagination\n- `maxResults`: Maximum number of results to return\n- `fields`: Array of field names to include\n- `expand`: Additional information to include\n\n**Example**:\n```json\n{\n  \"jql\": \"project = 'MyProject' AND status = 'In Progress'\",\n  \"maxResults\": 10,\n  \"fields\": [\"summary\", \"status\", \"assignee\"]\n}\n```\n\n### 2. Get Issue (`get_issue`)\n\nRetrieves detailed information about a specific issue.\n\n**Parameters**:\n- `issueIdOrKey` (required): Issue ID or key\n- `fields`: Array of field names to include\n- `expand`: Additional information to include\n- `properties`: Array of properties to include\n- `failFast`: Whether to fail quickly on errors\n\n**Example**:\n```json\n{\n  \"issueIdOrKey\": \"PROJ-123\",\n  \"fields\": [\"summary\", \"description\", \"status\"],\n  \"expand\": \"renderedFields,names\"\n}\n```\n\n## Development\n\n### Configuration\n\nSet up your environment variables before running the server. Create a `.env` file in the root directory:\n\n```env\nJIRA_INSTANCE_URL=https://your-instance.atlassian.net\nJIRA_USER_EMAIL=your-email@company.com\nJIRA_API_KEY=your-api-token\n```\n\nReplace the values with:\n- Your actual JIRA instance URL\n- The email address associated with your JIRA account\n- Your JIRA API token (can be generated in Atlassian Account Settings)\n\n### Installation\n\n### Installing via Smithery\n\nTo install JIRA for Claude Desktop automatically via [Smithery](https://smithery.ai/server/jira-mcp):\n\n```bash\nnpx -y @smithery/cli install jira-mcp --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n```bash\ngit clone <repository-url>\ncd jira-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n### Running with MCP Inspector\n\nFor testing and development, you can use the MCP Inspector:\n\n```bash\nnpm run inspect\n```\n\n### Adding New Tools\n\nTo add new tools, modify the `ListToolsRequestSchema` handler in `index.js`:\n\n```javascript\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [\n      // Existing tools...\n      {\n        name: \"your_new_tool\",\n        description: \"Description of your new tool\",\n        inputSchema: {\n          // Define input schema...\n        }\n      }\n    ]\n  };\n});\n```\n\nThen implement the tool in the `CallToolRequestSchema` handler.\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a PR.\n",
    "publisher": {
      "id": "CamdenClark",
      "name": "CamdenClark",
      "url": "https://github.com/CamdenClark/jira-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/CamdenClark/jira-mcp",
    "distribution": {
      "type": "npm",
      "package": "jira-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "jira-mcp"
      ],
      "env": {
        "JIRA_INSTANCE_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_USER_EMAIL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "4ba26fb7-044c-4efc-b1d6-69c491bc1ec8",
    "name": "adiom-data/lance-mcp",
    "description": "🗄️ LanceDB MCP Server for LLMS",
    "fullDescription": "# 🗄️ LanceDB MCP Server for LLMS\n\nA Model Context Protocol (MCP) server that enables LLMs to interact directly the documents that they have on-disk through agentic RAG and hybrid search in LanceDB. Ask LLMs questions about the dataset as a whole or about specific documents.\n\n## ✨ Features\n\n- 🔍 LanceDB-powered serverless vector index and document summary catalog.\n- 📊 Efficient use of LLM tokens. The LLM itself looks up what it needs when it needs.\n- 📈 Security. The index is stored locally so no data is transferred to the Cloud when using a local LLM.\n\n## 🚀 Quick Start\n\nTo get started, create a local directory to store the index and add this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"lancedb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"lance-mcp\",\n        \"PATH_TO_LOCAL_INDEX_DIR\"\n      ]\n    }\n  }\n}\n```\n\n### Prerequisites\n\n- Node.js 18+\n- npx\n- MCP Client (Claude Desktop App for example)\n- Summarization and embedding models installed (see config.ts - by default we use Ollama models)\n  - `ollama pull snowflake-arctic-embed2`\n  - `ollama pull llama3.1:8b`\n\n### Demo\n\n<img src=\"https://github.com/user-attachments/assets/90bfdea9-9edd-4cf6-bb04-94c9c84e4825\" width=\"50%\">\n\n#### Local Development Mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"lancedb\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"PATH_TO_LANCE_MCP/dist/index.js\",\n        \"PATH_TO_LOCAL_INDEX_DIR\"\n      ]\n    }\n  }\n}\n```\nUse `npm run build` to build the project.\n\nUse `npx @modelcontextprotocol/inspector dist/index.js PATH_TO_LOCAL_INDEX_DIR` to run the MCP tool inspector.\n\n### Seed Data\n\nThe seed script creates two tables in LanceDB - one for the catalog of document summaries, and another one - for vectorized documents' chunks.\nTo run the seed script use the following command:\n```console\nnpm run seed -- --dbpath <PATH_TO_LOCAL_INDEX_DIR> --filesdir <PATH_TO_DOCS>\n```\n\nYou can use sample data from the docs/ directory. Feel free to adjust the default summarization and embedding models in the config.ts file. If you need to recreate the index, simply rerun the seed script with the `--overwrite` option.\n\n#### Catalog\n\n- Document summary\n- Metadata\n\n#### Chunks\n\n- Vectorized document chunk\n- Metadata\n\n## 🎯 Example Prompts\n\nTry these prompts with Claude to explore the functionality:\n\n```plaintext\n\"What documents do we have in the catalog?\"\n\"Why is the US healthcare system so broken?\"\n```\n\n## 📝 Available Tools\n\nThe server provides these tools for interaction with the index:\n\n### Catalog Tools\n\n- `catalog_search`: Search for relevant documents in the catalog\n\n### Chunks Tools\n\n- `chunks_search`: Find relevant chunks based on a specific document from the catalog\n- `all_chunks_search`: Find relevant chunks from all known documents\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "adiom-data",
      "name": "adiom-data",
      "url": "https://github.com/adiom-data/lance-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/adiom-data/lance-mcp",
    "distribution": {
      "type": "npm",
      "package": "lance-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "lance-mcp",
        "$ENVARG_DATABASE_PATH"
      ],
      "env": {
        "ENVARG_DATABASE_PATH": {
          "description": "Path to the local index directory where LanceDB will store the data",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "bed7493e-bdc1-4d7a-b1cd-2c1493a77164",
    "name": "kujenga/zotero-mcp",
    "description": "Model Context Protocol server for Zotero",
    "fullDescription": "# Model Context Protocol server for Zotero\n\nThis project is a python-based server that implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) for [Zotero](https://www.zotero.org/).\n\n## Features\n\nThis MCP server provides the following tools:\n\n- `zotero_search_items`: Search for items in your Zotero library using a text query\n- `zotero_item_metadata`: Get detailed information about a specific Zotero item\n- `zotero_item_fulltext`: Get the full text of a specific Zotero item\n\nThese can be discovered and accessed through the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) or any other [MCP client](https://modelcontextprotocol.io/clients).\n\nEach tool returns formatted text containing relevant information from your Zotero items.\n\n## Installation\n\nTo use this with Claude Desktop, add the following to the `mcpServers` configuration:\n\n```json\n    \"zotero\": {\n      \"command\": \"uvx\",\n      \"args\": [\"zotero-mcp\"],\n      \"env\": {\n        \"ZOTERO_LOCAL\": \"true\"\n      }\n    }\n```\n\nThe following environment variables are supported:\n\n- `ZOTERO_LOCAL=true`: Use the local Zotero API (default: false)\n- `ZOTERO_LIBRARY_ID`: Your Zotero library ID (not required for the local API)\n- `ZOTERO_LIBRARY_TYPE`: The type of library (user or group, default: user)\n- `ZOTERO_API_KEY`: Your Zotero API key (not required for the local API)\n\nYou can find your library ID and create an API key in your Zotero account settings: https://www.zotero.org/settings/keys\n\nThe [local Zotero API](https://groups.google.com/g/zotero-dev/c/ElvHhIFAXrY/m/fA7SKKwsAgAJ) can be used with Zotero 7 running on the same machine.\n\n> n.b. An upcoming Zotero release is needed to support the fulltext API locally: https://github.com/zotero/zotero/pull/5004\n\n## Development\n\n1. Clone this repository\n1. Install dependencies with [uv](https://docs.astral.sh/uv/) by running: `uv sync`\n1. Create a `.env` file in the project root with the environment variables above\n\nStart the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for local development:\n\n```bash\nnpx @modelcontextprotocol/inspector uv run zotero-mcp\n```\n\n### Running Tests\n\nTo run the test suite:\n\n```bash\nuv run pytest\n```\n\n## Relevant Documentation\n\n- https://modelcontextprotocol.io/tutorials/building-mcp-with-llms\n- https://github.com/modelcontextprotocol/python-sdk\n- https://pyzotero.readthedocs.io/en/latest/\n- https://www.zotero.org/support/dev/web_api/v3/start\n",
    "publisher": {
      "id": "kujenga",
      "name": "kujenga",
      "url": "https://github.com/kujenga/zotero-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kujenga/zotero-mcp",
    "distribution": {
      "type": "pip",
      "package": "zotero-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "zotero-mcp"
      ],
      "env": {
        "ZOTERO_LOCAL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ZOTERO_LIBRARY_ID": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ZOTERO_LIBRARY_TYPE": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ZOTERO_API_KEY": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "960ea4af-13a2-466d-a549-312580ac5e26",
    "name": "aindreyway/mcp-codex-keeper",
    "description": "Aindreyway MCP Codex Keeper",
    "fullDescription": "# Aindreyway MCP Codex Keeper\n\nAn intelligent MCP server that serves as a guardian of development knowledge, providing AI assistants with curated access to latest documentation and best practices.\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n1. Make sure you have Node.js installed (version 18 or higher):\n\n   ```bash\n   node --version\n   ```\n\n2. Install or update npm (comes with Node.js):\n\n   ```bash\n   npm install -g npm@latest\n   ```\n\n3. Verify npx is available:\n   ```bash\n   npx --version\n   ```\n   If not found, install it:\n   ```bash\n   npm install -g npx\n   ```\n\n### Configuration\n\nAdd this to your Cline/Sonnet configuration:\n\n```json\n\"aindreyway-codex-keeper\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@aindreyway/mcp-codex-keeper@latest\"],\n  \"disabled\": false,\n  \"env\": {\n    \"npm_config_cache_max\": \"1024000000\",\n    \"NODE_OPTIONS\": \"--max-old-space-size=256\"\n  }\n}\n```\n\nThat's it! The assistant will handle everything automatically.\n\n> **Note:** This server uses `npx` for direct npm package execution, which is optimal for Node.js/TypeScript MCP servers, providing seamless integration with the npm ecosystem and TypeScript tooling.\n\n## 🎯 What Your Assistant Can Do\n\nAsk your assistant to:\n\n- \"Show me the latest React documentation\"\n- \"Find best practices for TypeScript development\"\n- \"Update documentation for Node.js\"\n- \"Search for information about async/await\"\n\n## 🛠 Available Tools\n\n### list_documentation\n\nLists all available documentation sources with optional category filtering.\n\n### add_documentation\n\nAdd new documentation sources to the knowledge base.\n\n### update_documentation\n\nUpdate existing documentation to get the latest content.\n\n### search_documentation\n\nSearch through documentation with category filtering.\n\n## 📚 Documentation Categories\n\n- Frontend\n- Backend\n- Language\n- MCP\n- MCP-Guide\n- Database\n- DevOps\n- Security\n- Testing\n- Architecture\n- Mobile\n- AI\n- Cloud\n\n## 🔧 Features\n\nThe server automatically:\n\n- Manages documentation from various sources\n- Keeps track of latest development best practices\n- Provides intelligent search capabilities\n- Updates documentation automatically\n- Supports tagging and categorization\n- Optimizes memory usage:\n  - Uses streaming for large files\n  - Automatic cache cleanup\n  - Memory-efficient search\n  - Size and age limits for cached files\n  - Limited heap size (256MB)\n\n## 📝 License\n\nMIT License - feel free to use this in your projects!\n\n## 👤 Author\n\n**aindreyway**\n\n- GitHub: [@aindreyway](https://github.com/aindreyway)\n\n## 📖 Documentation\n\n- [User Guide](README.md) - Installation and usage instructions\n- [Contributing Guide](CONTRIBUTING.md) - How to contribute to the project\n- [Technical Documentation](PROJECT_SUMMARY.md) - Detailed technical information\n\n## ⭐️ Support\n\nGive a ⭐️ if this project helped you! If you want to contribute, please check our [Contributing Guide](CONTRIBUTING.md).\n",
    "publisher": {
      "id": "aindreyway",
      "name": "aindreyway",
      "url": "https://github.com/aindreyway/mcp-codex-keeper"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/aindreyway/mcp-codex-keeper",
    "distribution": {
      "type": "npm",
      "package": "@aindreyway/mcp-codex-keeper"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@aindreyway/mcp-codex-keeper"
      ],
      "env": {
        "npm_config_cache_max": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "NODE_OPTIONS": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ef956556-b4f0-4f98-9154-4eac2c570c16",
    "name": "executeautomation/mcp-playwright",
    "description": "Playwright MCP Server",
    "fullDescription": "# Playwright MCP Server\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n",
    "publisher": {
      "id": "executeautomation",
      "name": "executeautomation",
      "url": "https://github.com/executeautomation/mcp-playwright"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/executeautomation/mcp-playwright",
    "distribution": {
      "type": "npm",
      "package": "@executeautomation/playwright-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@executeautomation/playwright-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "5db9a5df-2466-401d-a628-46e8acec2759",
    "name": "mamertofabian/elevenlabs-mcp-server",
    "description": "ElevenLabs MCP Server",
    "fullDescription": "# ElevenLabs MCP Server\n\nA Model Context Protocol (MCP) server that integrates with ElevenLabs text-to-speech API, featuring both a server component and a sample web-based MCP Client (SvelteKit) for managing voice generation tasks.\n\n## Features\n\n- Generate audio from text using ElevenLabs API\n- Support for multiple voices and script parts\n- SQLite database for persistent history storage\n- Sample SvelteKit MCP Client for:\n  - Simple text-to-speech conversion\n  - Multi-part script management\n  - Voice history tracking and playback\n  - Audio file downloads\n\n## Installation\n\n### Installing via Smithery\n\nTo install ElevenLabs MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/elevenlabs-mcp-server):\n\n```bash\nnpx -y @smithery/cli install elevenlabs-mcp-server --client claude\n```\n\n### Using uvx (recommended)\n\nWhen using [`uvx`](https://docs.astral.sh/uv/guides/tools/), no specific installation is needed.\n\nAdd the following configuration to your MCP settings file (e.g., `cline_mcp_settings.json` for Claude Desktop):\n\n```json\n{\n  \"mcpServers\": {\n    \"elevenlabs\": {\n      \"command\": \"uvx\",\n      \"args\": [\"elevenlabs-mcp-server\"],\n      \"env\": {\n        \"ELEVENLABS_API_KEY\": \"your-api-key\",\n        \"ELEVENLABS_VOICE_ID\": \"your-voice-id\",\n        \"ELEVENLABS_MODEL_ID\": \"eleven_flash_v2\",\n        \"ELEVENLABS_STABILITY\": \"0.5\",\n        \"ELEVENLABS_SIMILARITY_BOOST\": \"0.75\",\n        \"ELEVENLABS_STYLE\": \"0.1\",\n        \"ELEVENLABS_OUTPUT_DIR\": \"output\"\n      }\n    }\n  }\n}\n```\n\n### Development Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   uv venv\n   ```\n3. Copy `.env.example` to `.env` and fill in your ElevenLabs credentials\n\n```json\n{\n  \"mcpServers\": {\n    \"elevenlabs\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/elevenlabs-mcp-server\",\n        \"run\",\n        \"elevenlabs-mcp-server\"\n      ],\n      \"env\": {\n        \"ELEVENLABS_API_KEY\": \"your-api-key\",\n        \"ELEVENLABS_VOICE_ID\": \"your-voice-id\",\n        \"ELEVENLABS_MODEL_ID\": \"eleven_flash_v2\",\n        \"ELEVENLABS_STABILITY\": \"0.5\",\n        \"ELEVENLABS_SIMILARITY_BOOST\": \"0.75\",\n        \"ELEVENLABS_STYLE\": \"0.1\",\n        \"ELEVENLABS_OUTPUT_DIR\": \"output\"\n      }\n    }\n  }\n}\n```\n\n## Using the Sample SvelteKit MCP Client\n\n1. Navigate to the web UI directory:\n   ```bash\n   cd clients/web-ui\n   ```\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n3. Copy `.env.example` to `.env` and configure as needed\n4. Run the web UI:\n   ```bash\n   pnpm dev\n   ```\n5. Open http://localhost:5174 in your browser\n\n### Available Tools\n\n- `generate_audio_simple`: Generate audio from plain text using default voice settings\n- `generate_audio_script`: Generate audio from a structured script with multiple voices and actors\n- `delete_job`: Delete a job by its ID\n- `get_audio_file`: Get the audio file by its ID\n- `list_voices`: List all available voices\n- `get_voiceover_history`: Get voiceover job history. Optionally specify a job ID for a specific job.\n\n### Available Resources\n\n- `voiceover://history/{job_id}`: Get the audio file by its ID\n- `voiceover://voices`: List all available voices\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "mamertofabian",
      "name": "mamertofabian",
      "url": "https://github.com/mamertofabian/elevenlabs-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/mamertofabian/elevenlabs-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "elevenlabs-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "elevenlabs-mcp-server"
      ],
      "env": {
        "ELEVENLABS_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ELEVENLABS_VOICE_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ELEVENLABS_MODEL_ID": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ELEVENLABS_STABILITY": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ELEVENLABS_SIMILARITY_BOOST": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ELEVENLABS_STYLE": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ELEVENLABS_OUTPUT_DIR": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "629bacb8-f07b-4d22-8490-47744d55948c",
    "name": "heltonteixeira/openrouterai",
    "description": "OpenRouter MCP Server",
    "fullDescription": "# OpenRouter MCP Server\n\nA Model Context Protocol (MCP) server providing seamless integration with OpenRouter.ai's diverse model ecosystem. Access various AI models through a unified, type-safe interface with built-in caching, rate limiting, and error handling.\n\n## Features\n\n- **Model Access**\n  - Direct access to all OpenRouter.ai models\n  - Automatic model validation and capability checking\n  - Default model configuration support\n\n- **Performance Optimization**\n  - Smart model information caching (1-hour expiry)\n  - Automatic rate limit management\n  - Exponential backoff for failed requests\n\n- **Robust Error Handling**\n  - Detailed error messages with context\n  - Rate limit detection and recovery\n  - Network timeout handling with retries\n\n## Installation\n\n```bash\nnpm install @mcpservers/openrouterai\n```\n\n## Configuration\n\n### Prerequisites\n\n1. Get your OpenRouter API key from [OpenRouter Keys](https://openrouter.ai/keys)\n2. Choose a default model (optional)\n\n### Setup\n\nAdd to your MCP settings configuration file (`cline_mcp_settings.json` or `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"openrouterai\": {\n      \"command\": \"npx\",\n      \"args\": [\"@mcpservers/openrouterai\"],\n      \"env\": {\n        \"OPENROUTER_API_KEY\": \"your-api-key-here\",\n        \"OPENROUTER_DEFAULT_MODEL\": \"optional-default-model\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### chat_completion\nSend messages to OpenRouter.ai models:\n```typescript\n{\n  model?: string;          // Optional if default model is set\n  messages: {\n    role: \"system\" | \"user\" | \"assistant\";\n    content: string;\n  }[];\n  temperature?: number;    // Optional (0-2), defaults to 1.0\n}\n```\n\n### search_models\nSearch and filter available models:\n```typescript\n{\n  query?: string;          // Search in name/description\n  provider?: string;       // Filter by provider\n  minContextLength?: number;\n  maxContextLength?: number;\n  maxPromptPrice?: number;\n  maxCompletionPrice?: number;\n  capabilities?: {\n    functions?: boolean;   // Function calling support\n    tools?: boolean;       // Tool use support\n    vision?: boolean;      // Image processing support\n    json_mode?: boolean;   // JSON mode support\n  };\n  limit?: number;          // Default: 10, max: 50\n}\n```\n\n### get_model_info\nGet detailed information about a specific model:\n```typescript\n{\n  model: string;           // Model identifier\n}\n```\n\n### validate_model\nCheck if a model ID is valid:\n```typescript\n{\n  model: string;           // Model identifier to validate\n}\n```\n\n## Rate Limiting\n\nThe server implements intelligent rate limit handling:\n- Tracks remaining requests through response headers\n- Automatically waits when rate limits are reached\n- Implements exponential backoff for failed requests\n- Provides clear error messages for rate limit issues\n\n## Error Handling\n\nThe server uses `McpError` for MCP-specific errors with clear messages:\n- Invalid model errors\n- API rate limiting\n- Authentication issues\n- Network errors\n- Invalid parameter errors\n\n## Development\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for detailed information about:\n- Development setup\n- Project structure\n- Feature implementation\n- Error handling guidelines\n- Tool usage examples\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md) for version history and migration guides.\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.",
    "publisher": {
      "id": "mcpservers",
      "name": "mcpservers",
      "url": "https://github.com/heltonteixeira/openrouterai"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/heltonteixeira/openrouterai",
    "distribution": {
      "type": "npm",
      "package": "@mcpservers/openrouterai"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@mcpservers/openrouterai"
      ],
      "env": {
        "OPENROUTER_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "OPENROUTER_DEFAULT_MODEL": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "fc41e2b6-6ab5-4c98-b1af-2aba89874d08",
    "name": "pierrebrunelle/mcp-server-openai",
    "description": "OpenAI MCP Server",
    "fullDescription": "# OpenAI MCP Server\n\nQuery OpenAI models directly from Claude using MCP protocol.\n\n## Setup\n\nAdd to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"openai-server\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"src.mcp_server_openai.server\"],\n      \"env\": {\n        \"PYTHONPATH\": \"C:/path/to/your/mcp-server-openai\",\n        \"OPENAI_API_KEY\": \"your-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Development\n```bash\ngit clone https://github.com/pierrebrunelle/mcp-server-openai\ncd mcp-server-openai\npip install -e .\n```\n\n## Testing\n```python\n# Run tests from project root\npytest -v test_openai.py -s\n\n# Sample test output:\nTesting OpenAI API call...\nOpenAI Response: Hello! I'm doing well, thank you for asking...\nPASSED\n```\n\n## License\nMIT License\n",
    "publisher": {
      "id": "pierrebrunelle",
      "name": "pierrebrunelle",
      "url": "https://github.com/pierrebrunelle/mcp-server-openai"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/pierrebrunelle/mcp-server-openai",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-openai"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-openai"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "13e9ff1a-9a71-4a26-bb8c-c0ba989c23a1",
    "name": "brave-search",
    "description": "Brave Search MCP Server",
    "fullDescription": "# Brave Search MCP Server\n\nAn MCP server implementation that integrates the Brave Search API, providing both web and local search capabilities.\n\n## Features\n\n- **Web Search**: General queries, news, articles, with pagination and freshness controls\n- **Local Search**: Find businesses, restaurants, and services with detailed information\n- **Flexible Filtering**: Control result types, safety levels, and content freshness\n- **Smart Fallbacks**: Local search automatically falls back to web when no results are found\n\n## Tools\n\n- **brave_web_search**\n  - Execute web searches with pagination and filtering\n  - Inputs:\n    - `query` (string): Search terms\n    - `count` (number, optional): Results per page (max 20)\n    - `offset` (number, optional): Pagination offset (max 9)\n\n- **brave_local_search**\n  - Search for local businesses and services\n  - Inputs:\n    - `query` (string): Local search terms\n    - `count` (number, optional): Number of results (max 20)\n  - Automatically falls back to web search if no local results found\n\n\n## Configuration\n\n### Getting an API Key\n1. Sign up for a [Brave Search API account](https://brave.com/search/api/)\n2. Choose a plan (Free tier available with 2,000 queries/month)\n3. Generate your API key [from the developer dashboard](https://api.search.brave.com/app/keys)\n\n### Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n\n### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"BRAVE_API_KEY\",\n        \"mcp/brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-brave-search\"\n      ],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/brave-search:latest -f src/brave-search/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://www.npmjs.com/package/@modelcontextprotocol/server-brave-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://www.npmjs.com/package/@modelcontextprotocol/server-brave-search",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-brave-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": {
          "description": "Your Brave Search API key. See: https://brave.com/search/api/",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "bed2e5f0-7afc-4f55-852a-002e8892e494",
    "name": "QuantGeekDev/docker-mcp",
    "description": "🐳 docker-mcp",
    "fullDescription": "# 🐳 docker-mcp\n\nA powerful Model Context Protocol (MCP) server for Docker operations, enabling seamless container and compose stack management through Claude AI.\n\n## ✨ Features\n\n- 🚀 Container creation and instantiation\n- 📦 Docker Compose stack deployment\n- 🔍 Container logs retrieval\n- 📊 Container listing and status monitoring\n\n### 🎬 Demos\n#### Deploying a Docker Compose Stack\n\n\nhttps://github.com/user-attachments/assets/b5f6e40a-542b-4a39-ba12-7fdf803ee278\n\n\n\n#### Analyzing Container Logs\n\n\n\nhttps://github.com/user-attachments/assets/da386eea-2fab-4835-82ae-896de955d934\n\n\n\n## 🚀 Quickstart\n\nTo try this in Claude Desktop app, add this to your claude config files:\n```json\n{\n  \"mcpServers\": {\n    \"docker-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"docker-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Docker MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/docker-mcp):\n\n```bash\nnpx @smithery/cli install docker-mcp --client claude\n```\n\n### Prerequisites\n\n- UV (package manager)\n- Python 3.12+\n- Docker Desktop or Docker Engine\n- Claude Desktop\n\n### Installation\n\n#### Claude Desktop Configuration\n\nAdd the server configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>💻 Development Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"docker-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<path-to-docker-mcp>\",\n        \"run\",\n        \"docker-mcp\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n  <summary>🚀 Production Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"docker-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"docker-mcp\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n## 🛠️ Development\n\n### Local Setup\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/QuantGeekDev/docker-mcp.git\ncd docker-mcp\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\nuv sync\n```\n\n### 🔍 Debugging\n\nLaunch the MCP Inspector for debugging:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory <path-to-docker-mcp> run docker-mcp\n```\n\nThe Inspector will provide a URL to access the debugging interface.\n\n## 📝 Available Tools\n\nThe server provides the following tools:\n\n### create-container\nCreates a standalone Docker container\n```json\n{\n    \"image\": \"image-name\",\n    \"name\": \"container-name\",\n    \"ports\": {\"80\": \"80\"},\n    \"environment\": {\"ENV_VAR\": \"value\"}\n}\n```\n\n### deploy-compose\nDeploys a Docker Compose stack\n```json\n{\n    \"project_name\": \"example-stack\",\n    \"compose_yaml\": \"version: '3.8'\\nservices:\\n  service1:\\n    image: image1:latest\\n    ports:\\n      - '8080:80'\"\n}\n```\n\n### get-logs\nRetrieves logs from a specific container\n```json\n{\n    \"container_name\": \"my-container\"\n}\n```\n\n### list-containers\nLists all Docker containers\n```json\n{}\n```\n\n## 🚧 Current Limitations\n\n- No built-in environment variable support for containers\n- No volume management\n- No network management\n- No container health checks\n- No container restart policies\n- No container resource limits\n\n## 🤝 Contributing\n\n1. Fork the repository from [docker-mcp](https://github.com/QuantGeekDev/docker-mcp)\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Open a Pull Request\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## ✨ Authors\n\n- **Alex Andru** - *Initial work | Core contributor* - [@QuantGeekDev](https://github.com/QuantGeekDev)\n- **Ali Sadykov** - *Initial work  | Core contributor* - [@md-archive](https://github.com/md-archive)\n\n---\nMade with ❤️\n",
    "publisher": {
      "id": "QuantGeekDev",
      "name": "QuantGeekDev",
      "url": "https://github.com/QuantGeekDev/docker-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/QuantGeekDev/docker-mcp",
    "distribution": {
      "type": "pip",
      "package": "docker-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "docker-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "287df718-5fda-4c0f-aeb5-9c4f28d72d48",
    "name": "qpd-v/mcp-communicator-telegram",
    "description": "MCP Communicator (Telegram)",
    "fullDescription": "# MCP Communicator (Telegram)\n\nAn MCP server that enables communication with users through Telegram. This server provides tools to interact with users via a Telegram bot, including asking questions, sending notifications, sharing files, and creating project archives.\n\n## Installation\n\n### Via npm (global)\n\n```bash\nnpm install -g mcp-communicator-telegram\n```\n\n### Via npx (on-demand)\n\n```bash\nnpx mcptelegram\n```\n\nTo get your Telegram chat ID:\n```bash\nnpx mcptelegram-chatid\n```\n\n## Features\n\n- Ask questions to users through Telegram\n- Send notifications to users (no response required)\n- Send files to users via Telegram\n- Create and send project zip files (respecting .gitignore)\n- Receive responses asynchronously (waits indefinitely for response)\n- Support for reply-based message tracking\n- Secure chat ID validation\n- Error handling and logging\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- A Telegram bot token (obtained from [@BotFather](https://t.me/botfather))\n- Your Telegram chat ID (can be obtained using the included utility)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/qpd-v/mcp-communicator-telegram.git\ncd mcp-communicator-telegram\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a Telegram bot:\n   - Open Telegram and search for [@BotFather](https://t.me/botfather)\n   - Send `/newbot` and follow the instructions\n   - Save the bot token you receive\n\n4. Get your chat ID:\n   - Copy `.env.example` to `.env`\n   - Add your bot token to the `.env` file:\n     ```\n     TELEGRAM_TOKEN=your_bot_token_here\n     ```\n   - Run the chat ID utility:\n     ```bash\n     npm run build\n     node build/get-chat-id.js\n     ```\n   - Send any message to your bot\n   - Copy the chat ID that appears in the console\n   - Add the chat ID to your `.env` file:\n     ```\n     TELEGRAM_TOKEN=your_bot_token_here\n     CHAT_ID=your_chat_id_here\n     ```\n\n## Configuration\n\nAdd the server to your MCP settings file (usually located at `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-communicator-telegram\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mcp-communicator-telegram/build/index.js\"],\n      \"env\": {\n        \"TELEGRAM_TOKEN\": \"your_bot_token_here\",\n        \"CHAT_ID\": \"your_chat_id_here\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### ask_user\n\nAsks a question to the user via Telegram and waits for their response.\n\nInput Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\": \"The question to ask the user\"\n    }\n  },\n  \"required\": [\"question\"]\n}\n```\n\nExample usage:\n```typescript\nconst response = await use_mcp_tool({\n  server_name: \"mcp-communicator-telegram\",\n  tool_name: \"ask_user\",\n  arguments: {\n    question: \"What is your favorite color?\"\n  }\n});\n```\n\n### notify_user\n\nSends a notification message to the user via Telegram (no response required).\n\nInput Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"The message to send to the user\"\n    }\n  },\n  \"required\": [\"message\"]\n}\n```\n\nExample usage:\n```typescript\nawait use_mcp_tool({\n  server_name: \"mcp-communicator-telegram\",\n  tool_name: \"notify_user\",\n  arguments: {\n    message: \"Task completed successfully!\"\n  }\n});\n```\n\n### send_file\n\nSends a file to the user via Telegram.\n\nInput Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"filePath\": {\n      \"type\": \"string\",\n      \"description\": \"The path to the file to send\"\n    }\n  },\n  \"required\": [\"filePath\"]\n}\n```\n\nExample usage:\n```typescript\nawait use_mcp_tool({\n  server_name: \"mcp-communicator-telegram\",\n  tool_name: \"send_file\",\n  arguments: {\n    filePath: \"path/to/file.txt\"\n  }\n});\n```\n\n### zip_project\n\nCreates a zip file of a project directory (respecting .gitignore patterns) and sends it to the user via Telegram.\n\nInput Schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"directory\": {\n      \"type\": \"string\",\n      \"description\": \"Directory to zip (defaults to current working directory)\"\n    }\n  },\n  \"required\": []\n}\n```\n\nExample usage with default directory (current working directory):\n```typescript\nawait use_mcp_tool({\n  server_name: \"mcp-communicator-telegram\",\n  tool_name: \"zip_project\",\n  arguments: {}\n});\n```\n\nExample usage with specific directory:\n```typescript\nawait use_mcp_tool({\n  server_name: \"mcp-communicator-telegram\",\n  tool_name: \"zip_project\",\n  arguments: {\n    directory: \"/path/to/your/project\"\n  }\n});\n```\n\nFeatures:\n- Creates a zip file named `[project-name]-project.zip` based on the directory name\n- Can zip any specified directory or the current working directory\n- Respects .gitignore patterns\n- Maintains correct file paths in the archive\n- Automatically cleans up the zip file after sending\n- Handles files up to 2GB in size\n\n## Development\n\nBuild the project:\n```bash\nnpm run build\n```\n\nRun in development mode:\n```bash\nnpm run dev\n```\n\nWatch for changes:\n```bash\nnpm run watch\n```\n\nClean build directory:\n```bash\nnpm run clean\n```\n\n## Security\n\n- The server only responds to messages from the configured chat ID\n- Environment variables are used for sensitive configuration\n- Message IDs are used to track question/answer pairs\n- The bot ignores messages without proper context\n\n## License\n\nISC\n\n## Author\n\nqpd-v\n\n## Version\n\n0.2.1  # Major version bump for new features: notify_user, send_file, and zip_project tools",
    "publisher": {
      "id": "qpd-v",
      "name": "qpd-v",
      "url": "https://github.com/qpd-v/mcp-communicator-telegram"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qpd-v/mcp-communicator-telegram",
    "distribution": {
      "type": "npm",
      "package": "mcp-communicator-telegram"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-communicator-telegram"
      ],
      "env": {
        "TELEGRAM_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CHAT_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ad05c6c1-3409-4153-9303-5b74b8a16734",
    "name": "ChanMeng666/server-google-news",
    "description": "Google News MCP Server",
    "fullDescription": "# Google News MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides Google News search capabilities via SerpAPI integration. Automatically categorizes news results and supports multiple languages and regions.\n\nhttps://github.com/user-attachments/assets/1cc71c27-f840-4c94-9ab5-460d84ba4779\n\n\n![屏幕截图 2024-12-30 021446](https://github.com/user-attachments/assets/34985fac-a529-4aac-a77d-b0b93f70d0f7)\n\n![屏幕截图 2024-12-30 021524](https://github.com/user-attachments/assets/6d1d3069-db04-421e-83b9-6ecdbce4847e)\n\n![屏幕截图 2024-12-30 021914](https://github.com/user-attachments/assets/16889a09-c05d-47dc-b3fe-5ea3771e059d)\n\n![屏幕截图 2024-12-30 021941](https://github.com/user-attachments/assets/da20e7a6-f2e8-4aec-bab9-f19322d0f798)\n\n\n# ✨ Features\n\n### 🔍 Flexible Search Options\nComprehensive search capabilities including query-based search, topic search, publication filtering and story coverage.\n\n### 🌐 Global Coverage\nSupports multiple languages and regions through configurable language and country codes.\n\n### 📊 Smart Categorization \nAutomatically categorizes news results into topics like AI & Technology, Business, Science & Research, and Healthcare.\n\n### 🔀 Multiple Result Types\nHandles various news result types including headlines, stories, related topics and menu links.\n\n### 🛠️ Robust Error Handling\nComprehensive error handling for API failures and invalid inputs, with helpful error messages.\n\n### 🌍 Language Support\nAutomatic fallback to English for unsupported language codes with appropriate user notifications.\n\n# 🔑 SERP API Setup Guide\n\nBefore getting started, you'll need to obtain a SERP API key. Here's how:\n\n1. Visit [SERP API website](https://serpapi.com/) and create an account\n\n2. After registration, go to your Dashboard:\n   - Locate the \"API Key\" section\n   - Copy your API key\n   - New users get 100 free API calls\n\n3. API Usage Details:\n   - Free tier: 100 searches per month\n   - Paid plans start at $50/month for 5000 searches\n   - Billing based on successful API calls\n   - Multiple payment methods: Credit Card, PayPal, etc.\n\n4. Usage Limits:\n   - Request Rate: 2 requests/second\n   - IP Restrictions: None\n   - Concurrent Requests: 5\n   - Response Cache Time: 1 hour\n\n# 👩‍🔧 Solution for MCP Servers Connection Issues with NVM/NPM\n\nClick to view my configuration solution 👉 https://github.com/modelcontextprotocol/servers/issues/76\n\n# 🚀 Quick Start\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Configure environment:\nModify your `claude_desktop_config.json` with the following content (adjust paths according to your system):\n```json\n    \"google-news\": {\n      \"command\": \"D:\\\\Program\\\\nvm\\\\node.exe\",\n      \"args\": [\n        \"D:\\\\github_repository\\\\path_to\\\\dist\\\\index.js\"\n      ],\n      \"env\": {\n        \"SERP_API_KEY\": \"your-api-key\"\n      }\n    }\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Start the server:\n```bash\nnpm start\n```\n\n## Troubleshooting\n\n1. Invalid API Key\n- Verify API key configuration in `claude_desktop_config.json`\n- Confirm API key is active in SERP API dashboard\n\n2. Request Failures\n- Check network connectivity\n- Verify API call quota hasn't been exceeded\n- Validate request parameter format\n\n# 📦 Installation\n\n## Installing via Smithery\n\nTo install Google News for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@chanmeng666/google-news-server):\n\n```bash\nnpx -y @smithery/cli install @chanmeng666/google-news-server --client claude\n```\n\n## Installing via mcp-get\n\n```bash\nnpx @michaellatman/mcp-get@latest install @chanmeng666/google-news-server\n```\n\n> If you are using an old version of Windows PowerShell, you may need to run `Set-ExecutionPolicy Bypass -Scope Process` before this command.\n\n## Manual Installation\n\n<img src=\"https://cdn.simpleicons.org/npm/CB3837\" height=\"14\"/> <a href=\"https://www.npmjs.com/package/@chanmeng666/google-news-server\">@chanmeng666/google-news-server</a>\n\n```bash\n# Using npm\nnpm i @chanmeng666/google-news-server\n# or\nnpm install @chanmeng666/google-news-server\n\n# Using yarn\nyarn add @chanmeng666/google-news-server\n\n# Using pnpm\npnpm add @chanmeng666/google-news-server\n```\n\n# 💻 Tech Stack\n![TypeScript](https://img.shields.io/badge/typescript-%23007ACC.svg?style=for-the-badge&logo=typescript&logoColor=white)\n![NodeJS](https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&logo=node.js&logoColor=white)\n![MCP](https://img.shields.io/badge/MCP-SDK-blue?style=for-the-badge)\n\n# 📖 API Documentation\n\nThe server implements the Model Context Protocol and exposes a Google News search tool with the following parameters:\n\n- `q`: Search query string\n- `gl`: Country code (e.g., 'us', 'uk')\n- `hl`: Language code (e.g., 'en', 'es')\n- `topic_token`: Token for specific news topics\n- `publication_token`: Token for specific publishers\n- `story_token`: Token for full coverage of a story\n- `section_token`: Token for specific sections\n\n# 🔧 Development\n\n```bash\n# Run in development mode with hot reload\nnpm run dev\n\n# Run linting\nnpm run lint\n\n# Run tests\nnpm run test\n```\n\n# 📝 License\n\nThis project is [MIT licensed](./LICENSE).\n\n# 🙋‍♀ Author\n\nCreated and maintained by [Chan Meng](https://chanmeng.live/).\n[![GitHub](https://img.shields.io/badge/github-%23121011.svg?style=normal&logo=github&logoColor=white)](https://github.com/ChanMeng666)\n[![LinkedIn](https://img.shields.io/badge/linkedin-%230077B5.svg?style=normal&logo=linkedin&logoColor=white)](https://www.linkedin.com/in/chanmeng666/)\n\n",
    "publisher": {
      "id": "chanmeng666",
      "name": "chanmeng666",
      "url": "https://github.com/ChanMeng666/server-google-news"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ChanMeng666/server-google-news",
    "distribution": {
      "type": "npm",
      "package": "@chanmeng666/google-news-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@chanmeng666/google-news-server"
      ],
      "env": {
        "SERP_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "1433a6f2-1bf0-495d-abad-947569837280",
    "name": "tumf/mcp-shell-server",
    "description": "MCP Shell Server",
    "fullDescription": "# MCP Shell Server\n\nA secure shell command execution server implementing the Model Context Protocol (MCP). This server allows remote execution of whitelisted shell commands with support for stdin input.\n\n## Features\n\n* **Secure Command Execution**: Only whitelisted commands can be executed\n* **Standard Input Support**: Pass input to commands via stdin\n* **Comprehensive Output**: Returns stdout, stderr, exit status, and execution time\n* **Shell Operator Safety**: Validates commands after shell operators (; , &&, ||, |)\n* **Timeout Control**: Set maximum execution time for commands\n\n## MCP client setting in your Claude.app\n\n### Published version\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n### Local version\n\n#### Configuration\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \".\",\n        \"run\",\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n#### Installation\n\n```bash\npip install mcp-shell-server\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n# Or using the alias\nALLOWED_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n```\n\nThe `ALLOW_COMMANDS` (or its alias `ALLOWED_COMMANDS` ) environment variable specifies which commands are allowed to be executed. Commands can be separated by commas with optional spaces around them.\n\nValid formats for ALLOW_COMMANDS or ALLOWED_COMMANDS:\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\"          # Basic format\nALLOWED_COMMANDS=\"ls ,echo, cat\"      # With spaces (using alias)\nALLOW_COMMANDS=\"ls,  cat  , echo\"     # Multiple spaces\n```\n\n### Request Format\n\n```python\n# Basic command execution\n{\n    \"command\": [\"ls\", \"-l\", \"/tmp\"]\n}\n\n# Command with stdin input\n{\n    \"command\": [\"cat\"],\n    \"stdin\": \"Hello, World!\"\n}\n\n# Command with timeout\n{\n    \"command\": [\"long-running-process\"],\n    \"timeout\": 30  # Maximum execution time in seconds\n}\n\n# Command with working directory and timeout\n{\n    \"command\": [\"grep\", \"-r\", \"pattern\"],\n    \"directory\": \"/path/to/search\",\n    \"timeout\": 60\n}\n```\n\n### Response Format\n\nSuccessful response:\n\n```json\n{\n    \"stdout\": \"command output\",\n    \"stderr\": \"\",\n    \"status\": 0,\n    \"execution_time\": 0.123\n}\n```\n\nError response:\n\n```json\n{\n    \"error\": \"Command not allowed: rm\",\n    \"status\": 1,\n    \"stdout\": \"\",\n    \"stderr\": \"Command not allowed: rm\",\n    \"execution_time\": 0\n}\n```\n\n## Security\n\nThe server implements several security measures:\n\n1. **Command Whitelisting**: Only explicitly allowed commands can be executed\n2. **Shell Operator Validation**: Commands after shell operators (;, &&, ||, |) are also validated against the whitelist\n3. **No Shell Injection**: Commands are executed directly without shell interpretation\n\n## Development\n\n### Setting up Development Environment\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/yourusername/mcp-shell-server.git\ncd mcp-shell-server\n```\n\n2. Install dependencies including test requirements\n\n```bash\npip install -e \".[test]\"\n```\n\n### Running Tests\n\n```bash\npytest\n```\n\n## API Reference\n\n### Request Arguments\n\n| Field     | Type       | Required | Description                                   |\n|-----------|------------|----------|-----------------------------------------------|\n| command   | string[]   | Yes      | Command and its arguments as array elements   |\n| stdin     | string     | No       | Input to be passed to the command            |\n| directory | string     | No       | Working directory for command execution       |\n| timeout   | integer    | No       | Maximum execution time in seconds             |\n\n### Response Fields\n\n| Field           | Type    | Description                                |\n|----------------|---------|---------------------------------------------|\n| stdout         | string  | Standard output from the command           |\n| stderr         | string  | Standard error output from the command     |\n| status         | integer | Exit status code                           |\n| execution_time | float   | Time taken to execute (in seconds)         |\n| error          | string  | Error message (only present if failed)     |\n\n## Requirements\n\n* Python 3.11 or higher\n* mcp>=1.1.0\n\n## License\n\nMIT License - See LICENSE file for details\n",
    "publisher": {
      "id": "tumf",
      "name": "tumf",
      "url": "https://github.com/tumf/mcp-shell-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tumf/mcp-shell-server",
    "distribution": {
      "type": "pip",
      "package": "mcp-shell-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-shell-server"
      ],
      "env": {
        "ALLOW_COMMANDS": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "a89af482-b365-4be1-8e10-e5084391ab2d",
    "name": "mtane0412/ghost-mcp-server",
    "description": "Ghost MCP Server",
    "fullDescription": "# Ghost MCP Server\n\nA Model Context Protocol (MCP) server that integrates with the Ghost Admin API. This server enables programmatic access to Ghost CMS features including post management, page management, member management, and more.\n\n## Features\n\n- Post Management (create, read, update, delete, search)\n- Page Management (create, read, update, delete)\n- Tag Management\n- Author Management\n- Member Management (create, read, update, delete, search)\n- Image Upload Support\n\n## Prerequisites\n\n- Node.js (v18 or higher recommended)\n- Ghost CMS instance\n- Ghost Admin API key\n\n## Installation\n\nInstall the package using npm:\n\n```bash\nnpm install @mtane0412/ghost-mcp-server\n```\n\n## Configuration\n\n1. Create a new custom integration in your Ghost Admin dashboard under Settings > Integrations.\n\n2. Set the following environment variables:\n\n```bash\n# macOS/Linux\nexport GHOST_URL=\"https://your-ghost-blog.com\"\nexport GHOST_ADMIN_API_KEY=\"your_admin_api_key\"\n\n# Windows (PowerShell)\n$env:GHOST_URL=\"https://your-ghost-blog.com\"\n$env:GHOST_ADMIN_API_KEY=\"your_admin_api_key\"\n```\n\nAlternatively, you can create a `.env` file:\n\n```env\nGHOST_URL=https://your-ghost-blog.com\nGHOST_ADMIN_API_KEY=your_admin_api_key\n```\n\n## Usage\n\nAfter installation, start the server with:\n\n```bash\nnpx @mtane0412/ghost-mcp-server\n```\n\n## Available Tools\n\n### get_posts\nRetrieves a list of blog posts.\n\nInput:\n```json\n{\n  \"limit\": \"number\", // Optional: Number of posts to retrieve (1-100, default: 10)\n  \"page\": \"number\"   // Optional: Page number (default: 1)\n}\n```\n\n### get_post\nRetrieves a specific post by ID.\n\nInput:\n```json\n{\n  \"id\": \"string\" // Required: Post ID\n}\n```\n\n### search_posts\nSearches for posts.\n\nInput:\n```json\n{\n  \"query\": \"string\", // Required: Search query\n  \"limit\": \"number\"  // Optional: Number of posts to retrieve (1-100, default: 10)\n}\n```\n\n### create_post\nCreates a new post.\n\nInput:\n```json\n{\n  \"title\": \"string\",     // Required: Post title\n  \"html\": \"string\",      // Optional: HTML content\n  \"lexical\": \"string\",   // Optional: Lexical content\n  \"status\": \"string\",    // Optional: Post status (published/draft/scheduled)\n  \"visibility\": \"string\" // Optional: Visibility level (public/members/paid/tiers)\n}\n```\n\n### update_post\nUpdates an existing post.\n\nInput:\n```json\n{\n  \"id\": \"string\",       // Required: Post ID\n  \"title\": \"string\",    // Optional: Post title\n  \"html\": \"string\",     // Optional: HTML content\n  \"lexical\": \"string\",  // Optional: Lexical content\n  \"status\": \"string\"    // Optional: Post status\n}\n```\n\n### delete_post\nDeletes a post.\n\nInput:\n```json\n{\n  \"id\": \"string\" // Required: Post ID\n}\n```\n\n### get_pages\nRetrieves a list of pages.\n\nInput:\n```json\n{\n  \"limit\": \"number\",     // Optional: Number of pages to retrieve (1-100, default: 10)\n  \"page\": \"number\",      // Optional: Page number (default: 1)\n  \"order\": \"string\",     // Optional: Sort order\n  \"formats\": [\"string\"], // Optional: Content formats (html/mobiledoc/lexical)\n  \"include\": [\"string\"]  // Optional: Related data to include (authors/tags)\n}\n```\n\n### get_members\nRetrieves a list of members.\n\nInput:\n```json\n{\n  \"limit\": \"number\",     // Optional: Number of members to retrieve (1-100, default: 10)\n  \"page\": \"number\",      // Optional: Page number (default: 1)\n  \"order\": \"string\",     // Optional: Sort order\n  \"include\": [\"string\"]  // Optional: Related data to include (labels/newsletters)\n}\n```\n\n### search_members\nSearches for members.\n\nInput:\n```json\n{\n  \"query\": \"string\",     // Required: Search query\n  \"limit\": \"number\",     // Optional: Number of members to retrieve (1-100, default: 10)\n  \"include\": [\"string\"]  // Optional: Related data to include (labels/newsletters)\n}\n```\n\n### upload_image\nUploads an image.\n\nInput:\n```json\n{\n  \"file\": \"string\",   // Required: Base64 encoded image data\n  \"purpose\": \"string\" // Optional: Image purpose (image/profile_image/icon)\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspect\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT License",
    "publisher": {
      "id": "mtane0412",
      "name": "mtane0412",
      "url": "https://github.com/mtane0412/ghost-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/mtane0412/ghost-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@mtane0412/ghost-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@mtane0412/ghost-mcp-server"
      ],
      "env": {
        "GHOST_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "GHOST_ADMIN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "0693d7f4-7ef3-475b-b153-38427adc820a",
    "name": "zxkane/mcp-server-amazon-bedrock",
    "description": "Amazon Bedrock MCP Server",
    "fullDescription": "# Amazon Bedrock MCP Server\n\nA Model Control Protocol (MCP) server that integrates with Amazon Bedrock's Nova Canvas model for AI image generation.\n\n<a href=\"https://glama.ai/mcp/servers/9qw7dwpvj9\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/9qw7dwpvj9/badge\" alt=\"Amazon Bedrock Server MCP server\" /></a>\n\n## Features\n\n- High-quality image generation from text descriptions using Amazon's Nova Canvas model\n- Advanced control through negative prompts to refine image composition\n- Flexible configuration options for image dimensions and quality\n- Deterministic image generation with seed control\n- Robust input validation and error handling\n\n## Prerequisites\n\n1. Active AWS account with Amazon Bedrock and Nova Canvas model access\n2. Properly configured AWS credentials with required permissions\n3. Node.js version 18 or later\n\n## Installation\n\n### AWS Credentials Configuration\n\nThe server requires AWS credentials with appropriate Amazon Bedrock permissions. Configure these using one of the following methods:\n\n1. Environment variables:\n   ```bash\n   export AWS_ACCESS_KEY_ID=your_access_key\n   export AWS_SECRET_ACCESS_KEY=your_secret_key\n   export AWS_REGION=us-east-1  # or your preferred region\n   ```\n\n2. AWS credentials file (`~/.aws/credentials`):\n   ```ini\n   [the_profile_name]\n   aws_access_key_id = your_access_key\n   aws_secret_access_key = your_secret_key\n   ```\n   Environment variable for active profile:\n   ```bash\n   export AWS_PROFILE=the_profile_name\n   ```\n\n3. IAM role (when deployed on AWS infrastructure)\n\n### Claude Desktop Integration\n\nTo integrate with Claude Desktop, add the following configuration to your settings file:\n\nMacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nWindows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"amazon-bedrock\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@zxkane/mcp-server-amazon-bedrock\"\n      ],\n      \"env\": {\n        \"AWS_PROFILE\": \"your_profile_name\",         // Optional, only if you want to use a specific profile\n        \"AWS_ACCESS_KEY_ID\": \"your_access_key\",     // Optional if using AWS credentials file or IAM role\n        \"AWS_SECRET_ACCESS_KEY\": \"your_secret_key\", // Optional if using AWS credentials file or IAM role\n        \"AWS_REGION\": \"us-east-1\"                   // Optional, defaults to 'us-east-1'\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### generate_image\n\nCreates images from text descriptions using Amazon Bedrock's Nova Canvas model.\n\n#### Parameters\n\n- `prompt` (required): Descriptive text for the desired image (1-1024 characters)\n- `negativePrompt` (optional): Elements to exclude from the image (1-1024 characters)\n- `width` (optional): Image width in pixels (default: 1024)\n- `height` (optional): Image height in pixels (default: 1024)\n- `quality` (optional): Image quality level - \"standard\" or \"premium\" (default: \"standard\")\n- `cfg_scale` (optional): Prompt adherence strength (1.1-10, default: 6.5)\n- `seed` (optional): Generation seed for reproducibility (0-858993459, default: 12)\n- `numberOfImages` (optional): Batch size for generation (1-5, default: 1)\n\n#### Example Implementation\n\n```typescript\nconst result = await callTool('generate_image', {\n  prompt: \"A serene mountain landscape at sunset\",\n  negativePrompt: \"people, buildings, vehicles\",\n  quality: \"premium\",\n  cfg_scale: 8,\n  numberOfImages: 2\n});\n```\n\n#### Prompt Guidelines\n\nFor optimal results, avoid negative phrasing (\"no\", \"not\", \"without\") in the main prompt. Instead, move these elements to the `negativePrompt` parameter. For example, rather than using \"a landscape without buildings\" in the prompt, use \"buildings\" in the `negativePrompt`.\n\nFor detailed usage guidelines, refer to the [Nova Canvas documentation][nova-canvas-doc].\n\n## Development\n\nTo set up and run the server in a local environment:\n\n```bash\ngit clone https://github.com/zxkane/mcp-server-amazon-bedrock.git\ncd mcp-server-amazon-bedrock\nnpm install\nnpm run build\n```\n\n### Performance Considerations\n\nGeneration time is influenced by resolution (`width` and `height`), `numberOfImages`, and `quality` settings. When using higher values, be mindful of potential timeout implications in your implementation.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n[nova-canvas-doc]: https://docs.aws.amazon.com/nova/latest/userguide/image-gen-access.html\n",
    "publisher": {
      "id": "zxkane",
      "name": "zxkane",
      "url": "https://github.com/zxkane/mcp-server-amazon-bedrock"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/zxkane/mcp-server-amazon-bedrock",
    "distribution": {
      "type": "npm",
      "package": "@zxkane/mcp-server-amazon-bedrock"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@zxkane/mcp-server-amazon-bedrock"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AWS_SECRET_ACCESS_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AWS_REGION": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "AWS_PROFILE": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "c000aea2-d52e-448a-b1f3-b177e763ce64",
    "name": "StevenStavrakis/obsidian-mcp",
    "description": "Obsidian MCP Server",
    "fullDescription": "# Obsidian MCP Server\n\nAn [MCP (Model Context Protocol)](https://modelcontextprotocol.io) server that enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing and managing notes and tags.\n\n## Warning!!!\n\nThis MCP has read and write access (if you allow it). Please. PLEASE backup your Obsidian vault prior to using obsidian-mcp to manage your notes. I recommend using git, but any backup method will work. These tools have been tested, but not thoroughly, and this MCP is in active development.\n\n## Features\n\n- Read and search notes in your vault\n- Create new notes and directories\n- Edit existing notes\n- Move and delete notes\n- Manage tags (add, remove, rename)\n- Search vault contents\n\n## Requirements\n\n- Node.js 20 or higher (might work on lower, but I haven't tested it)\n- An Obsidian vault\n\n## Install\n\n### Installing Manually\n\nAdd to your Claude Desktop configuration:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n    \"mcpServers\": {\n        \"obsidian\": {\n            \"command\": \"npx\",\n            \"args\": [\"-y\", \"obsidian-mcp\", \"/path/to/your/vault\", \"/path/to/your/vault2\"]\n        }\n    }\n}\n```\n\nReplace `/path/to/your/vault` with the absolute path to your Obsidian vault. For example:\n\nMacOS/Linux:\n\n```json\n\"/Users/username/Documents/MyVault\"\n```\n\nWindows:\n\n```json\n\"C:\\\\Users\\\\username\\\\Documents\\\\MyVault\"\n```\n\nRestart Claude for Desktop after saving the configuration. You should see the hammer icon appear, indicating the server is connected.\n\nIf you have connection issues, check the logs at:\n\n- MacOS: `~/Library/Logs/Claude/mcp*.log`\n- Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n\n\n### Installing via Smithery\nWarning: I am not affiliated with Smithery. I have not tested using it and encourage users to install manually if they can.\n\nTo install Obsidian for Claude Desktop automatically via [Smithery](https://smithery.ai/server/obsidian-mcp):\n\n```bash\nnpx -y @smithery/cli install obsidian-mcp --client claude\n```\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/StevenStavrakis/obsidian-mcp\ncd obsidian-mcp\n\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n```\n\nThen add to your Claude Desktop configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"obsidian\": {\n            \"command\": \"node\",\n            \"args\": [\"<absolute-path-to-obsidian-mcp>/build/main.js\", \"/path/to/your/vault\", \"/path/to/your/vault2\"]\n        }\n    }\n}\n```\n\n## Available Tools\n\n- `read-note` - Read the contents of a note\n- `create-note` - Create a new note\n- `edit-note` - Edit an existing note\n- `delete-note` - Delete a note\n- `move-note` - Move a note to a different location\n- `create-directory` - Create a new directory\n- `search-vault` - Search notes in the vault\n- `add-tags` - Add tags to a note\n- `remove-tags` - Remove tags from a note\n- `rename-tag` - Rename a tag across all notes\n- `manage-tags` - List and organize tags\n- `list-available-vaults` - List all available vaults (helps with multi-vault setups)\n\n## Documentation\n\nAdditional documentation can be found in the `docs` directory:\n\n- `creating-tools.md` - Guide for creating new tools\n- `tool-examples.md` - Examples of using the available tools\n\n## Security\n\nThis server requires access to your Obsidian vault directory. When configuring the server, make sure to:\n\n- Only provide access to your intended vault directory\n- Review tool actions before approving them\n\n## Troubleshooting\n\nCommon issues:\n\n1. **Server not showing up in Claude Desktop**\n   - Verify your configuration file syntax\n   - Make sure the vault path is absolute and exists\n   - Restart Claude Desktop\n\n2. **Permission errors**\n   - Ensure the vault path is readable/writable\n   - Check file permissions in your vault\n\n3. **Tool execution failures**\n   - Check Claude Desktop logs at:\n     - macOS: `~/Library/Logs/Claude/mcp*.log`\n     - Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "StevenStavrakis",
      "name": "StevenStavrakis",
      "url": "https://github.com/StevenStavrakis/obsidian-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/StevenStavrakis/obsidian-mcp",
    "distribution": {
      "type": "npm",
      "package": "obsidian-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "obsidian-mcp",
        "$ENVARG_VAULT_PATHS"
      ],
      "env": {
        "ENVARG_VAULT_PATHS": {
          "description": "List of absolute paths to your Obsidian vaults, one path per line",
          "type": "array",
          "required": true
        }
      }
    }
  },
  {
    "id": "400b8644-73aa-431a-8414-e0873f288fe2",
    "name": "skydeckai/mcp-server-aidd",
    "description": "AiDD MCP Server",
    "fullDescription": "# AiDD MCP Server\n\nAn MCP server that provides a comprehensive set of tools for AI-driven development workflows. Features include file system operations, code analysis using tree-sitter for multiple programming languages, Git operations, code execution, and system information retrieval. Designed to enhance AI's capability to assist in software development tasks.\n\n<a href=\"https://glama.ai/mcp/servers/mpixtij6se\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/mpixtij6se/badge\" alt=\"AiDD Server MCP server\" /></a>\n\n## Installation\n\n```bash\n# Using mcp-get\nnpx @michaellatman/mcp-get@latest install mcp-server-aidd\n\n# Using pip\npip install mcp-server-aidd\n\n# Using uv\nuvx mcp-server-aidd\n```\n\n## Claude Desktop Setup\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"aidd-ai-software-development-utilities\": {\n            \"command\": \"uvx\",\n            \"args\": [\"mcp-server-aidd\"]\n        }\n    }\n}\n```\n\n## Key Features\n\n-   File system operations (read, write, edit, move, delete)\n-   Directory management and traversal\n-   Multi-language code analysis using tree-sitter\n-   Multi-language code execution with safety measures\n-   Git operations (status, diff, commit, branch management)\n-   Security controls with configurable workspace boundaries\n\n## Available Tools\n\n### Basic File Operations\n\n| Tool                | Parameters                          | Returns                                       |\n| ------------------- | ----------------------------------- | --------------------------------------------- |\n| read_file           | path: string                        | File content                                  |\n| read_multiple_files | paths: string[]                     | Multiple file contents with headers           |\n| write_file          | path: string, content: string       | Success confirmation                          |\n| move_file           | source: string, destination: string | Success confirmation                          |\n| delete_file         | path: string                        | Success confirmation                          |\n| get_file_info       | path: string                        | File metadata (size, timestamps, permissions) |\n\nCommon usage:\n\n```bash\n# Read file\naidd-cli --tool read_file --args '{\"path\": \"src/main.py\"}'\n\n# Write file\naidd-cli --tool write_file --args '{\"path\": \"output.txt\", \"content\": \"Hello World\"}'\n\n# Get file info\naidd-cli --tool get_file_info --args '{\"path\": \"src/main.py\"}'\n```\n\n### Complex File Operations\n\n#### edit_file\n\nPattern-based file editing with preview support:\n\n```json\n{\n    \"path\": \"src/main.py\",\n    \"edits\": [\n        {\n            \"oldText\": \"def old_function():\",\n            \"newText\": \"def new_function():\"\n        }\n    ],\n    \"dryRun\": false,\n    \"options\": {\n        \"preserveIndentation\": true,\n        \"normalizeWhitespace\": true,\n        \"partialMatch\": true\n    }\n}\n```\n\nReturns: Diff of changes or preview in dry run mode.\n\n### Directory Operations\n\n| Tool                     | Parameters                                               | Returns                        |\n| ------------------------ | -------------------------------------------------------- | ------------------------------ |\n| get_allowed_directory    | none                                                     | Current allowed directory path |\n| update_allowed_directory | directory: string (absolute path)                        | Success confirmation           |\n| list_directory           | path: string                                             | Directory contents list        |\n| create_directory         | path: string                                             | Success confirmation           |\n| search_files             | pattern: string, path?: string, include_hidden?: boolean | Matching files list            |\n\n#### directory_tree\n\nGenerates complete directory structure:\n\n```json\n{\n    \"path\": \"src\",\n    \"include_hidden\": false\n}\n```\n\nReturns: JSON tree structure of directory contents.\n\nCommon usage:\n\n```bash\n# List directory\naidd-cli --tool list_directory --args '{\"path\": \".\"}'\n\n# Search for Python files\naidd-cli --tool search_files --args '{\"pattern\": \".py\", \"path\": \"src\"}'\n```\n\n### Git Operations\n\n| Tool         | Parameters                             | Returns                          |\n| ------------ | -------------------------------------- | -------------------------------- |\n| git_init     | path: string, initial_branch?: string  | Repository initialization status |\n| git_status   | repo_path: string                      | Working directory status         |\n| git_add      | repo_path: string, files: string[]     | Staging confirmation             |\n| git_reset    | repo_path: string                      | Unstaging confirmation           |\n| git_checkout | repo_path: string, branch_name: string | Branch switch confirmation       |\n\n#### Complex Git Operations\n\n##### git_commit\n\n```json\n{\n    \"repo_path\": \".\",\n    \"message\": \"feat: add new feature\"\n}\n```\n\nReturns: Commit hash and confirmation.\n\n##### git_diff\n\n```json\n{\n    \"repo_path\": \".\",\n    \"target\": \"main\"\n}\n```\n\nReturns: Detailed diff output.\n\n##### git_log\n\n```json\n{\n    \"repo_path\": \".\",\n    \"max_count\": 10\n}\n```\n\nReturns: Array of commit entries with hash, author, date, and message.\n\nCommon usage:\n\n```bash\n# Check status\naidd-cli --tool git_status --args '{\"repo_path\": \".\"}'\n\n# Create and switch to new branch\naidd-cli --tool git_create_branch --args '{\"repo_path\": \".\", \"branch_name\": \"feature/new-branch\"}'\n```\n\n### Code Analysis\n\n#### tree_sitter_map\n\nAnalyzes source code structure:\n\n```json\n{\n    \"path\": \"src\"\n}\n```\n\nReturns:\n\n-   Classes and their methods\n-   Functions and parameters\n-   Module structure\n-   Code organization statistics\n-   Inheritance relationships\n\nSupported Languages:\n\n-   Python (.py)\n-   JavaScript (.js, .jsx, .mjs, .cjs)\n-   TypeScript (.ts, .tsx)\n-   Java (.java)\n-   C++ (.cpp, .hpp, .cc)\n-   Ruby (.rb, .rake)\n-   Go (.go)\n-   Rust (.rs)\n-   PHP (.php)\n-   C# (.cs)\n-   Kotlin (.kt, .kts)\n\n### System Information\n\n| Tool            | Parameters | Returns                      |\n| --------------- | ---------- | ---------------------------- |\n| get_system_info | none       | Comprehensive system details |\n\nReturns:\n\n```json\n{\n  \"working_directory\": \"/path/to/project\",\n  \"system\": {\n    \"os\", \"os_version\", \"architecture\", \"python_version\"\n  },\n  \"wifi_network\": \"MyWiFi\",\n  \"cpu\": {\n    \"physical_cores\", \"logical_cores\", \"total_cpu_usage\"\n  },\n  \"memory\": { \"total\", \"available\", \"used_percentage\" },\n  \"disk\": { \"total\", \"free\", \"used_percentage\" },\n  \"mac_details\": {  // Only present on macOS\n    \"model\": \"Mac mini\",\n    \"chip\": \"Apple M2\",\n    \"serial_number\": \"XXX\"\n  }\n}\n```\n\nProvides essential system information in a clean, readable format.\n\n```bash\n# Get system information\naidd-cli --tool get_system_info\n```\n\n### Code Execution\n\n#### execute_code\n\nExecutes code in various programming languages with safety measures and restrictions.\n\n```json\n{\n    \"language\": \"python\",\n    \"code\": \"print('Hello, World!')\",\n    \"timeout\": 5\n}\n```\n\n**Supported Languages:**\n\n-   Python (python3)\n-   JavaScript (Node.js)\n-   Ruby\n-   PHP\n-   Go\n-   Rust\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| language | string | Yes | Programming language to use |\n| code | string | Yes | Code to execute |\n| timeout | integer | No | Maximum execution time (default: 5s) |\n\n**Example Usage:**\n\n```bash\n# Python example\naidd-cli --tool execute_code --args '{\n    \"language\": \"python\",\n    \"code\": \"print(sum(range(10)))\"\n}'\n\n# JavaScript example\naidd-cli --tool execute_code --args '{\n    \"language\": \"javascript\",\n    \"code\": \"console.log(Array.from({length: 5}, (_, i) => i*2))\"\n}'\n\n# Ruby example\naidd-cli --tool execute_code --args '{\n    \"language\": \"ruby\",\n    \"code\": \"puts (1..5).reduce(:+)\"\n}'\n\n# Go example\naidd-cli --tool execute_code --args '{\n    \"language\": \"go\",\n    \"code\": \"fmt.Println(\\\"Hello, Go!\\\")\"\n}'\n```\n\n**Requirements:**\n\n-   Respective language runtimes must be installed\n-   Commands must be available in system PATH\n-   Proper permissions for temporary file creation\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary code on your system. Always:\n\n1. Review code thoroughly before execution\n2. Understand the code's purpose and expected outcome\n3. Never execute untrusted code\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n#### execute_shell_script\n\nExecutes shell scripts (bash/sh) with safety measures and restrictions.\n\n```json\n{\n    \"script\": \"echo \\\"Current directory:\\\" && pwd\",\n    \"timeout\": 300\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| script | string | Yes | Shell script to execute |\n| timeout | integer | No | Maximum execution time (default: 300s, max: 600s) |\n\n**Example Usage:**\n\n```bash\n# List directory contents with details\naidd-cli --tool execute_shell_script --args '{\n    \"script\": \"ls -la\"\n}'\n\n# Find all Python files recursively\naidd-cli --tool execute_shell_script --args '{\n    \"script\": \"find . -name \\\"*.py\\\" -type f\"\n}'\n\n# Complex script with multiple commands\naidd-cli --tool execute_shell_script --args '{\n    \"script\": \"echo \\\"System Info:\\\" && uname -a && echo \\\"\\nDisk Usage:\\\" && df -h\"\n}'\n```\n\n**Features:**\n\n-   Uses /bin/sh for maximum compatibility across systems\n-   Executes within the allowed directory\n-   Separate stdout and stderr output\n-   Proper error handling and timeout controls\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary shell commands on your system. Always:\n\n1. Review the script thoroughly before execution\n2. Understand the script's purpose and expected outcome\n3. Never execute untrusted scripts\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n## Configuration\n\nConfiguration file: `~/.aidd/config.json`\n\n```json\n{\n    \"allowed_directory\": \"/path/to/workspace\"\n}\n```\n\n## CLI Usage\n\nBasic command structure:\n\n```bash\naidd-cli --tool <tool_name> --args '<json_arguments>'\n\n# List available tools\naidd-cli --list-tools\n\n# Enable debug output\naidd-cli --debug --tool <tool_name> --args '<json_arguments>'\n```\n\n## Debugging\n\nUse MCP Inspector for debugging:\n\n```bash\nnpx @modelcontextprotocol/inspector run\n```\n\n## Security\n\n-   Operations restricted to configured allowed directory\n-   Path traversal prevention\n-   File permission preservation\n-   Safe operation handling\n\n## Upcoming Features\n\n-   GitHub tools:\n    -   PR Description Generator\n    -   Code Review\n    -   Actions Manager\n-   Pivotal Tracker tools:\n    -   Story Generator\n    -   Story Manager\n\n## Development Status\n\nCurrently in active development. Features and API may change.\n\n## License\n\nMIT License - see [LICENSE](LICENSE)\n",
    "publisher": {
      "id": "skydeckai",
      "name": "skydeckai",
      "url": "https://github.com/skydeckai/mcp-server-aidd"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/skydeckai/mcp-server-aidd",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-aidd"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-aidd"
      ],
      "env": {}
    }
  },
  {
    "id": "e20c51d1-ad45-47b7-b3a5-cc3109ecf354",
    "name": "spences10/mcp-jinaai-grounding",
    "description": "mcp-jinaai-grounding",
    "fullDescription": "# mcp-jinaai-grounding\n\nA Model Context Protocol (MCP) server for integrating Jina.ai's\nGrounding API with LLMs. This server provides efficient and\ncomprehensive web content grounding capabilities, optimized for\nenhancing LLM responses with factual, real-time web content.\n\n## Features\n\n- 🌐 Advanced web content grounding through Jina.ai Grounding API\n- 🚀 Real-time content verification and fact-checking\n- 📚 Comprehensive web content analysis\n- 🔄 Clean format optimized for LLMs\n- 🎯 Precise content relevance scoring\n- 🏗️ Built on the Model Context Protocol\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-grounding\": {\n\t\t\t\"command\": \"node\",\n\t\t\t\"args\": [\"-y\", \"mcp-jinaai-grounding\"],\n\t\t\t\"env\": {\n\t\t\t\t\"JINAAI_API_KEY\": \"your-jinaai-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-grounding\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"JINAAI_API_KEY=your-jinaai-api-key npx mcp-jinaai-grounding\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `JINAAI_API_KEY`: Your Jina.ai API key (required)\n\n## API\n\nThe server implements MCP tools for grounding LLM responses with web\ncontent:\n\n### ground_content\n\nGround LLM responses with real-time web content using Jina.ai\nGrounding.\n\nParameters:\n\n- `query` (string, required): The text to ground with web content\n- `no_cache` (boolean, optional): Bypass cache for fresh results.\n  Defaults to false\n- `format` (string, optional): Response format (\"json\" or \"text\").\n  Defaults to \"text\"\n- `token_budget` (number, optional): Maximum number of tokens for this\n  request\n- `browser_locale` (string, optional): Browser locale for rendering\n  content\n- `stream` (boolean, optional): Enable stream mode for large pages.\n  Defaults to false\n- `gather_links` (boolean, optional): Gather all links at the end of\n  response. Defaults to false\n- `gather_images` (boolean, optional): Gather all images at the end of\n  response. Defaults to false\n- `image_caption` (boolean, optional): Caption images in the content.\n  Defaults to false\n- `enable_iframe` (boolean, optional): Extract content from iframes.\n  Defaults to false\n- `enable_shadow_dom` (boolean, optional): Extract content from shadow\n  DOM. Defaults to false\n- `resolve_redirects` (boolean, optional): Follow redirect chains to\n  final URL. Defaults to true\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm run build\n```\n\n4. Run in development mode:\n\n```bash\npnpm run dev\n```\n\n### Publishing\n\n1. Update version in package.json\n2. Build the project:\n\n```bash\npnpm run build\n```\n\n3. Publish to npm:\n\n```bash\npnpm run release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [Jina.ai Grounding API](https://jina.ai)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-jinaai-grounding"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-jinaai-grounding",
    "distribution": {
      "type": "npm",
      "package": "mcp-jinaai-grounding"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-jinaai-grounding"
      ],
      "env": {
        "JINAAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "16416872-03d3-4277-9440-d011acb89258",
    "name": "2b3pro/roam-research-mcp",
    "description": "Roam Research MCP Server",
    "fullDescription": "# Roam Research MCP Server\n\nA Model Context Protocol (MCP) server that provides comprehensive access to Roam Research's API functionality. This server enables AI assistants like Claude to interact with your Roam Research graph through a standardized interface. (A WORK-IN-PROGRESS, personal project not officially endorsed by Roam Research)\n\n## Installation\n\nYou can install the package globally:\n\n```bash\nnpm install -g roam-research-mcp\n```\n\nOr clone the repository and build from source:\n\n```bash\ngit clone https://github.com/2b3pro/roam-research-mcp.git\ncd roam-research-mcp\nnpm install\nnpm run build\n```\n\n## Features\n\nThe server provides powerful tools for interacting with Roam Research:\n\n- Environment variable handling with .env support\n- Comprehensive input validation\n- Case-insensitive page title matching\n- Recursive block reference resolution\n- Markdown parsing and conversion\n- Daily page integration\n- Detailed debug logging\n- Efficient batch operations\n- Hierarchical outline creation\n\n1. `roam_fetch_page_by_title`: Fetch and read a page's content by title, recursively resolving block references up to 4 levels deep\n2. `roam_create_page`: Create new pages with optional content\n3. `roam_create_block`: Create new blocks in a page (defaults to today's daily page)\n4. `roam_import_markdown`: Import nested markdown content under specific blocks\n5. `roam_add_todo`: Add multiple todo items to today's daily page with checkbox syntax\n6. `roam_create_outline`: Create hierarchical outlines with proper nesting and structure\n7. `roam_search_block_refs`: Search for block references within pages or across the graph\n8. `roam_search_hierarchy`: Navigate and search through block parent-child relationships\n9. `roam_find_pages_modified_today`: Find all pages that have been modified since midnight today\n10. `roam_search_by_text`: Search for blocks containing specific text across all pages or within a specific page\n11. `roam_update_block`: Update block content with direct text or pattern-based transformations\n12. `roam_search_by_date`: Search for blocks and pages based on creation or modification dates\n13. `roam_search_for_tag`: Search for blocks containing specific tags with optional filtering by nearby tags\n14. `roam_remember`: Store and categorize memories or information with automatic tagging\n15. `roam_recall`: Recall memories of blocks marked with tag MEMORIES_TAG (see below) or blocks on page title of the same name\n16. `roam_datomic_query`: Execute custom Datalog queries on the Roam graph for advanced data retrieval and analysis\n\n## Setup\n\n1. Create a [Roam Research API token](https://x.com/RoamResearch/status/1789358175474327881):\n\n   - Go to your graph settings\n   - Navigate to the \"API tokens\" section (Settings > \"Graph\" tab > \"API Tokens\" section and click on the \"+ New API Token\" button)\n   - Create a new token\n\n2. Configure the environment variables:\n   You have two options for configuring the required environment variables:\n\n   Option 1: Using a .env file (Recommended for development)\n   Create a `.env` file in the roam-research directory:\n\n   ```\n   ROAM_API_TOKEN=your-api-token\n   ROAM_GRAPH_NAME=your-graph-name\n   MEMORIES_TAG='#[[LLM/Memories]]'\n   ```\n\n   Option 2: Using MCP settings (Alternative method)\n   Add the configuration to your MCP settings file:\n\n   - For Cline (`~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`):\n   - For Claude desktop app (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"roam-research\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/roam-research/build/index.js\"],\n         \"env\": {\n           \"ROAM_API_TOKEN\": \"your-api-token\",\n           \"ROAM_GRAPH_NAME\": \"your-graph-name\",\n           \"MEMORIES_TAG\": \"#[[LLM/Memories]]\"\n         }\n       }\n     }\n   }\n   ```\n\n   Note: The server will first try to load from .env file, then fall back to environment variables from MCP settings.\n\n3. Build the server:\n   ```bash\n   cd roam-research\n   npm install\n   npm run build\n   ```\n\n## Usage\n\n### Fetch Page By Title\n\nFetch and read a page's content with resolved block references:\n\n```typescript\nuse_mcp_tool roam-research roam_fetch_page_by_title {\n  \"title\": \"Example Page\"\n}\n```\n\nReturns the page content as markdown with:\n\n- Complete hierarchical structure\n- Block references recursively resolved (up to 4 levels deep)\n- Proper indentation for nesting levels\n- Full markdown formatting\n\n### Create Page\n\nCreate a new page with optional content:\n\n```typescript\nuse_mcp_tool roam-research roam_create_page {\n  \"title\": \"New Page\",\n  \"content\": \"Initial content for the page\"\n}\n```\n\nReturns the created page's UID on success.\n\n### Create Block\n\nAdd a new block to a page (defaults to today's daily page if neither page_uid nor title provided):\n\n```typescript\nuse_mcp_tool roam-research roam_create_block {\n  \"content\": \"Block content\",\n  \"page_uid\": \"optional-target-page-uid\",\n  \"title\": \"optional-target-page-title\"\n}\n```\n\nYou can specify either:\n\n- `page_uid`: Direct reference to target page\n- `title`: Name of target page (will be created if it doesn't exist)\n- Neither: Block will be added to today's daily page\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"block_uid\": \"created-block-uid\",\n  \"parent_uid\": \"parent-page-uid\"\n}\n```\n\n### Create Outline\n\nCreate a hierarchical outline with proper nesting and structure:\n\n```typescript\nuse_mcp_tool roam-research roam_create_outline {\n  \"outline\": [\n    {\n      \"text\": \"I. Top Level\",\n      \"level\": 1\n    },\n    {\n      \"text\": \"A. Second Level\",\n      \"level\": 2\n    },\n    {\n      \"text\": \"1. Third Level\",\n      \"level\": 3\n    }\n  ],\n  \"page_title_uid\": \"optional-target-page\",\n  \"block_text_uid\": \"optional-header-text\"\n}\n```\n\nFeatures:\n\n- Create complex outlines with up to 10 levels of nesting\n- Validate outline structure and content\n- Maintain proper parent-child relationships\n- Optional header block for the outline\n- Defaults to today's daily page if no page specified\n- Efficient batch operations for creating blocks\n\nParameters:\n\n- `outline`: Array of outline items, each with:\n  - `text`: Content of the outline item (required)\n  - `level`: Nesting level (1-10, required)\n- `page_title_uid`: Target page title or UID (optional, defaults to today's page)\n- `block_text_uid`: Header text for the outline (optional)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"page_uid\": \"target-page-uid\",\n  \"parent_uid\": \"header-block-uid\",\n  \"created_uids\": [\"uid1\", \"uid2\", ...]\n}\n```\n\n### Add Todo Items\n\nAdd one or more todo items to today's daily page:\n\n```typescript\nuse_mcp_tool roam-research roam_add_todo {\n  \"todos\": [\n    \"First todo item\",\n    \"Second todo item\",\n    \"Third todo item\"\n  ]\n}\n```\n\nFeatures:\n\n- Adds todos with Roam checkbox syntax (`{{TODO}} todo text`)\n- Supports adding multiple todos in a single operation\n- Uses batch actions for efficiency when adding >10 todos\n- Automatically creates today's page if it doesn't exist\n- Adds todos as top-level blocks in sequential order\n\n### Import Nested Markdown\n\nImport nested markdown content under a specific block:\n\n```typescript\nuse_mcp_tool roam-research roam_import_markdown {\n  \"content\": \"- Item 1\\n  - Subitem A\\n  - Subitem B\\n- Item 2\",\n  \"page_uid\": \"optional-page-uid\",\n  \"page_title\": \"optional-page-title\",\n  \"parent_uid\": \"optional-parent-block-uid\",\n  \"parent_string\": \"optional-exact-block-content\",\n  \"order\": \"first\"\n}\n```\n\nFeatures:\n\n- Import content under specific blocks:\n  - Find parent block by UID or exact string match\n  - Locate blocks within specific pages by title or UID\n  - Defaults to today's page if no page specified\n- Control content placement:\n  - Add as first or last child of parent block\n  - Preserve hierarchical structure\n  - Efficient batch operations for nested content\n- Comprehensive return value:\n  ```json\n  {\n    \"success\": true,\n    \"page_uid\": \"target-page-uid\",\n    \"parent_uid\": \"parent-block-uid\",\n    \"created_uids\": [\"uid1\", \"uid2\", ...]\n  }\n  ```\n\nParameters:\n\n- `content`: Nested markdown content to import\n- `page_uid`: UID of the page containing the parent block\n- `page_title`: Title of the page containing the parent block (ignored if page_uid provided)\n- `parent_uid`: UID of the parent block to add content under\n- `parent_string`: Exact string content of the parent block (must provide either page_uid or page_title)\n- `order`: Where to add the content (\"first\" or \"last\", defaults to \"first\")\n\n### Search Block References\n\nSearch for block references within pages or across the entire graph:\n\n```typescript\nuse_mcp_tool roam-research roam_search_block_refs {\n  \"block_uid\": \"optional-block-uid\",\n  \"page_title_uid\": \"optional-page-title-or-uid\"\n}\n```\n\nFeatures:\n\n- Find all references to a specific block\n- Search for any block references within a page\n- Search across the entire graph\n- Supports both direct and indirect references\n- Includes block content and location context\n\nParameters:\n\n- `block_uid`: UID of the block to find references to (optional)\n- `page_title_uid`: Title or UID of the page to search in (optional)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"block_uid\": \"referenced-block-uid\",\n      \"content\": \"Block content with ((reference))\",\n      \"page_title\": \"Page containing reference\"\n    }\n  ],\n  \"message\": \"Found N block(s) referencing...\"\n}\n```\n\n### Search By Text\n\nSearch for blocks containing specific text across all pages or within a specific page:\n\n```typescript\nuse_mcp_tool roam-research roam_search_by_text {\n  \"text\": \"search text\",\n  \"page_title_uid\": \"optional-page-title-or-uid\",\n  \"case_sensitive\": true\n}\n```\n\nFeatures:\n\n- Search for any text across all blocks in the graph\n- Optional page-scoped search\n- Case-sensitive or case-insensitive search\n- Returns block content with page context\n- Efficient text matching using Datalog queries\n\nParameters:\n\n- `text`: The text to search for (required)\n- `page_title_uid`: Title or UID of the page to search in (optional)\n- `case_sensitive`: Whether to perform a case-sensitive search (optional, default: true to match Roam's native behavior)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"block_uid\": \"matching-block-uid\",\n      \"content\": \"Block content containing search text\",\n      \"page_title\": \"Page containing block\"\n    }\n  ],\n  \"message\": \"Found N block(s) containing \\\"search text\\\"\"\n}\n```\n\n### Update Block Content\n\nUpdate a block's content using either direct text replacement or pattern-based transformations:\n\n```typescript\nuse_mcp_tool roam-research roam_update_block {\n  \"block_uid\": \"target-block-uid\",\n  \"content\": \"New block content\"\n}\n```\n\nOr use pattern-based transformation:\n\n```typescript\nuse_mcp_tool roam-research roam_update_block {\n  \"block_uid\": \"target-block-uid\",\n  \"transform_pattern\": {\n    \"find\": \"\\\\bPython\\\\b\",\n    \"replace\": \"[[Python]]\",\n    \"global\": true\n  }\n}\n```\n\nFeatures:\n\n- Two update modes:\n  - Direct content replacement\n  - Pattern-based transformation using regex\n- Verify block existence before updating\n- Return updated content in response\n- Support for global or single-match replacements\n- Preserve block relationships and metadata\n\nParameters:\n\n- `block_uid`: UID of the block to update (required)\n- `content`: New content for the block (if using direct replacement)\n- `transform_pattern`: Pattern for transforming existing content:\n  - `find`: Text or regex pattern to find\n  - `replace`: Text to replace with\n  - `global`: Whether to replace all occurrences (default: true)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"content\": \"Updated block content\"\n}\n```\n\n### Search For Tags\n\nSearch for blocks containing specific tags with optional filtering by nearby tags:\n\n```typescript\nuse_mcp_tool roam-research roam_search_for_tag {\n  \"primary_tag\": \"Project/Tasks\",\n  \"page_title_uid\": \"optional-page-title-or-uid\",\n  \"near_tag\": \"optional-secondary-tag\",\n  \"case_sensitive\": true\n}\n```\n\nFeatures:\n\n- Search for blocks containing specific tags\n- Optional filtering by presence of another tag\n- Page-scoped or graph-wide search\n- Case-sensitive or case-insensitive search\n- Returns block content with page context\n- Efficient tag matching using Datalog queries\n\nParameters:\n\n- `primary_tag`: The main tag to search for (required)\n- `page_title_uid`: Title or UID of the page to search in (optional)\n- `near_tag`: Another tag to filter results by (optional)\n- `case_sensitive`: Whether to perform case-sensitive search (optional, default: true to match Roam's native behavior)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"block_uid\": \"matching-block-uid\",\n      \"content\": \"Block content containing #[[primary_tag]]\",\n      \"page_title\": \"Page containing block\"\n    }\n  ],\n  \"message\": \"Found N block(s) referencing \\\"primary_tag\\\"\"\n}\n```\n\n### Remember Information\n\nStore memories or important information with automatic tagging and categorization:\n\n```typescript\nuse_mcp_tool roam-research roam_remember {\n  \"memory\": \"Important information to remember\",\n  \"categories\": [\"Work\", \"Project/Alpha\"]\n}\n```\n\nFeatures:\n\n- Store information with #[[LLM/Memories]] tag\n- Add optional category tags for organization\n- Automatically adds to today's daily page\n- Supports multiple categories per memory\n- Easy retrieval using roam_search_for_tag\n- Maintains chronological order of memories\n\nParameters:\n\n- `memory`: The information to remember (required)\n- `categories`: Optional array of categories to tag the memory with\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"block_uid\": \"created-block-uid\",\n  \"content\": \"Memory content with tags\"\n}\n```\n\n### Search By Date\n\nSearch for blocks and pages based on creation or modification dates:\n\n```typescript\nuse_mcp_tool roam-research roam_search_by_date {\n  \"start_date\": \"2025-01-01\",\n  \"end_date\": \"2025-01-31\",\n  \"type\": \"modified\",\n  \"scope\": \"blocks\",\n  \"include_content\": true\n}\n```\n\nFeatures:\n\n- Search by creation date, modification date, or both\n- Filter blocks, pages, or both\n- Optional date range with start and end dates\n- Include or exclude block/page content in results\n- Sort results by timestamp\n- Efficient date-based filtering using Datalog queries\n\nParameters:\n\n- `start_date`: Start date in ISO format (YYYY-MM-DD) (required)\n- `end_date`: End date in ISO format (YYYY-MM-DD) (optional)\n- `type`: Whether to search by 'created', 'modified', or 'both' (required)\n- `scope`: Whether to search 'blocks', 'pages', or 'both' (required)\n- `include_content`: Whether to include the content of matching blocks/pages (optional, default: true)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"uid\": \"block-or-page-uid\",\n      \"type\": \"block\",\n      \"time\": 1704067200000,\n      \"content\": \"Block or page content\",\n      \"page_title\": \"Page title (for blocks)\"\n    }\n  ],\n  \"message\": \"Found N matches for the given date range and criteria\"\n}\n```\n\n### Find Pages Modified Today\n\nFind all pages that have been modified since midnight today:\n\n```typescript\nuse_mcp_tool roam-research roam_find_pages_modified_today {}\n```\n\nFeatures:\n\n- Tracks all modifications made to pages since midnight\n- Detects changes at any level in the block hierarchy\n- Returns unique list of modified page titles\n- Includes count of modified pages\n- No parameters required\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"pages\": [\"Page 1\", \"Page 2\"],\n  \"message\": \"Found 2 page(s) modified today\"\n}\n```\n\n### Execute Datomic Queries\n\nExecute custom Datalog queries on your Roam graph for advanced data retrieval and analysis:\n\n```typescript\nuse_mcp_tool roam-research roam_datomic_query {\n  \"query\": \"[:find (count ?p)\\n :where [?p :node/title]]\",\n  \"inputs\": []\n}\n```\n\nFeatures:\n\n- Direct access to Roam's query engine\n- Support for all Datalog query features:\n  - Complex pattern matching\n  - Aggregation functions (count, sum, max, min, avg, distinct)\n  - String operations (includes?, starts-with?, ends-with?)\n  - Logical operations (<, >, <=, >=, =, not=)\n  - Rules for recursive queries\n- Case-sensitive and case-insensitive search capabilities\n- Efficient querying across the entire graph\n\nParameters:\n\n- `query`: The Datalog query to execute (required)\n- `inputs`: Optional array of input parameters for the query\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"content\": \"[result data]\",\n      \"block_uid\": \"\",\n      \"page_title\": \"\"\n    }\n  ],\n  \"message\": \"Query executed successfully. Found N results.\"\n}\n```\n\nExample Queries:\n\n1. Count all pages:\n\n```clojure\n[:find (count ?p)\n :where [?p :node/title]]\n```\n\n2. Case-insensitive text search:\n\n```clojure\n[:find ?string ?title\n :where\n [?b :block/string ?string]\n [(clojure.string/lower-case ?string) ?lower]\n [(clojure.string/includes? ?lower \"search term\")]\n [?b :block/page ?p]\n [?p :node/title ?title]]\n```\n\n3. Find blocks modified after a date:\n\n```clojure\n[:find ?block_ref ?string\n :in $ ?start_of_day\n :where\n [?b :edit/time ?time]\n [(> ?time ?start_of_day)]\n [?b :block/uid ?block_ref]\n [?b :block/string ?string]]\n```\n\nSee Roam_Research_Datalog_Cheatsheet.md for more query examples and syntax documentation.\n\n### Search Block Hierarchy\n\nNavigate and search through block parent-child relationships:\n\n```typescript\nuse_mcp_tool roam-research roam_search_hierarchy {\n  \"parent_uid\": \"optional-parent-block-uid\",\n  \"child_uid\": \"optional-child-block-uid\",\n  \"page_title_uid\": \"optional-page-title-or-uid\",\n  \"max_depth\": 3\n}\n```\n\nFeatures:\n\n- Search up or down the block hierarchy\n- Find children of a specific block\n- Find parents of a specific block\n- Configure search depth (1-10 levels)\n- Optional page scope filtering\n- Includes depth information for each result\n\nParameters:\n\n- `parent_uid`: UID of the block to find children of (required if searching down)\n- `child_uid`: UID of the block to find parents of (required if searching up)\n- `page_title_uid`: Title or UID of the page to search in (optional)\n- `max_depth`: How many levels deep to search (optional, default: 1, max: 10)\n\nReturns:\n\n```json\n{\n  \"success\": true,\n  \"matches\": [\n    {\n      \"block_uid\": \"related-block-uid\",\n      \"content\": \"Block content\",\n      \"depth\": 2,\n      \"page_title\": \"Page containing block\"\n    }\n  ],\n  \"message\": \"Found N block(s) as children/parents...\"\n}\n```\n\n## Error Handling\n\nThe server provides comprehensive error handling for common scenarios:\n\n- Configuration errors:\n  - Missing API token or graph name\n  - Invalid environment variables\n- API errors:\n  - Authentication failures\n  - Invalid requests\n  - Failed operations\n- Tool-specific errors:\n  - Page not found (with case-insensitive search)\n  - Block not found by string match\n  - Invalid markdown format\n  - Missing required parameters\n  - Invalid outline structure or content\n\nEach error response includes:\n\n- Standard MCP error code\n- Detailed error message\n- Suggestions for resolution when applicable\n\n## Development\n\n### Building\n\nTo build the server:\n\n```bash\nnpm install\nnpm run build\n```\n\nThis will:\n\n1. Install all required dependencies\n2. Compile TypeScript to JavaScript\n3. Make the output file executable\n\nYou can also use `npm run watch` during development to automatically recompile when files change.\n\n### Testing with MCP Inspector\n\nThe MCP Inspector is a tool that helps test and debug MCP servers. To test the server:\n\n```bash\n# Inspect with npx:\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\nThis will:\n\n1. Start the server in inspector mode\n2. Provide an interactive interface to:\n   - List available tools and resources\n   - Execute tools with custom parameters\n   - View tool responses and error handling\n\n## License\n\nMIT License\n",
    "publisher": {
      "id": "2b3pro",
      "name": "2b3pro",
      "url": "https://github.com/2b3pro/roam-research-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/2b3pro/roam-research-mcp",
    "distribution": {
      "type": "npm",
      "package": "roam-research-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "roam-research-mcp"
      ],
      "env": {
        "ROAM_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ROAM_GRAPH_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MEMORIES_TAG": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "0bea0a35-e287-47f5-ab8f-ecf01f9c87c4",
    "name": "makafeli/n8n-workflow-builder",
    "description": "n8n Workflow Builder MCP Server",
    "fullDescription": "# n8n Workflow Builder MCP Server\n\nA Model Context Protocol (MCP) server for programmatically creating and managing n8n workflows. This server allows you to interact with your n8n instance directly through the n8n API, enabling you to create, update, activate, deactivate, get, and delete workflows.\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation and Configuration](#installation-and-configuration)\n  - [NPX (Recommended)](#npx-recommended)\n  - [NPM (Manual)](#npm-manual)\n- [Usage](#usage)\n  - [`create_workflow`](#create_workflow)\n  - [`create_workflow_and_activate`](#create_workflow_and_activate)\n  - [`update_workflow`](#update_workflow)\n  - [`activate_workflow`](#activate_workflow)\n  - [`deactivate_workflow`](#deactivate_workflow)\n  - [`get_workflow`](#get_workflow)\n  - [`delete_workflow`](#delete_workflow)\n- [Troubleshooting](#troubleshooting)\n- [Contributing](#contributing)\n- [Security Considerations](#security-considerations)\n- [License](#license)\n\n## Features\n\n- Create n8n workflows with nodes and connections.\n- Validate workflow specifications.\n- Export complete workflow configurations.\n- Interact directly with n8n instances via the n8n API.\n- Activate and deactivate workflows remotely.\n- Update existing workflows.\n- Get and delete workflows.\n\n## Installation and Configuration\n\nThis server can be installed and configured in two ways: via NPX (recommended) or manually using NPM.\n\n### NPX (Recommended)\n\nThe easiest way to use the `n8n-workflow-builder` is via NPX. This method doesn't require you to clone the repository or install dependencies manually. You only need to add the server to your MCP configuration file.\n\n1.  **Add to MCP Configuration:**\n\n    Open your MCP configuration file (usually `cline_mcp_settings.json`) and add the following entry to the `mcpServers` section:\n\n```json\n    {\n      \"mcpServers\": {\n        \"n8n-workflow-builder\": {\n          \"command\": \"npx\",\n          \"args\": [\"@makafeli/n8n-workflow-builder\"],\n          \"env\": {\n            \"N8N_HOST\": \"http://your-n8n-instance:5678\",\n            \"N8N_API_KEY\": \"your-n8n-api-key\"\n          }\n        }\n      }\n    }\n```\n\n    -   **`N8N_HOST`:** The base URL of your n8n instance (e.g., `http://localhost:5678` or `https://your-n8n-cloud-instance.app.n8n.cloud`).  Include the protocol (`http://` or `https://`) and port if not the default (80/443).\n    -   **`N8N_API_KEY`:** Your n8n API key. Obtain this from your n8n instance: **Settings** > **n8n API** > **Create an API key**.  **Keep this key secure!**\n\n    That's it! The MCP client will automatically handle running the server via NPX when needed.\n\n### NPM (Manual)\n\nIf you prefer to install the server manually, follow these steps:\n\n1.  **Prerequisites:**\n\n    -   Node.js and npm installed.\n    -   Access to an n8n instance (self-hosted or n8n Cloud).\n    -   An API key for your n8n instance. See [n8n API Authentication](https://docs.n8n.io/api/authentication/).\n\n2.  **Clone the repository:**\n\n    ```bash\n    git clone https://github.com/makafeli/n8n-workflow-builder.git\n    cd n8n-workflow-builder\n    ```\n\n3.  **Install dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n4.  **Add to MCP Configuration:**\n\n   Open your MCP configuration file (usually `cline_mcp_settings.json`) and add the following entry to the `mcpServers` section:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"n8n-workflow-builder\": {\n          \"command\": \"node\",\n          \"args\": [\"/root/n8n-workflow-builder/src/index.js\"],\n          \"env\": {\n            \"N8N_HOST\": \"http://your-n8n-instance:5678\",\n            \"N8N_API_KEY\": \"your-n8n-api-key\"\n          }\n        }\n      }\n    }\n    ```\n\n    -   **`command`:**  The command to run the server (`node`).\n    -   **`args`:**  The path to the `index.cjs` file.  **Important:**  Use the correct path to `src/index.cjs`.\n    -   **`env`:**\n        -   **`N8N_HOST`:** The base URL of your n8n instance (see NPX instructions above).\n        -   **`N8N_API_KEY`:** Your n8n API key (see NPX instructions above).\n\n5.  **Start the server:**\n\n    ```bash\n    npm start\n    ```\n\n    **Note:** After updating the server, you need to restart it for the changes to take effect.\n\n## Usage\n\nThe server provides the following tools, which can be accessed through an MCP client (like Claude Desktop with the Smithery integration). All tools require that you have configured the `N8N_HOST` and `N8N_API_KEY` environment variables (see [Configuration](#installation-and-configuration)).\n\n### `create_workflow`\n\nCreates a new n8n workflow, but does *not* activate it.\n\n**Input:**\n\n```json\n{\n  \"nodes\": [\n    {\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"name\": \"HTTP Request\",\n      \"parameters\": {\n        \"url\": \"https://example.com\",\n        \"method\": \"GET\"\n      }\n    }\n  ],\n  \"connections\": []\n}\n```\n\n-   `nodes`: An array of node objects. Each node *must* have a `type` (the n8n node type) and a `name`.  `parameters` are optional and depend on the specific node type. Refer to the [n8n node documentation](https://docs.n8n.io/integrations/builtin/core-nodes/) for details on node types and their parameters.\n-   `connections`: An array of connection objects, defining how nodes are connected.  Each connection *must* have a `source` (the name of the source node) and a `target` (the name of the target node). `sourceOutput` and `targetInput` are optional and default to 0.\n\n**Example Output:**\n\n```json\n{\n    \"id\": \"newly-created-workflow-id\",\n    \"name\": \"\",\n    \"active\": false,\n    \"nodes\": [\n        {\n            \"parameters\": {\n                \"url\": \"https://example.com\",\n                \"method\": \"GET\"\n            },\n            \"id\": \"uuid-generated-by-n8n\",\n            \"name\": \"HTTP Request\",\n            \"type\": \"n8n-nodes-base.httpRequest\",\n            \"typeVersion\": 1,\n            \"position\": [\n                100,\n                100\n            ]\n        }\n    ],\n    \"connections\": {},\n    \"createdAt\": \"2024-02-09T03:12:01.838Z\",\n    \"updatedAt\": \"2024-02-09T03:12:01.838Z\"\n}\n```\nThe output is the full workflow object as returned by the n8n API, including the newly assigned `id`.\n\n### `create_workflow_and_activate`\n\nCreates a new n8n workflow and immediately activates it.\n\n**Input:** Same as `create_workflow`.\n\n**Example Output:** Same as `create_workflow`, but `active` will be `true`.\n\n### `update_workflow`\n\nUpdates an existing n8n workflow.\n\n**Input:**\n\n```json\n{\n  \"id\": \"existing-workflow-id\",\n  \"nodes\": [\n    {\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"name\": \"Updated HTTP Request\",\n      \"parameters\": {\n        \"url\": \"https://example.com/updated\",\n        \"method\": \"POST\"\n      }\n    }\n  ],\n  \"connections\": []\n}\n```\n\n-   `id`: The ID of the workflow to update (required).\n-   `nodes` and `connections`:  Same as `create_workflow`.  These will *replace* the existing nodes and connections.\n\n**Example Output:** The updated workflow object, as returned by the n8n API.\n\n### `activate_workflow`\n\nActivates an existing n8n workflow.\n\n**Input:**\n\n```json\n{\n  \"id\": \"existing-workflow-id\"\n}\n```\n\n-   `id`: The ID of the workflow to activate (required).\n\n**Example Output:** The updated workflow object, with `active` set to `true`.\n\n### `deactivate_workflow`\n\nDeactivates an existing n8n workflow.\n\n**Input:**\n\n```json\n{\n  \"id\": \"existing-workflow-id\"\n}\n```\n-   `id`: The ID of the workflow to deactivate (required).\n\n**Example Output:** The updated workflow object, with `active` set to `false`.\n\n### `get_workflow`\nRetrieves an existing n8n workflow by its ID.\n\n**Input:**\n```json\n{\n    \"id\": \"existing-workflow-id\"\n}\n```\n- `id`: The ID of the workflow to get.\n\n**Example Output:**\nThe complete workflow object as returned by the n8n API.\n\n### `delete_workflow`\nDeletes a workflow by its ID.\n\n**Input:**\n```json\n{\n    \"id\": \"existing-workflow-id\"\n}\n```\n- `id`: The ID of the workflow to delete.\n\n**Example Output:**\nThe response from the n8n API confirming deletion (usually an empty object or a success message).\n\n## Troubleshooting\n\n-   **`N8N_API_KEY environment variable not set.`:**  You'll see a warning in the server's output if the `N8N_API_KEY` is not set.  Make sure you've set this environment variable in your MCP configuration.\n-   **`n8n API Error: Unauthorized`:** This usually means your `N8N_API_KEY` is incorrect or expired.  Double-check the key in your n8n instance settings and update your MCP configuration accordingly.\n-   **`n8n API Error: connect ECONNREFUSED ...`:** This means the server couldn't connect to your n8n instance.  Make sure:\n    -   Your n8n instance is running.\n    -   The `N8N_HOST` environment variable is set correctly, including the correct protocol (http/https) and port.\n    -   There are no firewalls blocking the connection between the MCP server and your n8n instance.\n-   **`Invalid workflow specification`:** This error means the input you provided to one of the tools (like `create_workflow` or `update_workflow`) doesn't match the expected format.  Make sure you're providing a valid `nodes` array, and that each node has a `type` and `name`. Refer to the [Usage](#usage) section for examples.\n- **`Workflow creation failed: ...`:** This is a general error that can occur during workflow creation. The error message should provide more details. Common causes include invalid node types, incorrect node parameters, or issues with your n8n instance.\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute to this project, please follow these guidelines:\n\n1.  Fork the repository.\n2.  Create a new branch for your feature or bug fix.\n3.  Make your changes, ensuring that your code is well-documented and follows the existing coding style.\n4.  Write unit tests for your changes. (Currently, there are no tests, so this is an area for improvement).\n5.  Submit a pull request.\n\n## Security Considerations\n\n-   **API Key Security:** Your `N8N_API_KEY` gives full access to your n8n instance.  **Treat it like a password!**  Do not commit it to version control.  Store it securely in your MCP configuration file, and ensure that this file has appropriate permissions.\n-   **Input Validation:** The server performs basic input validation to prevent obviously invalid workflow specifications. However, it's important to be aware that malicious users could potentially craft workflows that exploit vulnerabilities in n8n nodes.  Be cautious about the source of workflow specifications you use with this server.\n-   **Network Security:** Ensure that communication between the MCP server and your n8n instance is secure, especially if your n8n instance is exposed to the internet. Use HTTPS if possible.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "makafeli",
      "name": "makafeli",
      "url": "https://github.com/makafeli/n8n-workflow-builder"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/makafeli/n8n-workflow-builder",
    "distribution": {
      "type": "npm",
      "package": "@makafeli/n8n-workflow-builder"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@makafeli/n8n-workflow-builder"
      ],
      "env": {
        "N8N_HOST": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "N8N_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "4d2219c7-a8e4-4e99-91e3-090d791efaa0",
    "name": "cyanheads/toolkit-mcp-server",
    "description": "toolkit-mcp-server",
    "fullDescription": "# toolkit-mcp-server\n\nA Model Context Protocol server providing LLM Agents with system utilities and tools, including IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.\n\n## Model Context Protocol\n\nThe Model Context Protocol (MCP) enables communication between:\n\n- **Clients**: Claude Desktop, IDEs, and other MCP-compatible clients\n- **Servers**: Tools and resources for task management and automation\n- **LLM Agents**: AI models that leverage the server's capabilities\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Tools](#tools)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n\n### Network & Geolocation\n- IP geolocation with intelligent caching\n- Network connectivity testing\n- Ping and traceroute utilities\n- Public IP detection\n- Rate limiting (45 requests/minute)\n\n### System Utilities\n- System information retrieval\n- Resource monitoring\n- Load average tracking\n- Network interface details\n\n### Security Tools\n- Cryptographic hash generation (MD5, SHA-1, SHA-256, SHA-512)\n- Constant-time hash comparison\n- UUID generation\n\n### Generator Tools\n- QR code generation\n  - Terminal output\n  - SVG format\n  - Base64 encoded images\n\n## Installation\n\n```bash\n# Using npm (recommended)\nnpm install @cyanheads/toolkit-mcp-server\n\n# Or install from source\ngit clone git@github.com:cyanheads/toolkit-mcp-server.git\ncd toolkit-mcp-server\nnpm install\nnpm run build\n```\n\n## Configuration\n\nAdd to your MCP client settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"toolkit\": {\n      \"command\": \"node\",\n      \"args\": [\"node_modules/@cyanheads/toolkit-mcp-server/build/index.js\"],\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Network Operations\n```typescript\n// Get geolocation data\nconst geo = await mcp.use('toolkit-mcp-server', 'geolocate', {\n  query: '8.8.8.8'\n});\n\n// Check connectivity\nconst conn = await mcp.use('toolkit-mcp-server', 'checkConnectivity', {\n  host: 'example.com',\n  port: 443\n});\n```\n\n### System Operations\n```typescript\n// Get system information\nconst sysInfo = await mcp.use('toolkit-mcp-server', 'getSystemInfo', {});\n\n// Get load average\nconst load = await mcp.use('toolkit-mcp-server', 'getLoadAverage', {});\n```\n\n### Security Operations\n```typescript\n// Generate hash\nconst hash = await mcp.use('toolkit-mcp-server', 'hashData', {\n  input: 'test data',\n  algorithm: 'sha256'\n});\n\n// Generate UUID\nconst uuid = await mcp.use('toolkit-mcp-server', 'generateUUID', {});\n```\n\n### Generator Operations\n```typescript\n// Generate QR code\nconst qr = await mcp.use('toolkit-mcp-server', 'generateQRCode', {\n  data: 'https://example.com',\n  type: 'svg'\n});\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nApache License 2.0. See [LICENSE](LICENSE) for more information.\n\n---\n\n<div align=\"center\">\nBuilt with the Model Context Protocol\n</div>",
    "publisher": {
      "id": "cyanheads",
      "name": "cyanheads",
      "url": "https://github.com/cyanheads/toolkit-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cyanheads/toolkit-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@cyanheads/toolkit-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@cyanheads/toolkit-mcp-server"
      ],
      "env": {
        "NODE_ENV": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "a1f79fb1-dd8a-4175-a93d-d414b850cc34",
    "name": "blazickjp/arxiv-mcp-server",
    "description": "ArXiv MCP Server",
    "fullDescription": "# ArXiv MCP Server\n\n> 🔍 Enable AI assistants to search and access arXiv papers through a simple MCP interface.\n\nThe ArXiv MCP Server provides a bridge between AI assistants and arXiv's research repository through the Message Control Protocol (MCP). It allows AI models to search for papers and access their content in a programmatic way.\n\n## ✨ Core Features\n\n- 🔎 **Paper Search**: Query arXiv papers with filters for date ranges and categories\n- 📄 **Paper Access**: Download and read paper content\n- 📋 **Paper Listing**: View all downloaded papers\n- 🗃️ **Local Storage**: Papers are saved locally for faster access\n- 📝 **Prompts**: A Set of Research Prompts\n\n## 🚀 Quick Start\n\n### Installing via Smithery\n\nTo install ArXiv Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/arxiv-mcp-server):\n\n```bash\nnpx -y @smithery/cli install arxiv-mcp-server --client claude\n```\n\n### Installing Manually\nInstall using uv:\n\n```bash\nuv tool install arxiv-mcp-server\n```\n\nFor development:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/blazickjp/arxiv-mcp-server.git\ncd arxiv-mcp-server\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\n\n# Install with test dependencies\nuv pip install -e \".[test]\"\n```\n\n### 🔌 MCP Integration\n\nAdd this configuration to your MCP client config file:\n\n```json\n{\n    \"mcpServers\": {\n        \"arxiv-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"tool\",\n                \"run\",\n                \"arxiv-mcp-server\",\n                \"--storage-path\", \"/path/to/paper/storage\"\n            ]\n        }\n    }\n}\n```\n\nFor Development:\n\n```json\n{\n    \"mcpServers\": {\n        \"arxiv-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"path/to/cloned/arxiv-mcp-server\",\n                \"run\",\n                \"arxiv-mcp-server\",\n                \"--storage-path\", \"/path/to/paper/storage\"\n            ]\n        }\n    }\n}\n```\n\n## 💡 Available Tools\n\nThe server provides four main tools:\n\n### 1. Paper Search\nSearch for papers with optional filters:\n\n```python\nresult = await call_tool(\"search_papers\", {\n    \"query\": \"transformer architecture\",\n    \"max_results\": 10,\n    \"date_from\": \"2023-01-01\",\n    \"categories\": [\"cs.AI\", \"cs.LG\"]\n})\n```\n\n### 2. Paper Download\nDownload a paper by its arXiv ID:\n\n```python\nresult = await call_tool(\"download_paper\", {\n    \"paper_id\": \"2401.12345\"\n})\n```\n\n### 3. List Papers\nView all downloaded papers:\n\n```python\nresult = await call_tool(\"list_papers\", {})\n```\n\n### 4. Read Paper\nAccess the content of a downloaded paper:\n\n```python\nresult = await call_tool(\"read_paper\", {\n    \"paper_id\": \"2401.12345\"\n})\n```\n\n## ⚙️ Configuration\n\nConfigure through environment variables:\n\n| Variable | Purpose | Default |\n|----------|---------|---------|\n| `ARXIV_STORAGE_PATH` | Paper storage location | ~/.arxiv-mcp-server/papers |\n\n## 🧪 Testing\n\nRun the test suite:\n\n```bash\npython -m pytest\n```\n\n## 📄 License\n\nReleased under the MIT License. See the LICENSE file for details.\n\n---\n\n<div align=\"center\">\n\nMade with ❤️ by the Pear Labs Team\n\n<a href=\"https://glama.ai/mcp/servers/04dtxi5i5n\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/04dtxi5i5n/badge\" alt=\"ArXiv Server MCP server\" /></a>\n</div>\n",
    "publisher": {
      "id": "blazickjp",
      "name": "blazickjp",
      "url": "https://github.com/blazickjp/arxiv-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/blazickjp/arxiv-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "arxiv-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "arxiv-mcp-server"
      ],
      "env": {
        "ARXIV_STORAGE_PATH": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "77162b49-8a5f-4d9e-83b8-c2afb8b23d10",
    "name": "todoist-mcp-server",
    "description": "Todoist MCP Server",
    "fullDescription": "# Todoist MCP Server\n\nAn MCP (Model Context Protocol) server implementation that integrates Claude with Todoist, enabling natural language task management. This server allows Claude to interact with your Todoist tasks using everyday language.\n\n## Features\n\n* **Natural Language Task Management**: Create, update, complete, and delete tasks using everyday language\n* **Smart Task Search**: Find tasks using partial name matches\n* **Flexible Filtering**: Filter tasks by due date, priority, and other attributes\n* **Rich Task Details**: Support for descriptions, due dates, and priority levels\n* **Intuitive Error Handling**: Clear feedback for better user experience\n\n## Installation\n\n### Installing via Smithery\n\nTo install Todoist MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@abhiz123/todoist-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @abhiz123/todoist-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install -g @abhiz123/todoist-mcp-server\n```\n\n## Tools\n\n### todoist_create_task\nCreate new tasks with various attributes:\n* Required: content (task title)\n* Optional: description, due date, priority level (1-4)\n* Example: \"Create task 'Team Meeting' with description 'Weekly sync' due tomorrow\"\n\n### todoist_get_tasks\nRetrieve and filter tasks:\n* Filter by due date, priority, or project\n* Natural language date filtering\n* Optional result limit\n* Example: \"Show high priority tasks due this week\"\n\n### todoist_update_task\nUpdate existing tasks using natural language search:\n* Find tasks by partial name match\n* Update any task attribute (content, description, due date, priority)\n* Example: \"Update meeting task to be due next Monday\"\n\n### todoist_complete_task\nMark tasks as complete using natural language search:\n* Find tasks by partial name match\n* Confirm completion status\n* Example: \"Mark the documentation task as complete\"\n\n### todoist_delete_task\nRemove tasks using natural language search:\n* Find and delete tasks by name\n* Confirmation messages\n* Example: \"Delete the PR review task\"\n\n## Setup\n\n### Getting a Todoist API Token\n1. Log in to your Todoist account\n2. Navigate to Settings → Integrations\n3. Find your API token under \"Developer\"\n\n### Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"todoist\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@abhiz123/todoist-mcp-server\"],\n      \"env\": {\n        \"TODOIST_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n\n## Example Usage\n\n### Creating Tasks\n```\n\"Create task 'Team Meeting'\"\n\"Add task 'Review PR' due tomorrow at 2pm\"\n\"Create high priority task 'Fix bug' with description 'Critical performance issue'\"\n```\n\n### Getting Tasks\n```\n\"Show all my tasks\"\n\"List tasks due today\"\n\"Get high priority tasks\"\n\"Show tasks due this week\"\n```\n\n### Updating Tasks\n```\n\"Update documentation task to be due next week\"\n\"Change priority of bug fix task to urgent\"\n\"Add description to team meeting task\"\n```\n\n### Completing Tasks\n```\n\"Mark the PR review task as complete\"\n\"Complete the documentation task\"\n```\n\n### Deleting Tasks\n```\n\"Delete the PR review task\"\n\"Remove meeting prep task\"\n```\n\n## Development\n\n### Building from source\n```bash\n# Clone the repository\ngit clone https://github.com/abhiz123/todoist-mcp-server.git\n\n# Navigate to directory\ncd todoist-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Contributing\nContributions are welcome! Feel free to submit a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Issues and Support\nIf you encounter any issues or need support, please file an issue on the [GitHub repository](https://github.com/abhiz123/todoist-mcp-server/issues).",
    "publisher": {
      "id": "abhiz123",
      "name": "abhiz123",
      "url": "https://github.com/abhiz123/todoist-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/abhiz123/todoist-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@abhiz123/todoist-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@abhiz123/todoist-mcp-server"
      ],
      "env": {
        "TODOIST_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "da1e7d6b-d1c7-4486-acfd-5af48cf5f5b1",
    "name": "sparfenyuk/mcp-proxy",
    "description": "mcp-proxy",
    "fullDescription": "# mcp-proxy\n\n## About\n\nThe `mcp-proxy` is a tool that lets you switch between server transports. There are two supported modes:\n\n1. stdio to SSE\n2. SSE to stdio\n\n## 1. stdio to SSE\n\nRun a proxy server from stdio that connects to a remote SSE server.\n\nThis mode allows clients like Claude Desktop to communicate to a remote server over SSE even though it is not supported natively.\n\n```mermaid\ngraph LR\n    A[\"Claude Desktop\"] <--> |stdio| B[\"mcp-proxy\"]\n    B <--> |SSE| C[\"External MCP Server\"]\n\n    style A fill:#ffe6f9,stroke:#333,color:black,stroke-width:2px\n    style B fill:#e6e6ff,stroke:#333,color:black,stroke-width:2px\n    style C fill:#e6ffe6,stroke:#333,color:black,stroke-width:2px\n```\n\n### 1.1 Configuration\n\nThis mode requires passing the URL to the MCP Server SSE endpoint as the first argument to the program.\n\nArguments\n\n| Name                 | Required | Description                                                           | Example                                       |\n| -------------------- | -------- | --------------------------------------------------------------------- | ----------------------------------------------|\n| `command_or_url`     | Yes      | The MCP server SSE endpoint to connect to                             | http://example.io/sse                         |\n| `--headers`          | No       | Headers to use for the MCP server SSE connection                      | Authorization 'Bearer my-secret-access-token' |\n\nEnvironment Variables\n\n| Name               | Required | Description                                                                  | Example    |\n| ------------------ | -------- | ---------------------------------------------------------------------------- | ---------- |\n| `API_ACCESS_TOKEN` | No       | Can be used instead of `--headers Authorization 'Bearer <API_ACCESS_TOKEN>'` | YOUR_TOKEN |\n\n### 1.2 Example usage\n\n`mcp-proxy` is supposed to be started by the MCP Client, so the configuration must be done accordingly.\n\nFor Claude Desktop, the configuration entry can look like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-proxy\": {\n        \"command\": \"mcp-proxy\",\n        \"args\": [\"http://example.io/sse\"],\n        \"env\": {\n          \"API_ACCESS_TOKEN\": \"access-token\"\n        }\n    }\n  }\n}\n```\n\n## 2. SSE to stdio\n\nRun a proxy server exposing a SSE server that connects to a local stdio server.\n\nThis allows remote connections to the local stdio server. The `mcp-proxy` opens a port to listen for SSE requests, spawns a local stdio server that handles MCP requests.\n\n```mermaid\ngraph LR\n    A[\"LLM Client\"] <-->|SSE| B[\"mcp-proxy\"]\n    B <-->|stdio| C[\"Local MCP Server\"]\n\n    style A fill:#ffe6f9,stroke:#333,color:black,stroke-width:2px\n    style B fill:#e6e6ff,stroke:#333,color:black,stroke-width:2px\n    style C fill:#e6ffe6,stroke:#333,color:black,stroke-width:2px\n```\n\n### 2.1 Configuration\n\nThis mode requires the `--sse-port` argument to be set. The `--sse-host` argument can be set to specify the host IP address that the SSE server will listen on. Additional environment variables can be passed to the local stdio server using the `--env` argument. The command line arguments for the local stdio server must be passed after the `--` separator.\n\nArguments\n\n| Name             | Required                   | Description                                                      | Example              |\n| ---------------- | -------------------------- | ---------------------------------------------------------------- | -------------------- |\n| `command_or_url` | Yes                        | The command to spawn the MCP stdio server                        | uvx mcp-server-fetch |\n| `--sse-port`     | No, random available       | The SSE server port to listen on                                 | 8080                 |\n| `--sse-host`     | No, `127.0.0.1` by default | The host IP address that the SSE server will listen on           | 0.0.0.0              |\n| `--env`          | No                         | Additional environment variables to pass to the MCP stdio server | FOO=BAR              |\n\n### 2.2 Example usage\n\nTo start the `mcp-proxy` server that listens on port 8080 and connects to the local MCP server:\n\n```bash\n# Start the MCP server behind the proxy\nmcp-proxy uvx mcp-server-fetch\n\n# Start the MCP server behind the proxy with a custom port\nmcp-proxy --sse-port=8080 uvx mcp-server-fetch\n\n# Start the MCP server behind the proxy with a custom host and port\nmcp-proxy --sse-host=0.0.0.0 --sse-port=8080 uvx mcp-server-fetch\n\n# Start the MCP server behind the proxy with a custom user agent\n# Note that the `--` separator is used to separate the `mcp-proxy` arguments from the `mcp-server-fetch` arguments\nmcp-proxy --sse-port=8080 -- uvx mcp-server-fetch --user-agent=YourUserAgent\n```\n\nThis will start an MCP server that can be connected to at `http://127.0.0.1:8080/sse`\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Proxy for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-proxy):\n\n```bash\nnpx -y @smithery/cli install mcp-proxy --client claude\n```\n\n### Installing via PyPI\n\nThe stable version of the package is available on the PyPI repository. You can install it using the following command:\n\n```bash\n# Option 1: With uv (recommended)\nuv tool install mcp-proxy\n\n# Option 2: With pipx (alternative)\npipx install mcp-proxy\n```\n\nOnce installed, you can run the server using the `mcp-proxy` command. See configuration options for each mode above.\n\n### Installing via Github repository (latest)\n\nThe latest version of the package can be installed from the git repository using the following command:\n\n```bash\nuv tool install git+https://github.com/sparfenyuk/mcp-proxy\n```\n\n> [!NOTE]\n> If you have already installed the server, you can update it using `uv tool upgrade --reinstall` command.\n\n> [!NOTE]\n> If you want to delete the server, use the `uv tool uninstall mcp-proxy` command.\n\n### Installing as container\n\nStarting from version 0.3.2, it's possible to pull and run the corresponding container image:\n\n```bash\ndocker run -t ghcr.io/sparfenyuk/mcp-proxy:v0.3.2-alpine --help\n```\n\n## Command line arguments\n\n```bash\nusage: mcp-proxy [-h] [-H KEY VALUE] [-e KEY VALUE] [--sse-port SSE_PORT] [--sse-host SSE_HOST] [command_or_url] [args ...]\n\nStart the MCP proxy in one of two possible modes: as an SSE or stdio client.\n\npositional arguments:\n  command_or_url        Command or URL to connect to. When a URL, will run an SSE client, otherwise will run the given command and connect as a stdio client. See corresponding options for more details.\n\noptions:\n  -h, --help            show this help message and exit\n\nSSE client options:\n  -H KEY VALUE, --headers KEY VALUE\n                        Headers to pass to the SSE server. Can be used multiple times.\n\nstdio client options:\n  args                  Any extra arguments to the command to spawn the server\n  -e KEY VALUE, --env KEY VALUE\n                        Environment variables used when spawning the server. Can be used multiple times.\n\nSSE server options:\n  --sse-port SSE_PORT   Port to expose an SSE server on. Default is a random port\n  --sse-host SSE_HOST   Host to expose an SSE server on. Default is 127.0.0.1\n\nExamples:\n  mcp-proxy http://localhost:8080/sse\n  mcp-proxy --headers Authorization 'Bearer YOUR_TOKEN' http://localhost:8080/sse\n  mcp-proxy --sse-port 8080 -- your-command --arg1 value1 --arg2 value2\n  mcp-proxy your-command --sse-port 8080 -e KEY VALUE -e ANOTHER_KEY ANOTHER_VALUE\n```\n\n## Testing\n\nCheck the `mcp-proxy` server by running it with the `mcp-server-fetch` server. You can use the [inspector tool](https://modelcontextprotocol.io/docs/tools/inspector) to test the target server.\n\n```bash\n# Run the stdio server called mcp-server-fetch behind the proxy over SSE\nmcp-proxy --sse-port=8080 uvx mcp-server-fetch &\n\n# Connect to the SSE proxy server spawned above using another instance of mcp-proxy given the URL of the SSE server\nmcp-proxy http://localhost:8080/sse\n\n# Send CTRL+C to stop the second server\n\n# Bring the first server to the foreground\nfg\n\n# Send CTRL+C to stop the first server\n```\n",
    "publisher": {
      "id": "sparfenyuk",
      "name": "sparfenyuk",
      "url": "https://github.com/sparfenyuk/mcp-proxy"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sparfenyuk/mcp-proxy",
    "distribution": {
      "type": "pip",
      "package": "mcp-proxy"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-proxy",
        "$ENVARG_COMMAND_OR_URL"
      ],
      "env": {
        "API_ACCESS_TOKEN": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ENVARG_COMMAND_OR_URL": {
          "description": "The MCP server SSE endpoint to connect to.",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "a628043b-c57b-480a-b94a-4e56449e1ae3",
    "name": "arjunkmrm/mcp-minecraft",
    "description": "Minecraft MCP Integration",
    "fullDescription": "# Minecraft MCP Integration\n\nA Model Context Protocol (MCP) integration for Minecraft that enables AI assistants to interact with a Minecraft server. This integration allows AI models to observe and interact with the Minecraft world through a bot.\n\n## Prerequisites\n\n1. Minecraft Launcher\n2. Node.js 18 or higher\n3. Claude Desktop App\n4. Java 21.0.5 (recommended)\n\n> ⚠️ Note: Currently only tested on macOS/Linux. Windows compatibility is not guaranteed.\n\n## Important Note\n\n1. **Use the F3+P Shortcut**:\nPress F3 + P together. This toggles the \"Pause on Lost Focus\" feature. Once turned off, you can switch to claude desktop and Minecraft will continue running without pausing.\n\n![Focus Settings](/public/focus.png)\n\n2. **Connection Issues on Claude Restart**:\nIf you restart Claude while the Minecraft server is running, you may experience MCP connection issues on the next claude launch due to lingering java process. See [Troubleshooting: MCP Connection Failed](#common-issues) for resolution steps.\n\n## Installation Steps\n\n1. **Download and Setup Minecraft Server**\n   - Download Minecraft server v1.21 from [mcversions.net/1.21](https://mcversions.net/download/1.21)\n   - Install Java 21.0.5 if not already installed (other versions are untested)\n   - Create a dedicated directory (e.g., `~/minecraft-server/`)\n   - Place the downloaded `server.jar` file in this directory\n   - Note down the absolute path to your `server.jar` file\n\n2. **Install and Configure MCP Integration**\n   \n   Quick Install (Recommended):\n   ```bash\n   npx -y @smithery/cli install mcp-minecraft --client claude\n   ```\n   Follow the CLI prompts to complete the setup.\n\n   Or Manual Setup:\n   - Navigate to `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Add the MCP server configuration:   \n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-minecraft\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"-y\",\n           \"mcp-minecraft@latest\",\n           \"--server-jar\",\n           \"/absolute/path/to/minecraft-server/server.jar\"\n         ]\n       }\n     }\n   }   \n   ```\n   > ⚠️ Replace `/absolute/path/to/minecraft-server/server.jar` with your actual server.jar path\n\n4. **Launch Claude Desktop**\n   - Start Claude Desktop after completing the configuration\n\n5. **Connect to Server**\n   - Open Minecraft Launcher\n   - Install and launch Minecraft Java Edition **v1.21**\n   - Click \"Play\" and Select \"Multiplayer\"\n   - Click \"Add Server\"\n   - Enter server details:\n     - Server Name: `Minecraft Server`\n     - Server Address: `localhost:25565`\n   - Click \"Done\"\n\n## Features\n\n### Resources\nThe integration exposes these MCP resources:\n\n- `minecraft://bot/location` - Current bot position in the world\n- `minecraft://bot/status` - Bot connection status\n\n### Tools\nAvailable MCP tools:\n\n- `chat` - Send chat messages to the server\n- `jump` - Make the bot jump\n- `moveForward` - Make the bot move forward\n- `moveBack` - Make the bot move backward\n- `turnLeft` - Make the bot turn left\n- `turnRight` - Make the bot turn right\n- `placeBlock` - Place a block at specified coordinates\n- `digBlock` - Break a block at specified coordinates\n- `getBlockInfo` - Get information about a block at specified coordinates\n- `selectSlot` - Select a hotbar slot (0-8)\n- `getInventory` - Get contents of bot's inventory\n- `equipItem` - Equip an item by name to specified destination\n- `getStatus` - Get bot's current status (health, food, position, etc.)\n- `getNearbyEntities` - Get list of nearby entities within range\n- `attack` - Attack a nearby entity by name\n- `useItem` - Use/activate the currently held item\n- `stopUsingItem` - Stop using/deactivate the current item\n- `lookAt` - Make the bot look at specific coordinates\n- `followPlayer` - Follow a specific player\n- `stopFollowing` - Stop following current target\n- `goToPosition` - Navigate to specific coordinates\n\n## Technical Details\n\n- Server runs in offline mode for local development\n- Default memory allocation: 2GB\n- Default port: 25565\n- Bot username: MCPBot\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MCP Connection Failed**\n   - Look for lingering Java processes\n   - Terminate them manually:\n      - Windows: Use Task Manager (untested)\n      - Mac/Linux: \n         - Go to 'Activity Monitor' and 'Force Quit' java\n   - Restart computer if process termination fails\n   - Note: Latest version should auto-resolve these issues\n\n2. **Server Won't Start**\n   - Verify Java is installed\n   - Check server.jar path is correct\n   - Ensure port 25565 is available\n\n3. **Can't Connect to Server**\n   - Verify server is running (check logs)\n   - Confirm you're using \"localhost\" as server address\n   - Check firewall settings\n\n### Logs Location\n- Minecraft Server logs: Check the minecraft-server directory\n- Claude Desktop logs: `~/Library/Logs/Claude/mcp*.log`\n\n## Contributing\n\nContributions, big or small, are welcome!\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "arjunkmrm",
      "name": "arjunkmrm",
      "url": "https://github.com/arjunkmrm/mcp-minecraft"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/arjunkmrm/mcp-minecraft",
    "distribution": {
      "type": "npm",
      "package": "mcp-minecraft"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-minecraft",
        "--server-jar",
        "$ENVARG_SERVER_JAR_PATH"
      ],
      "env": {
        "ENVARG_SERVER_JAR_PATH": {
          "description": "Absolute path to your Minecraft server.jar file",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "44b40ea1-7f1b-4e3c-9335-b32f20ea4e79",
    "name": "tatn/mcp-server-fetch-typescript",
    "description": "mcp-server-fetch-typescript MCP Server",
    "fullDescription": "# mcp-server-fetch-typescript MCP Server\n\nA Model Context Protocol server that provides web content fetching and conversion capabilities. This server implements a comprehensive web content retrieval system with support for various formats and rendering methods, making it ideal for tasks ranging from simple data extraction to sophisticated web scraping.\n\n## Features\n\n### Tools\n\n- `get_raw_text` - Retrieve raw text content directly from URLs\n  - Takes `url` as a required parameter pointing to text-based resources\n  - Returns unprocessed text content without browser rendering\n  - Ideal for JSON, XML, CSV, TSV, or plain text files\n  - Best used when fast, direct access to source content is needed\n\n- `get_rendered_html` - Fetch fully rendered HTML content\n  - Takes `url` as a required parameter\n  - Returns complete HTML content after JavaScript execution\n  - Uses Playwright for headless browser rendering\n  - Essential for modern web applications and SPAs\n\n- `get_markdown` - Convert web content to Markdown format\n  - Takes `url` as a required parameter\n  - Returns well-formatted Markdown preserving structural elements\n  - Supports tables and definition lists\n  - Recommended for content archiving and documentation\n\n- `get_markdown_summary` - Extract and convert main content\n  - Takes `url` as a required parameter\n  - Returns clean Markdown focusing on main content\n  - Automatically removes navigation, headers, footers\n  - Perfect for article and blog post extraction\n\n## Installation\n\n### As a Global Package\n\n```bash\nnpm install -g mcp-server-fetch-typescript\n```\n\n### As a Project Dependency\n\n```bash\nnpm install mcp-server-fetch-typescript\n```\n\n## Usage\n\n### Using with Claude Desktop\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-typescript\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"-y\",\n      \"mcp-server-fetch-typescript\"\n    ]\n  }\n}\n```\n\nor Add the following configuration:\n\n```bash\ngit clone https://github.com/tatn/mcp-server-fetch-typescript.git\ncd mcp-server-fetch-typescript\nnpm install\nnpm run build\n```\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-typescript\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"/path/to/mcp-server-fetch-typescript/build/index.js\"\n    ]\n  }\n}\n```\n\n### Debugging\n\nTo debug the MCP server:\n\n```bash\nnpx @modelcontextprotocol/inspector npx -y mcp-server-fetch-typescript\n```\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcp-server-fetch-typescript/build/index.js\n```\n\n\n",
    "publisher": {
      "id": "tatn",
      "name": "tatn",
      "url": "https://github.com/tatn/mcp-server-fetch-typescript"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tatn/mcp-server-fetch-typescript",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-fetch-typescript"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-fetch-typescript"
      ],
      "env": {}
    }
  },
  {
    "id": "69ed7539-4aff-4507-b651-e9ef1e1febca",
    "name": "fatwang2/search1api-mcp",
    "description": "Search1API MCP Server",
    "fullDescription": "# Search1API MCP Server\n\nA Model Context Protocol (MCP) server that provides search and crawl functionality using Search1API.\n\nhttps://github.com/user-attachments/assets/58bc98ae-3b6b-442c-a7fc-010508b5f028\n\n\n## Features\n\n- Web search functionality\n- News search functionality\n- Web page content extraction\n- Website sitemap extraction\n- Seamless integration with Claude Desktop\n\n## Tools\n\n### 1. Search Tool\n- Name: `search`\n- Description: Search the web using Search1API\n- Parameters:\n  * `query` (required): Search query\n  * `max_results` (optional, default: 10): Number of results to return\n  * `search_service` (optional, default: \"google\"): Search service to use\n\n### 2. News Tool\n- Name: `news`\n- Description: Search for news articles using Search1API\n- Parameters:\n  * `query` (required): Search query\n  * `max_results` (optional, default: 10): Number of results to return\n  * `search_service` (optional, default: \"google\"): Search service to use\n\n### 3. Crawl Tool\n- Name: `crawl`\n- Description: Extract content from a URL using Search1API\n- Parameters:\n  * `url` (required): URL to crawl\n\n### 4. Sitemap Tool\n- Name: `sitemap`\n- Description: Get all related links from a URL\n- Parameters:\n  * `url` (required): URL to get sitemap\n\n## Setup Guide\n\n### 1. Get Search1API Key\n1. Register at [Search1API](https://www.search1api.com/)\n2. Choose a pricing plan (starts from $0.99)\n3. After payment, copy your API key from the confirmation email\n\n### 2. Configure Claude Desktop\nUpdate your Claude configuration file (`claude_desktop_config.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"search1api\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"search1api-mcp\"],\n      \"env\": {\n        \"SEARCH1API_KEY\": \"YOUR_SEARCH1API_KEY\"\n      }\n    }\n  }\n}\n```\n\nConfiguration file location:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n## Version History\n\n- v0.1.3: Added news search functionality\n- v0.1.2: Added sitemap functionality\n- v0.1.1: Added web crawling functionality\n- v0.1.0: Initial release with search functionality\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
    "publisher": {
      "id": "fatwang2",
      "name": "fatwang2",
      "url": "https://github.com/fatwang2/search1api-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/fatwang2/search1api-mcp",
    "distribution": {
      "type": "npm",
      "package": "search1api-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "search1api-mcp"
      ],
      "env": {
        "SEARCH1API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "f2c04032-2435-41f0-844a-d46c17faba1f",
    "name": "henryhawke/mcp-titan",
    "description": "Titan Memory MCP Server",
    "fullDescription": "# Titan Memory MCP Server\n\nA MCP server built with a three-tier memory architecture that handles storage as follows:\n\n- **Short-term memory:** Holds the immediate conversational context in RAM.\n- **Long-term memory:** Persists core patterns and knowledge over time. This state is saved automatically.\n- **Meta memory:** Keeps higher-level abstractions that support context-aware responses.\n\n## 🚀 Quick Start\n\n1. Basic Installation (uses default memory path):\n\n```bash\nnpx -y @smithery/cli@latest run @henryhawke/mcp-titan\n```\n\n2. With Custom Memory Path:\n\n```bash\nnpx -y @smithery/cli@latest run @henryhawke/mcp-titan --config '{\n  \"memoryPath\": \"/path/to/your/memory/directory\"\n}'\n```\n\nThe server will automatically:\n\n- Initialize in the specified directory (or default location)\n- Maintain persistent memory state\n- Save model weights and configuration\n- Learn from interactions\n\n## 📂 Memory Storage\n\nBy default, the server stores memory files in:\n\n- **Windows:** `%APPDATA%\\.mcp-titan`\n- **MacOS/Linux:** `~/.mcp-titan`\n\nYou can customize the storage location using the `memoryPath` configuration:\n\n```bash\n# Example with all configuration options\nnpx -y @smithery/cli@latest run @henryhawke/mcp-titan --config '{\n  \"port\": 3000,\n  \"memoryPath\": \"/custom/path/to/memory\",\n  \"inputDim\": 768,\n  \"outputDim\": 768\n}'\n```\n\nThe following files will be created in the memory directory:\n\n- `memory.json`: Current memory state\n- `model.json`: Model architecture\n- `weights/`: Model weights directory\n\n## 🤖 LLM Integration\n\nTo integrate with your LLM:\n\n1. Copy the contents of `docs/llm-system-prompt.md` into your LLM's system prompt\n2. The LLM will automatically:\n   - Use the memory system for every interaction\n   - Learn from conversations\n   - Provide context-aware responses\n   - Maintain persistent knowledge\n\n## 🔄 Automatic Features\n\n- Self-initialization\n- WebSocket and stdio transport support\n- Automatic state persistence\n- Real-time memory updates\n- Error recovery and reconnection\n- Resource cleanup\n\n## 🧠 Memory Architecture\n\nThree-tier memory system:\n\n- Short-term memory for immediate context\n- Long-term memory for persistent patterns\n- Meta memory for high-level abstractions\n\n## 🛠️ Configuration Options\n\n| Option       | Description                    | Default        |\n| ------------ | ------------------------------ | -------------- |\n| `port`       | HTTP/WebSocket port            | `0` (disabled) |\n| `memoryPath` | Custom memory storage location | `~/.mcp-titan` |\n| `inputDim`   | Size of input vectors          | `768`          |\n| `outputDim`  | Size of memory state           | `768`          |\n\n## 📚 Technical Details\n\n- Built with TensorFlow.js\n- WebSocket and stdio transport support\n- Automatic tensor cleanup\n- Type-safe implementation\n- Memory-efficient design\n\n## 🔒 Security Considerations\n\nWhen using a custom memory path:\n\n- Ensure the directory has appropriate permissions\n- Use a secure location not accessible to other users\n- Consider encrypting sensitive memory data\n- Backup memory files regularly\n\n## 📝 License\n\nMIT License - feel free to use and modify!\n\n## 🙏 Acknowledgments\n\n- Built with [Model Context Protocol](https://modelcontextprotocol.io)\n- Uses [TensorFlow.js](https://tensorflow.org/js)\n- Inspired by [synthience/mcp-titan-cognitive-memory](https://github.com/synthience/mcp-titan-cognitive-memory/)",
    "publisher": {
      "id": "henryhawke",
      "name": "henryhawke",
      "url": "https://github.com/henryhawke/mcp-titan"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/henryhawke/mcp-titan",
    "distribution": {
      "type": "npm",
      "package": "@henryhawke/mcp-titan"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@henryhawke/mcp-titan"
      ],
      "env": {}
    }
  },
  {
    "id": "2c1fc54f-e58a-4f1c-8070-af4a5f99fb3b",
    "name": "cloudflare/mcp-server-cloudflare",
    "description": "Cloudflare MCP Server",
    "fullDescription": "# Cloudflare MCP Server\n\nModel Context Protocol (MCP) is a [new, standardized protocol](https://modelcontextprotocol.io/introduction) for managing context between large language models (LLMs) and external systems. In this repository, we provide an installer as well as an MCP Server for [Cloudflare's API](https://api.cloudflare.com).\n\nThis lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things on your Cloudflare account, e.g.:\n\n* `Please deploy me a new Worker with an example durable object.`\n* `Can you tell me about the data in my D1 database named '...'?`\n* `Can you copy all the entries from my KV namespace '...' into my R2 bucket '...'?`\n\n## Demo\n\n<div align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=vGajZpl_9yA\">\n    <img src=\"https://img.youtube.com/vi/vGajZpl_9yA/maxresdefault.jpg\" alt=\"Demonstrating the newly-released MCP server to explore Cloudflare properties, like Workers, KV, and D1.\" width=\"600\"/>\n  </a>\n</div>\n\n## Setup\n\n1. Run `npx @cloudflare/mcp-server-cloudflare init`\n\n<div align=\"left\">\n    <img src=\"https://github.com/user-attachments/assets/163bed75-ec0c-478a-94b2-179969a90923\" alt=\"Example console output\" width=\"300\"/>\n</div>\n\n2. Restart Claude Desktop, you should see a small 🔨 icon that shows the following tools available for use:\n\n<div align=\"left\">\n    <img src=\"https://github.com/user-attachments/assets/a24275b1-1c6f-4754-96ef-dd7b9f0f5903\" alt=\"Example tool icon\" height=\"160\"/>\n    <img src=\"https://github.com/user-attachments/assets/4fb8badb-6800-4a3f-a530-a344b3584bec\" alt=\"Example tool list\" height=\"160\"/>\n</div>\n\n## Features\n\n### KV Store Management\n- `get_kvs`: List all KV namespaces in your account\n- `kv_get`: Get a value from a KV namespace\n- `kv_put`: Store a value in a KV namespace\n- `kv_list`: List keys in a KV namespace\n- `kv_delete`: Delete a key from a KV namespace\n\n### R2 Storage Management\n- `r2_list_buckets`: List all R2 buckets in your account\n- `r2_create_bucket`: Create a new R2 bucket\n- `r2_delete_bucket`: Delete an R2 bucket\n- `r2_list_objects`: List objects in an R2 bucket\n- `r2_get_object`: Get an object from an R2 bucket\n- `r2_put_object`: Put an object into an R2 bucket\n- `r2_delete_object`: Delete an object from an R2 bucket\n\n### D1 Database Management\n- `d1_list_databases`: List all D1 databases in your account\n- `d1_create_database`: Create a new D1 database\n- `d1_delete_database`: Delete a D1 database\n- `d1_query`: Execute a SQL query against a D1 database\n\n### Workers Management\n- `worker_list`: List all Workers in your account\n- `worker_get`: Get a Worker's script content\n- `worker_put`: Create or update a Worker script\n- `worker_delete`: Delete a Worker script\n\n### Analytics\n- `analytics_get`: Retrieve analytics data for your domain\n  - Includes metrics like requests, bandwidth, threats, and page views\n  - Supports date range filtering\n\n## Developing\n\nIn the current project folder, run:\n\n```\npnpm install\npnpm build:watch\n```\n\nThen, in a second terminal:\n\n```\nnode dist/index.js init\n```\n\nThis will link Claude Desktop against your locally-installed version for you to test.\n\n## Usage outside of Claude\n\nTo run the server locally, run `node dist/index run <account-id>`.\n\nIf you're using an alternative MCP Client, or testing things locally, emit the `tools/list` command to get an up-to-date list of all available tools. Then you can call these directly using the `tools/call` command.\n\n### Workers\n\n```javascript\n// List workers\nworker_list()\n\n// Get worker code\nworker_get({ name: \"my-worker\" })\n\n// Update worker\nworker_put({\n  name: \"my-worker\",\n  script: \"export default { async fetch(request, env, ctx) { ... }}\",\n  bindings: [\n    {\n      type: \"kv_namespace\",\n      name: \"MY_KV\",\n      namespace_id: \"abcd1234\"\n    },\n    {\n      type: \"r2_bucket\",\n      name: \"MY_BUCKET\",\n      bucket_name: \"my-files\"\n    }\n  ],\n  compatibility_date: \"2024-01-01\",\n  compatibility_flags: [\"nodejs_compat\"]\n})\n\n// Delete worker\nworker_delete({ name: \"my-worker\" })\n```\n\n### KV Store\n\n```javascript\n// List KV namespaces\nget_kvs()\n\n// Get value\nkv_get({\n    namespaceId: \"your_namespace_id\",\n    key: \"myKey\"\n})\n\n// Store value\nkv_put({\n    namespaceId: \"your_namespace_id\",\n    key: \"myKey\",\n    value: \"myValue\",\n    expirationTtl: 3600 // optional, in seconds\n})\n\n// List keys\nkv_list({\n    namespaceId: \"your_namespace_id\",\n    prefix: \"app_\", // optional\n    limit: 10 // optional\n})\n\n// Delete key\nkv_delete({\n    namespaceId: \"your_namespace_id\",\n    key: \"myKey\"\n})\n```\n\n### R2 Storage\n\n```javascript\n// List buckets\nr2_list_buckets()\n\n// Create bucket\nr2_create_bucket({ name: \"my-bucket\" })\n\n// Delete bucket\nr2_delete_bucket({ name: \"my-bucket\" })\n\n// List objects in bucket\nr2_list_objects({ \n    bucket: \"my-bucket\",\n    prefix: \"folder/\", // optional\n    delimiter: \"/\", // optional\n    limit: 1000 // optional\n})\n\n// Get object\nr2_get_object({\n    bucket: \"my-bucket\",\n    key: \"folder/file.txt\"\n})\n\n// Put object\nr2_put_object({\n    bucket: \"my-bucket\",\n    key: \"folder/file.txt\",\n    content: \"Hello, World!\",\n    contentType: \"text/plain\" // optional\n})\n\n// Delete object\nr2_delete_object({\n    bucket: \"my-bucket\",\n    key: \"folder/file.txt\"\n})\n```\n\n### D1 Database\n\n```javascript\n// List databases\nd1_list_databases()\n\n// Create database\nd1_create_database({ name: \"my-database\" })\n\n// Delete database\nd1_delete_database({ databaseId: \"your_database_id\" })\n\n// Execute a single query\nd1_query({\n    databaseId: \"your_database_id\",\n    query: \"SELECT * FROM users WHERE age > ?\",\n    params: [\"25\"] // optional\n})\n\n// Create a table\nd1_query({\n    databaseId: \"your_database_id\",\n    query: `\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            email TEXT UNIQUE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n    `\n})\n```\n\n### Analytics\n\n```javascript\n// Get today's analytics\nanalytics_get({\n    zoneId: \"your_zone_id\",\n    since: \"2024-11-26T00:00:00Z\",\n    until: \"2024-11-26T23:59:59Z\"\n})\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
    "publisher": {
      "id": "cloudflare",
      "name": "cloudflare",
      "url": "https://github.com/cloudflare/mcp-server-cloudflare"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cloudflare/mcp-server-cloudflare",
    "distribution": {
      "type": "npm",
      "package": "@cloudflare/mcp-server-cloudflare"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@cloudflare/mcp-server-cloudflare",
        "run",
        "$ENVARG_ACCOUNT_ID"
      ],
      "env": {
        "ENVARG_ACCOUNT_ID": {
          "description": "Your Cloudflare account ID",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "973e49da-685d-4d0e-b776-3c60f61a1324",
    "name": "spences10/mcp-wsl-exec",
    "description": "mcp-wsl-exec",
    "fullDescription": "# mcp-wsl-exec\n\nA Model Context Protocol (MCP) server for executing commands in\nWindows Subsystem for Linux (WSL) environments. This server provides\nsecure command execution with built-in safety features and validation.\n\n## Features\n\n- 🔒 Secure command execution in WSL environments\n- ⚡ Built-in safety features:\n  - Dangerous command detection\n  - Command confirmation system\n  - Path traversal prevention\n  - Command sanitization\n- 📁 Working directory support\n- ⏱️ Command timeout functionality\n- 🔍 Detailed command output formatting\n- ❌ Error handling and validation\n- 🛡️ Protection against shell injection\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-wsl-exec\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-wsl-exec\"]\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop Configuration\n\nAdd this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-wsl-exec\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-wsl-exec\"]\n\t\t}\n\t}\n}\n```\n\n## API\n\nThe server implements two MCP tools:\n\n### execute_command\n\nExecute a command in WSL with safety checks and validation.\n\nParameters:\n\n- `command` (string, required): Command to execute\n- `working_dir` (string, optional): Working directory for command\n  execution\n- `timeout` (number, optional): Timeout in milliseconds\n\n### confirm_command\n\nConfirm execution of a dangerous command that was flagged by safety\nchecks.\n\nParameters:\n\n- `confirmation_id` (string, required): Confirmation ID received from\n  execute_command\n- `confirm` (boolean, required): Whether to proceed with the command\n  execution\n\n## Safety Features\n\n### Dangerous Command Detection\n\nThe server maintains a list of potentially dangerous commands that\nrequire explicit confirmation before execution, including:\n\n- File system operations (rm, rmdir, mv)\n- System commands (shutdown, reboot)\n- Package management (apt, yum, dnf)\n- File redirections (>, >>)\n- Permission changes (chmod, chown)\n- And more...\n\n### Command Sanitization\n\nAll commands are sanitized to prevent:\n\n- Shell metacharacter injection\n- Path traversal attempts\n- Home directory references\n- Dangerous command chaining\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\nThe project uses changesets for version management. To publish:\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Designed for secure WSL command execution\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-wsl-exec"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-wsl-exec",
    "distribution": {
      "type": "npm",
      "package": "mcp-wsl-exec"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-wsl-exec"
      ],
      "env": {}
    }
  },
  {
    "id": "b1c6794f-ea10-418b-9508-1ed1edd43f16",
    "name": "spences10/mcp-tavily-search",
    "description": "mcp-tavily-search",
    "fullDescription": "# mcp-tavily-search\n\nA Model Context Protocol (MCP) server for integrating Tavily's search\nAPI with LLMs. This server provides intelligent web search\ncapabilities optimized for high-quality, factual results, including\ncontext generation for RAG applications and direct question answering.\n\n## Features\n\n- 🔍 Advanced web search capabilities through Tavily API\n- 🤖 AI-generated summaries of search results\n- 🎯 Domain filtering for higher quality results\n- 📊 Configurable search depth and parameters\n- 🧠 Context generation for RAG applications\n- ❓ Direct question answering capabilities\n- 💾 Response caching with TTL support\n- 📝 Multiple response formats (text, JSON, markdown)\n- 🔄 Structured result formatting optimized for LLMs\n- 🏗️ Built on the Model Context Protocol\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-tavily-search\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-tavily-search\"],\n\t\t\t\"env\": {\n\t\t\t\t\"TAVILY_API_KEY\": \"your-tavily-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-tavily-search\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"source ~/.nvm/nvm.sh && TAVILY_API_KEY=your-tavily-api-key /home/username/.nvm/versions/node/v20.12.1/bin/npx mcp-tavily-search\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `TAVILY_API_KEY`: Your Tavily API key (required)\n\n## API\n\nThe server implements three MCP tools with configurable parameters:\n\n### tavily_search\n\nSearch the web using Tavily Search API, optimized for high-quality,\nfactual results.\n\nParameters:\n\n- `query` (string, required): Search query\n- `search_depth` (string, optional): \"basic\" (faster) or \"advanced\"\n  (more thorough). Defaults to \"basic\"\n- `topic` (string, optional): \"general\" or \"news\". Defaults to\n  \"general\"\n- `days` (number, optional): Number of days back to search (news topic\n  only). Defaults to 3\n- `time_range` (string, optional): Time range for results ('day',\n  'week', 'month', 'year' or 'd', 'w', 'm', 'y')\n- `max_results` (number, optional): Maximum number of results.\n  Defaults to 5\n- `include_answer` (boolean, optional): Include AI-generated summary.\n  Defaults to true\n- `include_images` (boolean, optional): Include related images.\n  Defaults to false\n- `include_image_descriptions` (boolean, optional): Include image\n  descriptions. Defaults to false\n- `include_raw_content` (boolean, optional): Include raw HTML content.\n  Defaults to false\n- `include_domains` (string[], optional): List of trusted domains to\n  include\n- `exclude_domains` (string[], optional): List of domains to exclude\n- `response_format` (string, optional): 'text', 'json', or 'markdown'.\n  Defaults to 'text'\n- `cache_ttl` (number, optional): Cache time-to-live in seconds.\n  Defaults to 3600\n- `force_refresh` (boolean, optional): Force fresh results ignoring\n  cache. Defaults to false\n\n### tavily_get_search_context\n\nGenerate context for RAG applications using Tavily search.\n\nParameters:\n\n- `query` (string, required): Search query for context generation\n- `max_tokens` (number, optional): Maximum length of generated\n  context. Defaults to 2000\n- `search_depth` (string, optional): \"basic\" or \"advanced\". Defaults\n  to \"advanced\"\n- `topic` (string, optional): \"general\" or \"news\". Defaults to\n  \"general\"\n- Other parameters same as tavily_search\n\n### tavily_qna_search\n\nGet direct answers to questions using Tavily search.\n\nParameters:\n\n- `query` (string, required): Question to be answered\n- `include_sources` (boolean, optional): Include source citations.\n  Defaults to true\n- `search_depth` (string, optional): \"basic\" or \"advanced\". Defaults\n  to \"advanced\"\n- `topic` (string, optional): \"general\" or \"news\". Defaults to\n  \"general\"\n- Other parameters same as tavily_search\n\n## Domain Filtering\n\nThe server supports flexible domain filtering through two optional\nparameters:\n\n- `include_domains`: Array of trusted domains to include in search\n  results\n- `exclude_domains`: Array of domains to exclude from search results\n\nThis allows you to:\n\n- Target specific trusted sources for academic or technical searches\n- Exclude potentially unreliable or irrelevant sources\n- Customize sources based on your specific needs\n- Access all available sources when no filtering is specified\n\nExample domain filtering:\n\n```json\n{\n\t\"include_domains\": [\"arxiv.org\", \"science.gov\"],\n\t\"exclude_domains\": [\"example.com\"]\n}\n```\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\nThe project uses changesets for version management. To publish:\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [Tavily Search API](https://tavily.com)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-tavily-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-tavily-search",
    "distribution": {
      "type": "npm",
      "package": "mcp-tavily-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-tavily-search"
      ],
      "env": {
        "TAVILY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "64f5a921-888a-45f9-886c-718f8f809a38",
    "name": "motherduckdb/mcp-server-motherduck",
    "description": "mcp-server-motherduck MCP server",
    "fullDescription": "# mcp-server-motherduck MCP server\n\nAn [MCP server](https://modelcontextprotocol.io/introduction) for MotherDuck and local DuckDB. \n\n## Components\n\n### Resources\n\n### Prompts\n\nThe server provides one prompt:\n- duckdb-motherduck-initial-prompt: A prompt to initialize a connection to duckdb or motherduck and start working with it\n\n### Tools\n\nThe server offers three tools:\n- initialize-connection: Create a connection to either a local DuckDB or MotherDuck and retrieve available databases\n  - Takes \"type\" (DuckDB or MotherDuck) as input\n- read-schemas: Get table schemas from a specific DuckDB/MotherDuck database\n  - Takes \"database_name\" as required string arguments\n- execute-query: Execute a query on the MotherDuck (DuckDB) database\n  - Takes \"query\" as required string arguments\n\n## Usage with Claude Desktop\n\nAdd the snippet below to your Claude Desktop config and make sure to set the HOME var to your home folder (needed by DuckDB). \n\nWhen using MotherDuck, you also need to set a [MotherDuck token](https://motherduck.com/docs/key-tasks/authenticating-and-connecting-to-motherduck/authenticating-to-motherduck/#storing-the-access-token-as-an-environment-variable) env var.\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Servers Configuration\n```\n\"mcpServers\": {\n  \"mcp-server-motherduck\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-motherduck\"\n    ],\n    \"env\": {\n      \"motherduck_token\": \"\",\n      \"HOME\": \"\"\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n",
    "publisher": {
      "id": "motherduckdb",
      "name": "motherduckdb",
      "url": "https://github.com/motherduckdb/mcp-server-motherduck"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/motherduckdb/mcp-server-motherduck",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-motherduck"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-motherduck"
      ],
      "env": {
        "motherduck_token": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "HOME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "651be6f7-0bcc-4726-9d8e-6edf243c33af",
    "name": "tanigami/mcp-server-perplexity",
    "description": "Perplexity MCP Server",
    "fullDescription": "# Perplexity MCP Server\n\n\nMCP Server for the Perplexity API.\n\n> :warning: **Limitations:**\n> - The Claude Desktop client may timeout if Perplexity processing takes too long\n> - This issue might be resolved if Claude Desktop implements support for long running operations and progress reporting in the future\n> - Implementation updates to handle these features will be made if they become available\n\n\n## Components\n\n### Tools\n\n- **ask_perplexity**: Request chat completion with citations from Perplexity  \n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\n- On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```\n\"mcpServers\": {\n  \"Perplexity\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-perplexity\"\n    ],\n    \"env\": {\n      \"PERPLEXITY_API_KEY\": \"your-perplexity-api-key\"\n    }\n  }\n}\n```\n",
    "publisher": {
      "id": "tanigami",
      "name": "tanigami",
      "url": "https://github.com/tanigami/mcp-server-perplexity"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tanigami/mcp-server-perplexity",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-perplexity"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-perplexity"
      ],
      "env": {
        "PERPLEXITY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "c02842d7-2ef5-4c6f-8914-61ed895179e6",
    "name": "MladenSU/cli-mcp-server",
    "description": "CLI MCP Server",
    "fullDescription": "# CLI MCP Server\n\nA secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with\ncomprehensive security features.\n\n# Table of Contents\n\n1. [Overview](#overview)\n2. [Features](#features)\n3. [Configuration](#configuration)\n4. [Available Tools](#available-tools)\n    - [run_command](#run_command)\n    - [show_security_rules](#show_security_rules)\n5. [Usage with Claude Desktop](#usage-with-claude-desktop)\n    - [Development/Unpublished Servers Configuration](#developmentunpublished-servers-configuration)\n    - [Published Servers Configuration](#published-servers-configuration)\n6. [Security Features](#security-features)\n7. [Error Handling](#error-handling)\n8. [Development](#development)\n    - [Prerequisites](#prerequisites)\n    - [Building and Publishing](#building-and-publishing)\n    - [Debugging](#debugging)\n9. [License](#license)\n\n---\n\n## Overview\n\nThis MCP server enables secure command-line execution with robust security measures including command whitelisting, path\nvalidation, and execution controls. Perfect for providing controlled CLI access to LLM applications while maintaining security.\n\n## Features\n\n- 🔒 Secure command execution with strict validation\n- ⚙️ Configurable command and flag whitelisting with 'all' option\n- 🛡️ Path traversal prevention and validation\n- 🚫 Shell operator injection protection\n- ⏱️ Execution timeouts and length limits\n- 📝 Detailed error reporting\n- 🔄 Async operation support\n- 🎯 Working directory restriction and validation\n\n## Configuration\n\nConfigure the server using environment variables:\n\n| Variable             | Description                                          | Default            |\n|---------------------|------------------------------------------------------|-------------------|\n| `ALLOWED_DIR`       | Base directory for command execution (Required)      | None (Required)   |\n| `ALLOWED_COMMANDS`  | Comma-separated list of allowed commands or 'all'    | `ls,cat,pwd`      |\n| `ALLOWED_FLAGS`     | Comma-separated list of allowed flags or 'all'       | `-l,-a,--help`    |\n| `MAX_COMMAND_LENGTH`| Maximum command string length                        | `1024`            |\n| `COMMAND_TIMEOUT`   | Command execution timeout (seconds)                  | `30`              |\n\nNote: Setting `ALLOWED_COMMANDS` or `ALLOWED_FLAGS` to 'all' will allow any command or flag respectively.\n\n## Installation\n\nTo install CLI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/cli-mcp-server):\n\n```bash\nnpx @smithery/cli install cli-mcp-server --client claude\n```\n\n## Available Tools\n\n### run_command\n\nExecutes whitelisted CLI commands within allowed directories.\n\n**Input Schema:**\n```json\n{\n  \"command\": {\n    \"type\": \"string\",\n    \"description\": \"Single command to execute (e.g., 'ls -l' or 'cat file.txt')\"\n  }\n}\n```\n\n**Security Notes:**\n- Shell operators (&&, |, >, >>) are not supported\n- Commands must be whitelisted unless ALLOWED_COMMANDS='all'\n- Flags must be whitelisted unless ALLOWED_FLAGS='all'\n- All paths are validated to be within ALLOWED_DIR\n\n### show_security_rules\n\nDisplays current security configuration and restrictions, including:\n- Working directory\n- Allowed commands\n- Allowed flags\n- Security limits (max command length and timeout)\n\n## Usage with Claude Desktop\n\nAdd to your `~/Library/Application\\ Support/Claude/claude_desktop_config.json`:\n\n> Development/Unpublished Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<path/to/the/repo>/cli-mcp-server\",\n        \"run\",\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\"\n      }\n    }\n  }\n}\n```\n\n> Published Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\"\n      }\n    }\n  }\n}\n```\n> In case it's not working or showing in the UI, clear your cache via `uv clean`.\n\n## Security Features\n\n- ✅ Command whitelist enforcement with 'all' option\n- ✅ Flag validation with 'all' option\n- ✅ Path traversal prevention and normalization\n- ✅ Shell operator blocking\n- ✅ Command length limits\n- ✅ Execution timeouts\n- ✅ Working directory restrictions\n- ✅ Symlink resolution and validation\n\n## Error Handling\n\nThe server provides detailed error messages for:\n\n- Security violations (CommandSecurityError)\n- Command timeouts (CommandTimeoutError)\n- Invalid command formats\n- Path security violations\n- Execution failures (CommandExecutionError)\n- General command errors (CommandError)\n\n## Development\n\n### Prerequisites\n\n- Python 3.10+\n- MCP protocol library\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n    ```bash\n    uv sync\n    ```\n\n2. Build package distributions:\n    ```bash\n    uv build\n    ```\n\n   > This will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n   ```bash\n   uv publish --token {{YOUR_PYPI_API_TOKEN}}\n   ```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with\nthis command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{your source code local directory}}/cli-mcp-server run cli-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\nFor more information or support, please open an issue on the project repository.",
    "publisher": {
      "id": "MladenSU",
      "name": "MladenSU",
      "url": "https://github.com/MladenSU/cli-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/MladenSU/cli-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "cli-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "cli-mcp-server"
      ],
      "env": {
        "ALLOWED_DIR": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ALLOWED_COMMANDS": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ALLOWED_FLAGS": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "MAX_COMMAND_LENGTH": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "COMMAND_TIMEOUT": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "de198361-71b2-45ac-8ead-4ddeb71eb477",
    "name": "erithwik/mcp-hn",
    "description": "Hacker News MCP Server",
    "fullDescription": "# Hacker News MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for fetching information from Hacker News.\n\n## Tools\n\n- `get_stories` Fetching (top, new, ask_hn, show_hn) stories\n- `get_story_info` Fetching comments associated with a story\n- `search_stories` Searching for stories by query\n- `get_user_info` Fetching user info\n\n## Example Usage\n\nUse prompts like the following:\n\n```\nUser: Get the top stories of today\n  Output: Uses `get_stories` tool and returns a story about AI\nUser: What does the details of the story today that talks about the future of AI\n  Output: Uses `get_story_info` tool based on the results of the previous tool\nUser: What has the user `pg` been up to?\n  Output: Uses `get_user_info` tool and returns a summary of the user's activity\nUser: What does hackernews say about careers in AI?\n  Output: Uses `search_stories` tool and returns a summary of the comments\n```\n\nA more detailed example with the puppeteer MCP server:\n\n```\nUser: What are the top stories of today?\n  Output: Uses `get_stories` tool and returns a story about AI\nUser: Can you use the puppeteer tool to read the article about <AI> and also use the hackernews tool to view the comments and give me a summary of what the main comments are about the article?\n  Output: Uses puppeteer tool to read the article about AI and then uses the `get_story_info` hn tool to get the comments and returns a summary of the comments\n```\n\n## Quickstart\n\n### Claude Desktop:\n\nUpdate the following:\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nWith the following for production:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-hn\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-hn\"]\n    }\n  }\n}\n```\n\n\n\n\n\n\n\n",
    "publisher": {
      "id": "erithwik",
      "name": "erithwik",
      "url": "https://github.com/erithwik/mcp-hn"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/erithwik/mcp-hn",
    "distribution": {
      "type": "pip",
      "package": "mcp-hn"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-hn"
      ],
      "env": {}
    }
  },
  {
    "id": "f957631f-51a5-46cb-8a84-ac315df9560c",
    "name": "mouhamadalmounayar/mcp-confluence",
    "description": "Mcp-Confluence",
    "fullDescription": "# Mcp-Confluence\n\n> This repository is still in early development stages, more prompts, resources and tools will be added in the future.\n\nThis repository contains the source code for a confluence context server.\nFor now, the server only contains prompts aimed to be used as slash commands by Zed.\n\n\n# Installation\n```bash\nnpm install -g mcp-confluence\n```\n# Usage\nThe following environment variables must be set:\n  - `API_KEY`: The API key to authenticate your confluence account.\n  - `DOMAIN_NAME`: The domain name of your confluence account. `example.atlassian.net`\n  - `EMAIL`: The email of your confluence account.\n\n```json\n\"confluence-context-server\": {\n  \"command\": \"node\",\n  \"args\": [\n    \"node_modules/mcp-confluence/dist/index.js\"\n  ],\n  \"env\": {\n    \"API_TOKEN\": \"\",\n    \"DOMAIN_NAME\": \"\",\n    \"EMAIL\": \"\"\n  }\n}\n```\n## Zed\n\nInstall the [confluence-context-server extension](https://github.com/mouhamadalmounayar/confluence-context-server).\nThen, add these settings to your zed settings.\n```json\n\n\"context_servers\": {\n    \"confluence-context-server\": {\n      \"settings\": {\n        \"api_token\": ,\n        \"domain_name\": ,\n        \"email\":\n      }\n    }\n  }\n```\n![2025-01-18 19-04-24](https://github.com/user-attachments/assets/4a3e6481-3190-45e2-af51-fbee0cf946e9)\n\n## MCP Inspector\nYou can also use the MCP Inspector to interact with the server.\n```bash\nnpm install @modelcontextprotocol/sdk\n\nnpx -y @modelcontextprotocol/inspector npx mcp-confluence\n```\n\n# Prompts\n## Confluence Page\n- name: `confluence-page`\n- description: Get a confluence page by its id\n- arguments:\n  - `pageId`: The id of the confluence page\n\n## Blog Post\n- name: `blog-post`\n- description: Get a blog post by its id\n- arguments:\n  - `blogId`: The id of the blog post\n",
    "publisher": {
      "id": "mouhamadalmounayar",
      "name": "mouhamadalmounayar",
      "url": "https://github.com/mouhamadalmounayar/mcp-confluence"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/mouhamadalmounayar/mcp-confluence",
    "distribution": {
      "type": "npm",
      "package": "mcp-confluence"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-confluence"
      ],
      "env": {
        "API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "DOMAIN_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "EMAIL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "669a2e18-27c9-4509-ace9-36f2a3cd81fd",
    "name": "ktanaka101/mcp-server-duckdb",
    "description": "mcp-server-duckdb",
    "fullDescription": "# mcp-server-duckdb\n\nA Model Context Protocol (MCP) server implementation for DuckDB, providing database interaction capabilities through MCP tools.\nIt would be interesting to have LLM analyze it. DuckDB is suitable for local analysis.\n\n## Overview\n\nThis server enables interaction with a DuckDB database through the Model Context Protocol, allowing for database operations like querying, table creation, and schema inspection.\n\n## Components\n\n### Resources\n\nCurrently, no custom resources are implemented.\n\n### Prompts\n\nCurrently, no custom prompts are implemented.\n\n### Tools\n\nThe server implements the following database interaction tools:\n\n- **read-query**: Execute SELECT queries to read data from the database\n  - **Input**: `query` (string) - Must be a SELECT statement\n  - **Output**: Query results as text\n\n- **write-query**: Execute INSERT, UPDATE, or DELETE queries to modify data\n  - **Input**: `query` (string) - Must be a non-SELECT statement\n  - **Output**: Query results as text\n\n- **create-table**: Create new tables in the database\n  - **Input**: `query` (string) - Must be a CREATE TABLE statement\n  - **Output**: Success confirmation message\n\n- **list-tables**: List all tables in the database\n  - **Input**: None required\n  - **Output**: List of tables from `information_schema`\n\n- **describe-table**: Get schema information for a specific table\n  - **Input**: `table_name` (string) - Name of the table to describe\n  - **Output**: Table schema information\n\n**Note**: When the server is running in `readonly` mode, the following tools are disabled to prevent any write operations:\n- **write-query**\n- **create-table**\n\nThis ensures that the Language Model (LLM) cannot perform any modifications to the database, maintaining data integrity and preventing unintended changes.\n\n## Configuration\n\n### Required Parameters\n\n- **db-path** (string): Path to the DuckDB database file\n  - The server will automatically create the database file and parent directories if they don't exist\n\n### Optional Parameters\n\n- **--readonly**: Run server in read-only mode\n  - **Description**: When this flag is set, the server operates in read-only mode. This means:\n    - The DuckDB database will be opened with `read_only=True`, preventing any write operations.\n    - If the specified database file does not exist, it **will not** be created.\n    - **Security Benefit**: Prevents the Language Model (LLM) from performing any write operations, ensuring that the database remains unaltered.\n  - **Reference**: For more details on read-only connections in DuckDB, see the [DuckDB Python API documentation](https://duckdb.org/docs/api/python/dbapi.html#read_only-connections).\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install DuckDB Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-duckdb):\n\n```bash\nnpx -y @smithery/cli install mcp-server-duckdb --client claude\n```\n\n### Claude Desktop Integration\n\nConfigure the MCP server in Claude Desktop's configuration file:\n\n#### MacOS\nLocation: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n#### Windows\nLocation: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"duckdb\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-duckdb\",\n        \"--db-path\",\n        \"~/mcp-server-duckdb/data/data.db\"\n      ]\n    }\n  }\n}\n```\n\n* Note: `~/mcp-server-duckdb/data/data.db` should be replaced with the actual path to the DuckDB database file.\n\n## Development\n\n### Prerequisites\n\n- Python with `uv` package manager\n- DuckDB Python package\n- MCP server dependencies\n\n### Debugging\n\nDebugging MCP servers can be challenging due to their stdio-based communication. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for the best debugging experience.\n\n#### Using MCP Inspector\n\n1. Install the inspector using npm:\n```bash\nnpx @modelcontextprotocol/inspector uv --directory ~/mcp-server-duckdb run mcp-server-duckdb\n```\n\n2. Open the provided URL in your browser to access the debugging interface\n\nThe inspector provides visibility into:\n- Request/response communication\n- Tool execution\n- Server state\n- Error messages\n",
    "publisher": {
      "id": "ktanaka101",
      "name": "ktanaka101",
      "url": "https://github.com/ktanaka101/mcp-server-duckdb"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ktanaka101/mcp-server-duckdb",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-duckdb"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-duckdb",
        "--db-path",
        "$ENVARG_DATABASE_PATH"
      ],
      "env": {
        "ENVARG_DATABASE_PATH": {
          "description": "Path to the DuckDB database file. The server will automatically create the database file and parent directories if they don't exist.",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "cc4aa979-a0d3-4547-b5d0-9ba5b04710eb",
    "name": "Ejb503/systemprompt-mcp-notion",
    "description": "SystemPrompt MCP Notion Server",
    "fullDescription": "# SystemPrompt MCP Notion Server\n\nA high-performance Model Context Protocol (MCP) server that seamlessly integrates Notion into your AI workflows. This server enables AI agents to interact with Notion pages and databases through a standardized protocol. This server supports MCP Sampling, which is required to the MCP to create and update Notion pages.\n\nA compatible MCP client is available [here](https://github.com/Ejb503/multimodal-mcp-client). Complicated AI usage is managed by sampling and LLMs.\n\n## Server Capabilities\n\nconst serverCapabilities: { capabilities: ServerCapabilities } = {\n  capabilities: {\n    resources: {\n      listChanged: true,\n    },\n    tools: {},\n    prompts: {\n      listChanged: true,\n    },\n    sampling: {},\n  },\n};\n\n## Key Features\n\n- **📝 Comprehensive Content Management**\n\n  - Create and update pages with rich text formatting\n  - Search across your Notion workspace\n\n- **🛠 Developer-Friendly**\n  - Extensive test coverage with Jest\n  - TypeScript support\n  - Comprehensive error handling\n  - Detailed logging and debugging tools\n\n## Prerequisites\n\nBefore using this server, you'll need:\n\n1. **Systemprompt API Key** (Free)\n\n   - Sign up at [systemprompt.io/console](https://systemprompt.io/console)\n   - Create a new API key in your dashboard\n\n2. **Notion Account and Workspace**\n\n   - Active Notion account\n   - Workspace with content you want to access\n\n3. **Notion Integration**\n\n   - Create at [notion.so/my-integrations](https://www.notion.so/my-integrations)\n   - Required capabilities:\n     - Read/Update/Insert content\n     - Database management\n     - Search functionality\n\n4. **MCP-Compatible Client**\n   - [Systemprompt MCP Client](https://github.com/Ejb503/multimodal-mcp-client)\n   - Any other MCP-compatible client\n\n## Quick Start\n\n1. **Installation**\n\n   ### Installing via Smithery\n\n   To install systemprompt-mcp-notion for Claude Desktop automatically via [Smithery](https://smithery.ai/server/systemprompt-mcp-notion):\n\n   ```bash\n   npx -y @smithery/cli install systemprompt-mcp-notion --client claude\n   ```\n\n   ```bash\n   npm install systemprompt-mcp-notion\n   ```\n\n2. **Configuration**\n   Create a `.env` file:\n\n   ```env\n   SYSTEMPROMPT_API_KEY=your_systemprompt_api_key\n   NOTION_API_KEY=your_notion_integration_token\n   ```\n\n3. **MCP Configuration**\n   Add the following to your MCP configuration JSON:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"npx\",\n         \"args\": [\"systemprompt-mcp-notion\"],\n         \"env\": {\n           \"SYSTEMPROMPT_API_KEY\": \"your_systemprompt_api_key\",\n           \"NOTION_API_KEY\": \"your_notion_integration_token\"\n         }\n       }\n     }\n   }\n   ```\n\n   Alternatively, if you've installed the package locally:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\"./node_modules/systemprompt-mcp-notion/build/index.js\"],\n         \"env\": {\n           \"SYSTEMPROMPT_API_KEY\": \"your_systemprompt_api_key\",\n           \"NOTION_API_KEY\": \"your_notion_integration_token\"\n         }\n       }\n     }\n   }\n   ```\n\n## Development\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/systemprompt-io/systemprompt-mcp-notion.git\n   cd systemprompt-mcp-notion\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Set up environment:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your API keys\n   ```\n\n### Testing\n\nWe maintain high test coverage using Jest:\n\n```bash\n# Run all tests\nnpm test\n\n# Watch mode for development\nnpm run test:watch\n\n# Generate coverage report\nnpm run test:coverage\n\n# Test Notion API connection\nnpm run test:notion\n```\n",
    "publisher": {
      "id": "Ejb503",
      "name": "Ejb503",
      "url": "https://github.com/Ejb503/systemprompt-mcp-notion"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Ejb503/systemprompt-mcp-notion",
    "distribution": {
      "type": "npm",
      "package": "systemprompt-mcp-notion"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "systemprompt-mcp-notion"
      ],
      "env": {
        "SYSTEMPROMPT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "NOTION_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "aa860bdb-dce8-42bc-b87e-aa40fb1f16e3",
    "name": "JoeBuildsStuff/mcp-jina-ai",
    "description": "Jina AI MCP Server",
    "fullDescription": "# Jina AI MCP Server\n\nAn MCP server that provides access to Jina AI's powerful web services through Claude. This server implements three main tools:\n\n- Web page reading and content extraction\n- Web search\n- Fact checking/grounding\n\n## Features\n\n### Tools\n\n#### `read_webpage`\n- Extract content from web pages in a format optimized for LLMs\n- Supports multiple output formats (Default, Markdown, HTML, Text, Screenshot, Pageshot)\n- Options for including links and images\n- Ability to generate alt text for images\n- Cache control options\n\n#### `search_web`\n- Search the web using Jina AI's search API\n- Configurable number of results (default: 5)\n- Support for image retention and alt text generation\n- Multiple return formats (markdown, text, html)\n- Returns structured results with titles, descriptions, and content\n\n#### `fact_check`\n- Fact-check statements using Jina AI's grounding engine\n- Provides factuality scores and supporting evidence \n- Optional deep-dive mode for more thorough analysis\n- Returns references with key quotes and supportive/contradictory classification\n\n## Setup\n\n### Prerequisites\n\nYou'll need a Jina AI API key to use this server. Get one for free at https://jina.ai/\n\n### Installation\n\nThere are two ways to use this server:\n\n#### Installing via Smithery\n\nTo install Jina AI for Claude Desktop automatically via [Smithery](https://smithery.ai/server/jina-ai-mcp-server):\n\n```bash\nnpx -y @smithery/cli install jina-ai-mcp-server --client claude\n```\n\n#### Option 1: NPX (Recommended)\nAdd this configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"jina-ai-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"jina-ai-mcp-server\"\n      ],\n      \"env\": {\n        \"JINA_API_KEY\": \"<YOUR_KEY>\"\n      }\n    }\n  }\n}\n```\n\n#### Option 2: Local Installation\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add this configuration to your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"jina-ai-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/jina-ai-mcp-server/dist/index.js\"\n      ],\n      \"env\": {\n        \"JINA_API_KEY\": \"<YOUR_KEY>\"\n      }\n    }\n  }\n}\n```\n\n### Config File Location\n\nOn MacOS:\n```bash\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nOn Windows:\n```bash\n%APPDATA%/Claude/claude_desktop_config.json\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## API Response Types\n\nAll tools return structured JSON responses that include:\n\n- Status codes and metadata\n- Formatted content based on the requested output type\n- Usage information (token counts)\n- When applicable: images, links, and additional metadata\n\nFor detailed schema information, see `schemas.ts`.\n",
    "publisher": {
      "id": "JoeBuildsStuff",
      "name": "JoeBuildsStuff",
      "url": "https://github.com/JoeBuildsStuff/mcp-jina-ai"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/JoeBuildsStuff/mcp-jina-ai",
    "distribution": {
      "type": "npm",
      "package": "jina-ai-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "jina-ai-mcp-server"
      ],
      "env": {
        "JINA_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5868458c-a888-4cf5-a434-be50be58c8f9",
    "name": "Text2Go/ai-humanizer-mcp-server",
    "description": "AI Humanize MCP Server",
    "fullDescription": "# AI Humanize MCP Server\n---\nA powerful Model Context Protocol (MCP) server that helps refine AI-generated content to sound more natural and human-like. Built with advanced AI detection and text enhancement capabilities.\n\nPowered by [text2go](https://text2go.ai).\n\n---\n# Table of Contents\n1. [Key Features](#-key-features)\n2. [Screenshot](#screenshot)\n3. [Prerequisites](#prerequisites)\n4. [Installation](#installation)\n5. [Usage](#-usage)\n   - [AI Text Detection](#ai-text-detection)\n\n---\n## Screenshot\n\n![screenshot](./image/screenshot.png)\n\n## ✨ Key Features\n\n- 🤖 **AI Detection** - Accurately identify AI-generated content\n- 👤 **Natural Language Enhancement** - Transform robotic text into natural human-like writing\n- ⭐ **Grammar Perfection** - Ensure flawless grammatical accuracy\n- 📋 **Readability Optimization** - Improve text flow and comprehension\n- 📏 **Length Control** - Adjust content length while preserving meaning\n- ⚖️ **Term Preservation** - Maintain specific terminology and key phrases\n\n\n## Prerequisites\n- node version >= 16\n- Claude Desktop latest version\n\n## Installation\n### By npx\n1. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Navigate to Settings → Developer → Edit Config\n   - Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"ai-humanizer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"ai-humanizer-mcp-server\"]\n    }\n  }\n}\n```\n2. Restart Claude Desktop to apply changes\n\n### By Source Code\n1. Clone this repository\n2. Install Dependencies\n```bash\nnpm install\n```\n3. Build the project\n```bash\nnpm run build\n```\n4. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Navigate to Settings → Developer → Edit Config\n   - Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"ai-humanizer\": {\n      \"command\": \"node\",\n      \"args\": [\"<YOUR_PROJECT_PATH>/build/index.js\"]\n    }\n  }\n}\n```\n5. Restart Claude Desktop to apply changes\n\n\n## 💡 Usage\n\n### AI Text Detection\n\nTo check if text is AI-generated, simply ask Claude:\n\n```text\nIs this text ai-generated:  In a fast-paced world, where technology is advancing at an exponential rate, it is crucial for businesses to adapt to new trends and keep up with the changing demands of the market.\n```\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Text2Go/ai-humanizer-mcp-server&type=Date)](https://star-history.com/#Text2Go/ai-humanizer-mcp-server&Date)",
    "publisher": {
      "id": "Text2Go",
      "name": "Text2Go",
      "url": "https://github.com/Text2Go/ai-humanizer-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Text2Go/ai-humanizer-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "ai-humanizer-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "ai-humanizer-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "09e52e7a-ce81-482e-a2c0-042a36201f4a",
    "name": "reeeeemo/ancestry-mcp",
    "description": "Ancestry MCP Server",
    "fullDescription": "# Ancestry MCP Server\n\nBuilt on top of the [Model Context Protocol Python SDK](https://modelcontextprotocol.io)\n\n## Overview\n\nPython server implementing Model Context Protocol (MCP) for interactibility with `.ged` files *(GEDCOM files, commonly seen on Ancestry.com)*\n\n## Features\n    \n- Read and parse .ged files\n- Rename `.ged` files\n- Search within .ged files for certain individuals, family, etc\n\n**Note:** The server will only allow operations within the directory specified via `args`\n\n## Resources\n\n- `gedcom://{file_name}`: `.ged` operations interface\n\n## Tools\n\n- **list_files**\n    - List a (or multiple) `.ged` file within the directory\n    - Input: `name` (string)\n\n- **rename_file**\n    - Renames a (or multiple) `.ged` file within the directory\n    - Inputs:\n        - `file_name` (string): Old file name\n        - `new_name` (string)\n \n- **view_file**\n    - Parses and reads full contents of a `.ged` file\n    - Can also parse and read multiple files\n    - Can get specific information out of file(s), such as date of birth, marriage, etc.\n    - Input: `name` (string)\n\n\n## Usage with Claude Desktop\n\n### Installing via Smithery\n\nTo install Ancestry GEDCOM Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-ancestry):\n\n```bash\nnpx -y @smithery/cli install mcp-server-ancestry --client claude\n```\n\n### Installing Manually\n1. First, install the package:\n```pip install mcp-server-ancestry```\n\n\n2. Add this to your `claude_desktop_config.json` \n\n```json\n{\n  \"mcpServers\": {\n     \"ancestry\": {\n       \"command\": \"mcp-server-ancestry\",\n       \"args\": [\"--gedcom-path\", \"path/to/your/gedcom/files\"]\n     }\n  }\n}\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
    "publisher": {
      "id": "reeeeemo",
      "name": "reeeeemo",
      "url": "https://github.com/reeeeemo/ancestry-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/reeeeemo/ancestry-mcp",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-ancestry"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-ancestry",
        "--gedcom-path",
        "$ENVARG_GEDCOM_FILES_DIRECTORY"
      ],
      "env": {
        "ENVARG_GEDCOM_FILES_DIRECTORY": {
          "description": "Directory path containing .ged (GEDCOM) files",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "fd668f0c-9676-404e-b86f-7b604b0b33a0",
    "name": "tatn/mcp-server-fetch-python",
    "description": "mcp-server-fetch-python",
    "fullDescription": "# mcp-server-fetch-python\n\nAn MCP server for fetching and transforming web content into various formats. This server provides comprehensive tools for extracting content from web pages, including support for JavaScript-rendered content and media files.\n\n<a href=\"https://glama.ai/mcp/servers/8d0zm2o56d\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/8d0zm2o56d/badge\" alt=\"Server Fetch Python MCP server\" /></a>\n\n## Features\n\n### Tools\n\nThe server provides four specialized tools:\n\n- **get-raw-text**: Extracts raw text content directly from URLs without browser rendering\n  - Arguments:\n    - `url`: URL of the target web page (text, JSON, XML, csv, tsv, etc.) (required)\n  - Best used for structured data formats or when fast, direct access is needed\n\n- **get-rendered-html**: Fetches fully rendered HTML content using a headless browser\n  - Arguments:\n    - `url`: URL of the target web page (required)\n  - Essential for modern web applications and SPAs that require JavaScript rendering\n\n- **get-markdown**: Converts web page content to well-formatted Markdown\n  - Arguments:\n    - `url`: URL of the target web page (required)\n  - Preserves structural elements while providing clean, readable text output\n\n- **get-markdown-from-media**: Performs AI-powered content extraction from media files\n  - Arguments:\n    - `url`: URL of the target media file (images, videos) (required)\n  - Utilizes computer vision and OCR for visual content analysis\n  - Requires a valid OPENAI_API_KEY to be set in environment variables\n  - Will return an error message if the API key is not set or if there are issues processing the media file\n\n## Usage\n\n### Claude Desktop\n\nTo use with Claude Desktop, add the server configuration:\n\nOn MacOS:  `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-fetch-python\"\n    ]\n  }\n}\n```\n\n\n## Environment Variables\n\nThe following environment variables can be configured:\n\n- **OPENAI_API_KEY**: Required for using the `get-markdown-from-media` tool. This key is needed for AI-powered image analysis and content extraction.\n- **PYTHONIOENCODING**: Set to \"utf-8\" if you encounter character encoding issues in the output.\n- **MODEL_NAME**: Specifies the model name to use. Defaults to \"gpt-4o\".\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-fetch-python\"\n    ],\n    \"env\": {\n        \"OPENAI_API_KEY\": \"sk-****\",\n        \"PYTHONIOENCODING\": \"utf-8\",\n        \"MODEL_NAME\": \"gpt-4o\",        \n    }\n  }\n}\n```\n\n\n### Local Installation\n\nAlternatively, you can install and run the server locally:\n\n```powershell\ngit clone https://github.com/tatn/mcp-server-fetch-python.git\ncd mcp-server-fetch-python\nuv sync\nuv build\n```\n\nThen add the following configuration to Claude Desktop config file:\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"path\\\\to\\\\mcp-server-fetch-python\",  # Replace with actual path to the cloned repository\n      \"run\",\n      \"mcp-server-fetch-python\"\n    ]\n  }\n}\n```\n\n## Development\n\n### Debugging\n\nYou can start the MCP Inspector using [npx](https://docs.npmjs.com/cli/v11/commands/npx)with the following commands:\n\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-fetch-python\n```\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory path\\\\to\\\\mcp-server-fetch-python run mcp-server-fetch-python\n```\n",
    "publisher": {
      "id": "tatn",
      "name": "tatn",
      "url": "https://github.com/tatn/mcp-server-fetch-python"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tatn/mcp-server-fetch-python",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-fetch-python"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-fetch-python"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "PYTHONIOENCODING": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "MODEL_NAME": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "f8b51d1d-ecdd-4247-87e7-94db94637cfa",
    "name": "spences10/mcp-jinaai-search",
    "description": "mcp-jinaai-search",
    "fullDescription": "# mcp-jinaai-search\n\nA Model Context Protocol (MCP) server for integrating Jina.ai's Search API with LLMs. This server provides efficient and comprehensive web search capabilities, optimised for retrieving clean, LLM-friendly content from the web.\n\n## Features\n\n- 🔍 Advanced web search through Jina.ai Search API\n- 🚀 Fast and efficient content retrieval\n- 📄 Clean text extraction with preserved structure\n- 🧠 Content optimised for LLMs\n- 🌐 Support for various content types including documentation\n- 🏗️ Built on the Model Context Protocol\n- 🔄 Configurable caching for performance\n- 🖼️ Optional image and link gathering\n- 🌍 Localisation support through browser locale\n- 🎯 Token budget control for response size\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-search\": {\n\t\t\t\"command\": \"node\",\n\t\t\t\"args\": [\"-y\", \"mcp-jinaai-search\"],\n\t\t\t\"env\": {\n\t\t\t\t\"JINAAI_API_KEY\": \"your-jinaai-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-search\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"JINAAI_API_KEY=your-jinaai-api-key npx mcp-jinaai-search\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `JINAAI_API_KEY`: Your Jina.ai API key (required)\n\n## API\n\nThe server implements a single MCP tool with configurable parameters:\n\n### search\n\nSearch the web and get clean, LLM-friendly content using Jina.ai\nReader. Returns top 5 results with URLs and clean content.\n\nParameters:\n\n- `query` (string, required): Search query\n- `format` (string, optional): Response format (\"json\" or \"text\").\n  Defaults to \"text\"\n- `no_cache` (boolean, optional): Bypass cache for fresh results.\n  Defaults to false\n- `token_budget` (number, optional): Maximum number of tokens for this\n  request\n- `browser_locale` (string, optional): Browser locale for rendering\n  content\n- `stream` (boolean, optional): Enable stream mode for large pages.\n  Defaults to false\n- `gather_links` (boolean, optional): Gather all links at the end of\n  response. Defaults to false\n- `gather_images` (boolean, optional): Gather all images at the end of\n  response. Defaults to false\n- `image_caption` (boolean, optional): Caption images in the content.\n  Defaults to false\n- `enable_iframe` (boolean, optional): Extract content from iframes.\n  Defaults to false\n- `enable_shadow_dom` (boolean, optional): Extract content from shadow\n  DOM. Defaults to false\n- `resolve_redirects` (boolean, optional): Follow redirect chains to\n  final URL. Defaults to true\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm run build\n```\n\n4. Run in development mode:\n\n```bash\npnpm run dev\n```\n\n### Publishing\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm version\n```\n\n3. Build and publish:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [Jina.ai Search API](https://jina.ai)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-jinaai-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-jinaai-search",
    "distribution": {
      "type": "npm",
      "package": "mcp-jinaai-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-jinaai-search"
      ],
      "env": {
        "JINAAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "6e801d57-8972-4c34-bed4-9f23cc9cbd5f",
    "name": "SecretiveShell/MCP-timeserver",
    "description": "MCP-timeserver",
    "fullDescription": "# MCP-timeserver\n\nA simple MCP server that exposes datetime information to agentic systems and chat REPLs\n\n## Components\n\n### Resources\n\nThe server implements a simple datetime:// URI scheme for accessing the current date/time in a given timezone, for example:\n```\ndatetime://Africa/Freetown/now\ndatetime://Europe/London/now\ndatetime://America/New_York/now\n```\n\n### Tools\n\nThe server exposes a tool to get the current local time in the system timezone:\n```python\n>>> get_current_time()\n\"The current time is 2024-12-18 19:59:36\"\n```\n\n## Quickstart\n\n### Install\n\nuse the following json\n\n```json\n{\n  \"mcpServers\": {\n    \"MCP-timeserver\": {\n      \"command\": \"uvx\",\n      \"args\": [\"MCP-timeserver\"]\n    }\n  }\n}\n```\n",
    "publisher": {
      "id": "SecretiveShell",
      "name": "SecretiveShell",
      "url": "https://github.com/SecretiveShell/MCP-timeserver"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/SecretiveShell/MCP-timeserver",
    "distribution": {
      "type": "pip",
      "package": "mcp-timeserver"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-timeserver"
      ],
      "env": {}
    }
  },
  {
    "id": "0a9780b0-7c11-44e5-8aa5-8f7823b2f437",
    "name": "cr7258/elasticsearch-mcp-server",
    "description": "Elasticsearch MCP Server",
    "fullDescription": "# Elasticsearch MCP Server\n\n## Overview\n\nA Model Context Protocol (MCP) server implementation that provides Elasticsearch interaction. This server enables searching documents, analyzing indices, and managing cluster through a set of tools.\n\n## Demo\n\nhttps://github.com/user-attachments/assets/f7409e31-fac4-4321-9c94-b0ff2ea7ff15\n\n## Features\n\n### Index Operations\n\n- `list_indices`: List all indices in the Elasticsearch cluster.\n- `get_mapping`: Retrieve the mapping configuration for a specific index.\n- `get_settings`: Get the settings configuration for a specific index.\n\n### Document Operations\n\n- `search_documents`: Search documents in an index using Elasticsearch Query DSL.\n\n### Cluster Operations\n\n- `get_cluster_health`: Get health status of the cluster.\n- `get_cluster_stats`: Get statistical information about the cluster.\n\n\n## Start Elasticsearch Cluster\n\nStart the Elasticsearch cluster using Docker Compose:\n\n```bash\ndocker-compose up -d\n```\n\nThis will start a 3-node Elasticsearch cluster and Kibana. Default Elasticsearch username `elastic`, password `test123`.\n\nYou can access Kibana from http://localhost:5601.\n\n## Usage with Claude Desktop\n\n### Option 1: Installing via Smithery\n\nTo install Elasticsearch Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/elasticsearch-mcp-server):\n\n```bash\nnpx -y @smithery/cli install elasticsearch-mcp-server --client claude\n```\n\n### Option 2: Using uvx\n\nUsing `uvx` will automatically install the package from PyPI, no need to clone the repository locally. Add the following configuration to Claude Desktop's config file `claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"elasticsearch-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"elasticsearch-mcp-server\"\n      ],\n      \"env\": {\n        \"ELASTIC_HOST\": \"https://localhost:9200\",\n        \"ELASTIC_USERNAME\": \"elastic\",\n        \"ELASTIC_PASSWORD\": \"test123\"\n      }\n    }\n  }\n}\n```\n\n### Option 3: Using uv with local development\n\nUsing `uv` requires cloning the repository locally and specifying the path to the source code. Add the following configuration to Claude Desktop's config file `claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"elasticsearch\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/src/elasticsearch_mcp_server\",\n        \"run\",\n        \"elasticsearch-mcp-server\"\n      ],\n      \"env\": {\n        \"ELASTIC_HOST\": \"https://localhost:9200\",\n        \"ELASTIC_USERNAME\": \"elastic\",\n        \"ELASTIC_PASSWORD\": \"test123\"\n      }\n    }\n  }\n}\n```\n\n- On macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nRestart Claude Desktop to load the new MCP server.\n\nNow you can interact with your Elasticsearch cluster through Claude using natural language commands like:\n- \"List all indices in the cluster\"\n- \"How old is the student Bob?\"\n- \"Show me the cluster health status\"\n\n## License\n\nThis project is licensed under the Apache License Version 2.0 - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "cr7258",
      "name": "cr7258",
      "url": "https://github.com/cr7258/elasticsearch-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cr7258/elasticsearch-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "elasticsearch-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "elasticsearch-mcp-server"
      ],
      "env": {
        "ELASTIC_HOST": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ELASTIC_USERNAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ELASTIC_PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "c42f2950-9596-4823-9e3c-8084181d1985",
    "name": "DMontgomery40/deepseek-mcp-server",
    "description": "DeepSeek MCP Server",
    "fullDescription": "# DeepSeek MCP Server\n\nA Model Context Protocol (MCP) server for the DeepSeek API, allowing seamless integration of DeepSeek's powerful language models with MCP-compatible applications like Claude Desktop.\n\n## *Anonymously*  use DeepSeek API  --  Only a proxy is seen on the other side \n\n## Installation\n\n### Installing via Smithery\n\nTo install DeepSeek MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@dmontgomery40/deepseek-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @dmontgomery40/deepseek-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install -g deepseek-mcp-server\n```\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"deepseek\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"deepseek-mcp-server\"\n      ],\n      \"env\": {\n        \"DEEPSEEK_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Features\n\n> Note: The server intelligently handles these natural language requests by mapping them to appropriate configuration changes. You can also query the current settings and available models:\n\n- User: \"What models are available?\"\n  - Response: Shows list of available models and their capabilities via the models resource.\n- User: \"What configuration options do I have?\"\n  - Response: Lists all available configuration options via the model-config resource.\n- User: \"What is the current temperature setting?\"\n  - Response: Displays the current temperature setting.\n- User: \"Start a multi-turn conversation. With the following settings: model: 'deepseek-chat', make it not too creative, and \n   allow 8000 tokens.\"\n  - Response: *Starts a multi-turn conversation with the specified settings.*\n\n### Automatic Model Fallback if R1 is down\n\n- If the primary model (R1) is down (called `deepseek-reasoner` in the server), the server will automatically attempt to try with v3 (called `deepseek-chat` in the server) \n> Note: You can switch back and forth anytime as well, by just giving your prompt and saying \"use `deepseek-reasoner`\" or \"use `deepseek-chat`\"\n- V3 is recommended for general purpose use, while R1 is recommended for more technical and complex queries, primarily due to speed and token usage\n\n###  Resource discovery for available models and configurations:\n   * Custom model selection\n   * Temperature control (0.0 - 2.0)\n   * Max tokens limit\n   * Top P sampling (0.0 - 1.0)\n   * Presence penalty (-2.0 - 2.0)\n   * Frequency penalty (-2.0 - 2.0)\n\n## Enhanced Conversation Features\n\n**Multi-turn conversation support:**\n* Maintains complete message history and context across exchanges\n* Preserves configuration settings throughout the conversation\n* Handles complex dialogue flows and follow-up chains automatically\n\nThis feature is particularly valuable for two key use cases:\n\n1. **Training & Fine-tuning:**\n   Since DeepSeek is open source, many users are training their own versions. The multi-turn support provides properly formatted conversation data that's essential for training high-quality dialogue models.\n\n2. **Complex Interactions:**\n   For production use, this helps manage longer conversations where context is crucial:\n   * Multi-step reasoning problems\n   * Interactive troubleshooting sessions\n   * Detailed technical discussions\n   * Any scenario where context from earlier messages impacts later responses\n\nThe implementation handles all context management and message formatting behind the scenes, letting you focus on the actual interaction rather than the technical details of maintaining conversation state.\n\n\n\n\n## Testing with MCP Inspector\n\nYou can test the server locally using the MCP Inspector tool:\n\n1. Build the server:\n   ```bash\n   npm run build\n   ```\n\n2. Run the server with MCP Inspector:\n   ```bash\n   # Make sure to specify the full path to the built server\n   npx @modelcontextprotocol/inspector node ./build/index.js\n   ```\n\nThe inspector will open in your browser and connect to the server via stdio transport. You can:\n- View available tools\n- Test chat completions with different parameters\n- Debug server responses\n- Monitor server performance\n\nNote: The server uses DeepSeek's R1 model (deepseek-reasoner) by default, which provides state-of-the-art performance for reasoning and general tasks.\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "DMontgomery40",
      "name": "DMontgomery40",
      "url": "https://github.com/DMontgomery40/deepseek-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/DMontgomery40/deepseek-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "deepseek-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "deepseek-mcp-server"
      ],
      "env": {
        "DEEPSEEK_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "da7fc257-b7f5-42f5-9899-cffd26c64679",
    "name": "Sunwood-ai-labs/obsidian-mcp",
    "description": "obsidian-mcp MCP Server",
    "fullDescription": "# obsidian-mcp MCP Server\n\nA Model Context Protocol server for Obsidian integration\n\nThis is a TypeScript-based MCP server that implements integration with Obsidian. It demonstrates core MCP concepts by providing:\n\n- Resources representing Obsidian vault contents\n- Tools for accessing vault data\n- API integration with Obsidian\n\n## Project Statistics\n\n- Total lines of code: 345\n- Main files:\n  - `src/tool-handlers.ts` (76 lines)\n  - `src/resource-handlers.ts` (45 lines)\n  - `src/server.ts` (32 lines)\n  - `src/api-client.ts` (25 lines)\n\n## Directory Structure\n\n```\nobsidian-mcp/\n├── .codegpt/\n│   └── head\n├── src/\n│   ├── api-client.ts\n│   ├── index.ts\n│   ├── resource-handlers.ts\n│   ├── server.ts\n│   └── tool-handlers.ts\n├── .SourceSageignore\n├── package.json\n├── README.md\n└── tsconfig.json\n```\n\n## Features\n\n### Resources\n- Access Obsidian server info via `obsidian://server-info` URI\n- Get vault contents with metadata\n- JSON format for easy integration\n\n### Tools\n- `get_vault_contents` - Retrieve contents of Obsidian vault\n  - Takes path as optional parameter (default: root directory)\n  - Returns structured JSON response\n\n### API Integration\n- Secure HTTPS connection with Obsidian API\n- Custom axios client with error handling\n- Windows path normalization support\n\n## Development\n\n### Prerequisites\n- Node.js v18+\n- TypeScript 5.3+\n- Obsidian API key (set as OBSIDIAN_API_KEY environment variable)\n\n### Setup\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Start development server with auto-rebuild\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"/path/to/obsidian-mcp/build/index.js\",\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Debugging\n\nWe recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Dependencies\n\n### Runtime\n- @modelcontextprotocol/sdk: MCP server implementation\n- axios: HTTP client for API communication\n\n### Development\n- @types/node: TypeScript definitions for Node.js\n- typescript: TypeScript compiler\n",
    "publisher": {
      "id": "Sunwood-ai-labs",
      "name": "Sunwood-ai-labs",
      "url": "https://github.com/Sunwood-ai-labs/obsidian-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Sunwood-ai-labs/obsidian-mcp",
    "distribution": {
      "type": "npm",
      "package": "obsidian-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "obsidian-mcp"
      ],
      "env": {
        "OBSIDIAN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "a47e886a-8694-4bf1-9ca2-789300e33d30",
    "name": "Bigsy/maven-mcp-server",
    "description": "Maven Dependencies MCP Server",
    "fullDescription": "# Maven Dependencies MCP Server\n\nAn MCP (Model Context Protocol) server that provides tools for checking Maven dependency versions. This server enables LLMs to verify Maven dependencies and retrieve their latest versions from Maven Central Repository.\n\n## Installation\n\nYou can install this MCP server globally using npm:\n\n```bash\nnpm install -g mcp-maven-deps\n```\n\nOr run it directly using npx:\n\n```bash\nnpx mcp-maven-deps\n```\n\n### Installing via Smithery\n\nTo install Maven Dependencies Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/maven-deps-server):\n\n```bash\nnpx -y @smithery/cli install maven-deps-server --client claude\n```\n\n## Features\n\n- Query the latest version of any Maven dependency\n- Verify if a Maven dependency exists\n- Check if a specific version of a dependency exists\n- Support for full Maven coordinates including packaging and classifier\n- Real-time access to Maven Central Repository data\n- Compatible with multiple build tool formats (Maven, Gradle, SBT, Mill)\n\n\n\nFor development:\n\n1. Clone this repository\n2. Install dependencies: `npm install`\n3. Build the server: `npm run build`\n\n## Configuration\n\nAdd the server to your MCP settings configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"maven-deps-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-maven-deps\"]\n    }\n  }\n}\n```\n\nIf installed globally, you can also use:\n\n```json\n{\n  \"mcpServers\": {\n    \"maven-deps-server\": {\n      \"command\": \"mcp-maven-deps\"\n    }\n  }\n}\n```\n\n## Available Tools\n\n### get_maven_latest_version\n\nRetrieves the latest version of a Maven dependency.\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"dependency\": {\n      \"type\": \"string\",\n      \"description\": \"Maven coordinate in format \\\"groupId:artifactId[:version][:packaging][:classifier]\\\" (e.g. \\\"org.springframework:spring-core\\\" or \\\"org.springframework:spring-core:5.3.20:jar\\\")\"\n    }\n  },\n  \"required\": [\"dependency\"]\n}\n```\n\n**Example Usage:**\n```typescript\nconst result = await mcpClient.callTool(\"maven-deps-server\", \"get_maven_latest_version\", {\n  dependency: \"org.springframework:spring-core\"\n});\n// Returns: \"6.2.2\"\n```\n\n### check_maven_version_exists\n\nChecks if a specific version of a Maven dependency exists. The version can be provided either in the dependency string or as a separate parameter.\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"dependency\": {\n      \"type\": \"string\",\n      \"description\": \"Maven coordinate in format \\\"groupId:artifactId[:version][:packaging][:classifier]\\\" (e.g. \\\"org.springframework:spring-core\\\" or \\\"org.springframework:spring-core:5.3.20:jar\\\")\"\n    },\n    \"version\": {\n      \"type\": \"string\",\n      \"description\": \"Version to check if not included in dependency string\"\n    }\n  },\n  \"required\": [\"dependency\"]\n}\n```\n\n**Example Usage:**\n```typescript\n// Using version in dependency string\nconst result1 = await mcpClient.callTool(\"maven-deps-server\", \"check_maven_version_exists\", {\n  dependency: \"org.springframework:spring-core:5.3.20\"\n});\n\n// Using separate version parameter\nconst result2 = await mcpClient.callTool(\"maven-deps-server\", \"check_maven_version_exists\", {\n  dependency: \"org.springframework:spring-core\",\n  version: \"5.3.20\"\n});\n```\n\n## Implementation Details\n\n- Uses Maven Central's REST API to fetch dependency information\n- Supports full Maven coordinates (groupId:artifactId:version:packaging:classifier)\n- Sorts results by timestamp to ensure the latest version is returned\n- Includes error handling for invalid dependencies and API issues\n- Returns clean, parseable version strings for valid dependencies\n- Provides boolean responses for version existence checks\n\n## Error Handling\n\nThe server handles various error cases:\n- Invalid dependency format\n- Invalid version format\n- Non-existent dependencies\n- API connection issues\n- Malformed responses\n- Missing version information\n\n## Development\n\nTo modify or extend the server:\n\n1. Make changes to `src/index.ts`\n2. Rebuild using `npm run build`\n3. Restart the MCP server to apply changes\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "Bigsy",
      "name": "Bigsy",
      "url": "https://github.com/Bigsy/maven-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Bigsy/maven-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-maven-deps"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-maven-deps"
      ],
      "env": {}
    }
  },
  {
    "id": "eca2d8c0-7beb-4b58-8bde-a80f3f73bfc5",
    "name": "mcp-server-sentry",
    "description": "mcp-server-sentry: A Sentry MCP server",
    "fullDescription": "# mcp-server-sentry: A Sentry MCP server\n\n## Overview\n\nA Model Context Protocol server for retrieving and analyzing issues from Sentry.io. This server provides tools to inspect error reports, stacktraces, and other debugging information from your Sentry account.\n\n### Tools\n\n1. `get_sentry_issue`\n   - Retrieve and analyze a Sentry issue by ID or URL\n   - Input:\n     - `issue_id_or_url` (string): Sentry issue ID or URL to analyze\n   - Returns: Issue details including:\n     - Title\n     - Issue ID\n     - Status\n     - Level\n     - First seen timestamp\n     - Last seen timestamp\n     - Event count\n     - Full stacktrace\n\n### Prompts\n\n1. `sentry-issue`\n   - Retrieve issue details from Sentry\n   - Input:\n     - `issue_id_or_url` (string): Sentry issue ID or URL\n   - Returns: Formatted issue details as conversation context\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-sentry*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-sentry` via pip:\n\n```\npip install mcp-server-sentry\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_sentry\n```\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n</details>\n\n<details>\n\n<details>\n<summary>Using docker</summary>\n\n```json\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n</details>\n\n<details>\n\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n}\n```\n</details>\n\n### Usage with [Zed](https://github.com/zed-industries/zed)\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-sentry\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n    }\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-sentry\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_sentry\", \"--auth-token\", \"YOUR_SENTRY_TOKEN\"]\n  }\n},\n```\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-sentry --auth-token YOUR_SENTRY_TOKEN\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ncd path/to/servers/src/sentry\nnpx @modelcontextprotocol/inspector uv run mcp-server-sentry --auth-token YOUR_SENTRY_TOKEN\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "Model Context Protocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-sentry"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-sentry",
        "--auth-token",
        "$ENVARG_YOUR_SENTRY_TOKEN"
      ],
      "env": {
        "ENVARG_YOUR_SENTRY_TOKEN": {
          "description": "Your Sentry Token",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "63a5fe37-a1ef-4e52-8af1-f108e9726bcd",
    "name": "Flux159/mcp-server-kubernetes",
    "description": "mcp-server-kubernetes",
    "fullDescription": "# mcp-server-kubernetes\n\nMCP Server that can connect to a Kubernetes cluster and manage it.\n\nhttps://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed\n\n## Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-kubernetes\"]\n    }\n  }\n}\n```\n\nThe server will automatically connect to your current kubectl context. Make sure you have:\n\n1. kubectl installed and in your PATH\n2. A valid kubeconfig file with contexts configured\n3. Access to a Kubernetes cluster configured for kubectl (e.g. minikube, Rancher Desktop, GKE, etc.)\n\nYou can verify your connection by asking Claude to list your pods or create a test deployment.\n\nIf you have errors, open up a standard terminal and run `kubectl get pods` to see if you can connect to your cluster without credentials issues.\n\n## Features\n\n- [x] Connect to a Kubernetes cluster\n- [x] List all pods\n- [x] List all services\n- [x] List all deployments\n- [x] Create a pod\n- [x] Delete a pod\n- [x] List all namespaces\n- [ ] Port forward to a pod\n- [ ] Get logs from a pod for debugging\n- [ ] Choose namespace for next commands (memory)\n- [ ] Support Helm for installing charts\n\n## In Progress\n\n- [ ] [Docker support](https://github.com/Flux159/mcp-server-kubernetes/pull/9)\n\n## Development & Testing\n\n```bash\ngit clone https://github.com/Flux159/mcp-server-kubernetes.git\ncd mcp-server-kubernetes\nbun install\nbun run test\n```\n\n## Not planned\n\nAuthentication / adding clusters to kubectx.\n",
    "publisher": {
      "id": "Flux159",
      "name": "Flux159",
      "url": "https://github.com/Flux159/mcp-server-kubernetes"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Flux159/mcp-server-kubernetes",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-kubernetes"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-kubernetes"
      ],
      "env": {}
    }
  },
  {
    "id": "34c0f5bd-2f1d-45dd-87b0-5c12be3a6eff",
    "name": "suekou/mcp-notion-server",
    "description": "Notion MCP Server",
    "fullDescription": "# Notion MCP Server\n\nMCP Server for the Notion API, enabling Claude to interact with Notion workspaces.\n\n## Setup\n\nHere is a detailed explanation of the steps mentioned above in the following articles:\n\n- English Version: https://dev.to/suekou/operating-notion-via-claude-desktop-using-mcp-c0h\n- Japanese Version: https://qiita.com/suekou/items/44c864583f5e3e6325d9\n\n1. **Create a Notion Integration**:\n\n   - Visit the [Notion Your Integrations page](https://www.notion.so/profile/integrations).\n   - Click \"New Integration\".\n   - Name your integration and select appropriate permissions (e.g., \"Read content\", \"Update content\").\n\n2. **Retrieve the Secret Key**:\n\n   - Copy the \"Internal Integration Token\" from your integration.\n   - This token will be used for authentication.\n\n3. **Add the Integration to Your Workspace**:\n\n   - Open the page or database you want the integration to access in Notion.\n   - Click the navigation button in the top right corner.\n   - Click \"Connect to\" button and select your integration.\n\n4. **Configure Claude Desktop**:\n   Add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"notion\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@suekou/mcp-notion-server\"],\n      \"env\": {\n        \"NOTION_API_TOKEN\": \"your-integration-token\"\n      }\n    }\n  }\n}\n```\n\nor\n\n```json\n{\n  \"mcpServers\": {\n    \"notion\": {\n      \"command\": \"node\",\n      \"args\": [\"your-built-file-path\"],\n      \"env\": {\n        \"NOTION_API_TOKEN\": \"your-integration-token\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\nIf you encounter permission errors:\n\n1. Ensure the integration has the required permissions.\n2. Verify that the integration is invited to the relevant pages or databases.\n3. Confirm the token and configuration are correctly set in `claude_desktop_config.json`.\n\n## Tools\n\n1. `notion_append_block_children`\n\n   - Append child blocks to a parent block.\n   - Required inputs:\n     - `block_id` (string): The ID of the parent block.\n     - `children` (array): Array of block objects to append.\n   - Returns: Information about the appended blocks.\n\n2. `notion_retrieve_block`\n\n   - Retrieve information about a specific block.\n   - Required inputs:\n     - `block_id` (string): The ID of the block to retrieve.\n   - Returns: Detailed information about the block.\n\n3. `notion_retrieve_block_children`\n\n   - Retrieve the children of a specific block.\n   - Required inputs:\n     - `block_id` (string): The ID of the parent block.\n   - Optional inputs:\n     - `start_cursor` (string): Cursor for the next page of results.\n     - `page_size` (number, default: 100, max: 100): Number of blocks to retrieve.\n   - Returns: List of child blocks.\n\n4. `notion_delete_block`\n\n   - Delete a specific block.\n   - Required inputs:\n     - `block_id` (string): The ID of the block to delete.\n   - Returns: Confirmation of the deletion.\n\n5. `notion_retrieve_page`\n\n   - Retrieve information about a specific page.\n   - Required inputs:\n     - `page_id` (string): The ID of the page to retrieve.\n   - Returns: Detailed information about the page.\n\n6. `notion_update_page_properties`\n\n   - Update properties of a page.\n   - Required inputs:\n     - `page_id` (string): The ID of the page to update.\n     - `properties` (object): Properties to update.\n   - Returns: Information about the updated page.\n\n7. `notion_create_database`\n\n   - Create a new database.\n   - Required inputs:\n     - `parent` (object): Parent object of the database.\n     - `title` (array): Title of the database as a rich text array.\n     - `properties` (object): Property schema of the database.\n   - Returns: Information about the created database.\n\n8. `notion_query_database`\n\n   - Query a database.\n   - Required inputs:\n     - `database_id` (string): The ID of the database to query.\n   - Optional inputs:\n     - `filter` (object): Filter conditions.\n     - `sorts` (array): Sorting conditions.\n     - `start_cursor` (string): Cursor for the next page of results.\n     - `page_size` (number, default: 100, max: 100): Number of results to retrieve.\n   - Returns: List of results from the query.\n\n9. `notion_retrieve_database`\n\n   - Retrieve information about a specific database.\n   - Required inputs:\n     - `database_id` (string): The ID of the database to retrieve.\n   - Returns: Detailed information about the database.\n\n10. `notion_update_database`\n\n    - Update information about a database.\n    - Required inputs:\n      - `database_id` (string): The ID of the database to update.\n    - Optional inputs:\n      - `title` (array): New title for the database.\n      - `description` (array): New description for the database.\n      - `properties` (object): Updated property schema.\n    - Returns: Information about the updated database.\n\n11. `notion_create_database_item`\n\n    - Create a new item in a Notion database.\n    - Required inputs:\n      - `database_id` (string): The ID of the database to add the item to.\n      - `properties` (object): The properties of the new item. These should match the database schema.\n    - Returns: Information about the newly created item.\n\n12. `notion_search`\n\n    - Search pages or databases by title.\n    - Optional inputs:\n      - `query` (string): Text to search for in page or database titles.\n      - `filter` (object): Criteria to limit results to either only pages or only databases.\n      - `sort` (object): Criteria to sort the results\n      - `start_cursor` (string): Pagination start cursor.\n      - `page_size` (number, default: 100, max: 100): Number of results to retrieve.\n    - Returns: List of matching pages or databases.\n\n13. `notion_list_all_users`\n\n    - List all users in the Notion workspace.\n    - Note: This function requires upgrading to the Notion Enterprise plan and using an Organization API key to avoid permission errors.\n    - Optional inputs:\n      - start_cursor (string): Pagination start cursor for listing users.\n      - page_size (number, max: 100): Number of users to retrieve.\n    - Returns: A paginated list of all users in the workspace.\n\n14. `notion_retrieve_user`\n\n    - Retrieve a specific user by user_id in Notion.\n    - Note: This function requires upgrading to the Notion Enterprise plan and using an Organization API key to avoid permission errors.\n    - Required inputs:\n      - user_id (string): The ID of the user to retrieve.\n    - Returns: Detailed information about the specified user.\n\n15. `notion_retrieve_bot_user`\n\n    - Retrieve the bot user associated with the current token in Notion.\n    - Returns: Information about the bot user, including details of the person who authorized the integration.\n\n16. `notion_create_comment`\n\n    - Create a comment in Notion.\n    - Requires the integration to have 'insert comment' capabilities.\n    - Either specify a `parent` object with a `page_id` or a `discussion_id`, but not both.\n    - Required inputs:\n      - `rich_text` (array): Array of rich text objects representing the comment content.\n    - Optional inputs:\n      - `parent` (object): Must include `page_id` if used.\n      - `discussion_id` (string): An existing discussion thread ID.\n    - Returns: Information about the created comment.\n\n17. `notion_retrieve_comments`\n    - Retrieve a list of unresolved comments from a Notion page or block.\n    - Requires the integration to have 'read comment' capabilities.\n    - Required inputs:\n      - `block_id` (string): The ID of the block or page whose comments you want to retrieve.\n    - Optional inputs:\n      - `start_cursor` (string): Pagination start cursor.\n      - `page_size` (number, max: 100): Number of comments to retrieve.\n    - Returns: A paginated list of comments associated with the specified block or page.\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "suekou",
      "name": "suekou",
      "url": "https://github.com/suekou/mcp-notion-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/suekou/mcp-notion-server",
    "distribution": {
      "type": "npm",
      "package": "@suekou/mcp-notion-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@suekou/mcp-notion-server"
      ],
      "env": {
        "NOTION_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "897ecc9e-88e8-4e3f-9bf8-cf583abf405e",
    "name": "turlockmike/mcp-rand",
    "description": "MCP Rand",
    "fullDescription": "# MCP Rand\n\nA Model Context Protocol (MCP) server providing various random generation utilities, including UUID, numbers, strings, passwords, Gaussian distribution, dice rolling, and card drawing.\n\n## Installation\n\n```bash\nnpm install mcp-rand\n```\n\nOr install globally:\n\n```bash\nnpm install -g mcp-rand\n```\n\n## Features\n\n### UUID Generator\n- Generates RFC 4122 version 4 UUIDs\n- Uses Node's native crypto module for secure random generation\n- No parameters required\n\n### Random Number Generator\n- Generates random numbers within a specified range\n- Configurable minimum and maximum values (inclusive)\n- Defaults to range 0-100 if no parameters provided\n\n### Gaussian Random Generator\n- Generates random numbers following a Gaussian (normal) distribution\n- Normalized to range 0-1\n- No parameters required\n\n### Random String Generator\n- Generates random strings with configurable length and character sets\n- Supports multiple character sets:\n  * alphanumeric (default): A-Z, a-z, 0-9\n  * numeric: 0-9\n  * lowercase: a-z\n  * uppercase: A-Z\n  * special: !@#$%^&*()_+-=[]{};\\'\"\\\\|,.<>/?\n- Configurable string length (defaults to 10)\n\n### Password Generator\n- Generates strong passwords with a mix of character types\n- Ensures at least one character from each type (uppercase, lowercase, numbers, special)\n- Configurable length (minimum 8, default 16)\n- WARNING: While passwords are generated locally, it's recommended to use a dedicated password manager\n\n### Dice Roller\n- Roll multiple dice using standard dice notation\n- Supports notation like \"2d6\" (two six-sided dice), \"1d20\" (one twenty-sided die)\n- Returns individual rolls and total for each set of dice\n- Can roll multiple different dice sets at once (e.g., \"2d6\", \"1d20\", \"4d4\")\n\n### Card Drawer\n- Draw cards from a standard 52-card deck\n- Maintains deck state between draws using base64 encoding\n- Returns drawn cards and remaining deck state\n- Supports drawing any number of cards up to the deck size\n- Properly shuffles available cards before each draw\n\n## Usage\n\n### As a CLI Tool\n\n```bash\nnpx mcp-rand\n```\n\n### Integration with MCP Clients\n\nAdd to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-rand\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mcp-rand/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### Example Usage\n\n```typescript\n// Generate UUID\nconst uuid = await client.callTool('generate_uuid', {});\nconsole.log(uuid); // e.g., \"550e8400-e29b-41d4-a716-446655440000\"\n\n// Generate random number\nconst number = await client.callTool('generate_random_number', {\n  min: 1,\n  max: 100\n});\nconsole.log(number); // e.g., 42\n\n// Generate Gaussian random number\nconst gaussian = await client.callTool('generate_gaussian', {});\nconsole.log(gaussian); // e.g., 0.6827\n\n// Generate random string\nconst string = await client.callTool('generate_string', {\n  length: 15,\n  charset: 'alphanumeric'\n});\nconsole.log(string); // e.g., \"aB9cD8eF7gH6iJ5\"\n\n// Generate password\nconst password = await client.callTool('generate_password', {\n  length: 20\n});\nconsole.log(password); // e.g., \"aB9#cD8$eF7@gH6*iJ5\"\n\n// Roll dice\nconst rolls = await client.callTool('roll_dice', {\n  dice: ['2d6', '1d20', '4d4']\n});\nconsole.log(rolls);\n/* Output example:\n[\n  {\n    \"dice\": \"2d6\",\n    \"rolls\": [3, 1],\n    \"total\": 4\n  },\n  {\n    \"dice\": \"1d20\",\n    \"rolls\": [4],\n    \"total\": 4\n  },\n  {\n    \"dice\": \"4d4\",\n    \"rolls\": [2, 3, 2, 3],\n    \"total\": 10\n  }\n]\n*/\n\n// Draw cards\nconst draw1 = await client.callTool('draw_cards', {\n  count: 5\n});\nconsole.log(draw1);\n/* Output example:\n{\n  \"drawnCards\": [\n    { \"suit\": \"hearts\", \"value\": \"A\" },\n    { \"suit\": \"diamonds\", \"value\": \"7\" },\n    { \"suit\": \"clubs\", \"value\": \"K\" },\n    { \"suit\": \"spades\", \"value\": \"2\" },\n    { \"suit\": \"hearts\", \"value\": \"10\" }\n  ],\n  \"remainingCount\": 47,\n  \"deckState\": \"t//+///bDw==\"\n}\n*/\n\n// Draw more cards using previous deck state\nconst draw2 = await client.callTool('draw_cards', {\n  count: 3,\n  deckState: draw1.deckState\n});\nconsole.log(draw2);\n/* Output example:\n{\n  \"drawnCards\": [\n    { \"suit\": \"diamonds\", \"value\": \"Q\" },\n    { \"suit\": \"clubs\", \"value\": \"5\" },\n    { \"suit\": \"spades\", \"value\": \"J\" }\n  ],\n  \"remainingCount\": 44,\n  \"deckState\": \"l//+//zbDw==\"\n}\n*/\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for development setup and guidelines.\n\n## License\n\nISC\n",
    "publisher": {
      "id": "turlockmike",
      "name": "turlockmike",
      "url": "https://github.com/turlockmike/mcp-rand"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/turlockmike/mcp-rand",
    "distribution": {
      "type": "npm",
      "package": "mcp-rand"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-rand"
      ],
      "env": {}
    }
  },
  {
    "id": "e437794f-29e8-42af-ad36-43076ce77dbd",
    "name": "kazuph/mcp-fetch",
    "description": "MCP Fetch",
    "fullDescription": "# MCP Fetch\n\nModel Context Protocol server for fetching web content and processing images. This allows Claude Desktop (or any MCP client) to fetch web content and handle images appropriately.\n\n\n## Quick Start (For Users)\n\nTo use this tool with Claude Desktop, simply add the following to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"tools\": {\n    \"fetch\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-fetch\"]\n    }\n  }\n}\n```\n\nThis will automatically download and run the latest version of the tool when needed.\n\n### Required Setup\n\n1. Enable Accessibility for Claude:\n   - Open System Settings\n   - Go to Privacy & Security > Accessibility\n   - Click the \"+\" button\n   - Add Claude from your Applications folder\n   - Turn ON the toggle for Claude\n\nThis accessibility setting is required for automated clipboard operations (Cmd+V) to work properly.\n\n## For Developers\n\nThe following sections are for those who want to develop or modify the tool.\n\n## Prerequisites\n\n- Node.js 18+\n- macOS (for clipboard operations)\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n## Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-fetch.git\ncd mcp-fetch\nnpm install\nnpm run build\n```\n\n## Image Processing Specifications\n\nWhen processing images from web content, the following limits are applied:\n\n- Maximum 6 images per group\n- Maximum height of 8000 pixels per group\n- Maximum size of 30MB per group\n\nIf content exceeds these limits, images will be automatically split into multiple groups, and you'll need to paste (Cmd+V) multiple times.\n\n## Configuration\n\n1. Make sure Claude Desktop is installed and running.\n\n2. Install tsx globally if you haven't:\n```bash\nnpm install -g tsx\n# or\npnpm add -g tsx\n```\n\n3. Modify your Claude Desktop config located at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nYou can easily find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\nAdd the following to your MCP client's configuration:\n\n```json\n{\n  \"tools\": {\n    \"fetch\": {\n      \"args\": [\"tsx\", \"/path/to/mcp-fetch/index.ts\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `fetch`: Retrieves URLs from the Internet and extracts their content as markdown. Images are automatically processed and prepared for clipboard operations.\n\n## Notes\n\n- This tool is designed for macOS only due to its dependency on macOS-specific clipboard operations.\n- Images are processed using Sharp for optimal performance and quality.\n- When multiple images are found, they are merged vertically with consideration for size limits.\n- Animated GIFs are automatically handled by extracting their first frame.\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-fetch"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-fetch",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-fetch"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-fetch"
      ],
      "env": {}
    }
  },
  {
    "id": "7c986eda-1565-458d-8aff-69a2c08f8a32",
    "name": "andybrandt/mcp-simple-arxiv",
    "description": "mcp-simple-arxiv",
    "fullDescription": "# mcp-simple-arxiv\n\nAn MCP server that provides access to arXiv papers through their API.\n\n## Features\n\nThis server allows LLM clients (like Claude Desktop) to:\n- Search for scientific papers on arXiv by title and abstract content\n- Get paper metadata and abstracts\n- Access links to available paper formats (PDF/HTML)\n\nThe server implements proper rate limiting according to arXiv's API guidelines (max 1 request every 3 seconds).\n\n## Installation\n\n### Installing via Smithery\n\nTo install Simple Arxiv for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-simple-arxiv):\n\n```bash\nnpx -y @smithery/cli install mcp-simple-arxiv --client claude\n```\n\n### Manual Installation\n```bash\npip install mcp-simple-arxiv\n```\n\n## Usage with Claude Desktop\n\nAdd this configuration to your `claude_desktop_config.json`:\n\n(Mac OS)\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-arxiv\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcp_simple_arxiv\"]\n      }\n  }\n}\n```\n\n(Windows version):\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-arxiv\": {\n      \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n      \"args\": [\n        \"-m\",\n        \"mcp_simple_arxiv\"\n      ]\n    }\n  }\n}\n```\n\nAfter restarting Claude Desktop, the following capabilities will be available:\n\n### Searching Papers\n\nYou can ask Claude to search for papers using queries like:\n```\nCan you search arXiv for recent papers about large language models?\n```\n\nThe search will return basic information about matching papers including:\n- Paper title\n- Authors\n- arXiv ID\n- Publication date\n\n### Getting Paper Details\n\nOnce you have a paper ID, you can ask for more details:\n```\nCan you show me the details for paper 2103.08220?\n```\n\nThis will return:\n- Full paper title\n- Authors\n- Publication and update dates\n- Journal reference (if available)\n- Paper abstract\n- Links to available formats (PDF/HTML)\n\n## Development\n\nTo install for development:\n```bash\ngit clone https://github.com/andybrandt/mcp-simple-arxiv\ncd mcp-simple-arxiv\npip install -e .\n```\n\n### arXiv API Guidelines\n\nThis server follows arXiv API usage guidelines:\n- Rate limiting to max 1 request per 3 seconds\n- Single connection at a time\n- Proper error handling and retry logic\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "andybrandt",
      "name": "andybrandt",
      "url": "https://github.com/andybrandt/mcp-simple-arxiv"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/andybrandt/mcp-simple-arxiv",
    "distribution": {
      "type": "pip",
      "package": "mcp-simple-arxiv"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-simple-arxiv"
      ],
      "env": {}
    }
  },
  {
    "id": "a74eeb14-407e-44ca-9f45-438a45c168ce",
    "name": "sammcj/mcp-github-issue",
    "description": "MCP GitHub Issue Server",
    "fullDescription": "# MCP GitHub Issue Server\n\nAn MCP server that provides LLMs with the ability to use GitHub issues as the task to complete. This server allows LLMs to fetch GitHub issue details and use them as task descriptions.\n\n## Installation\n\n### Manual Installation\n```bash\nnpx mcp-github-issue\n```\n\n### Installing via Smithery\n\nTo install MCP GitHub Issue Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-github-issue):\n\n```bash\nnpx -y @smithery/cli install mcp-github-issue --client claude\n```\n\n## Usage\n\n### As an MCP Server\n\nAdd to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-issue\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-github-issue\"]\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### get_issue_task\n\nFetches GitHub issue details to use as a task.\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"url\": {\n      \"type\": \"string\",\n      \"description\": \"GitHub issue URL (https://github.com/owner/repo/issues/number)\"\n    }\n  },\n  \"required\": [\"url\"]\n}\n```\n\n**Example Usage:**\n```typescript\n<use_mcp_tool>\n<server_name>github-issue</server_name>\n<tool_name>get_issue_task</tool_name>\n<arguments>\n{\n  \"url\": \"https://github.com/owner/repo/issues/123\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n**Response Format:**\n```json\n{\n  \"task\": {\n    \"title\": \"Issue Title\",\n    \"description\": \"Issue Description/Body\",\n    \"source\": \"https://github.com/owner/repo/issues/123\"\n  }\n}\n```\n\n## Features\n\n- Fetches GitHub issue details from public repositories\n- No authentication required for public repositories\n- Returns structured task data including title, description, and source URL\n- Compatible with the Model Context Protocol (MCP)\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server locally\nnpm run serve\n\n# Format code\nnpm run format\n\n# Run MCP inspector\nnpm run inspector\n```\n\n## License\n\nMIT\n\n## Author\n\nSam McLeod (https://smcleod.net)\n",
    "publisher": {
      "id": "sammcj",
      "name": "sammcj",
      "url": "https://github.com/sammcj/mcp-github-issue"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sammcj/mcp-github-issue",
    "distribution": {
      "type": "npm",
      "package": "mcp-github-issue"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-github-issue"
      ],
      "env": {}
    }
  },
  {
    "id": "5245d4be-b41d-40f2-9d40-188deaddeb77",
    "name": "@stripe/mcp",
    "description": "Stripe Model Context Protocol",
    "fullDescription": "# Stripe Model Context Protocol\n\n### ❗❗❗To use stripe-mcp, the minimum version requirement for ClaudeMind is 0.6.1\n\nThe Stripe [Model Context Protocol](https://modelcontextprotocol.com/) server allows you to integrate with Stripe APIs through function calling. This protocol supports various tools to interact with different Stripe services.\n\n## Setup\n\nTo run the Stripe MCP server using npx, use the following command:\n\n```bash\n# To set up all available tools\nnpx -y @stripe/mcp --tools=all --api-key=YOUR_STRIPE_SECRET_KEY\n\n# To set up specific tools\nnpx -y @stripe/mcp --tools=customers.create,customers.read,products.create --api-key=YOUR_STRIPE_SECRET_KEY\n\n# To configure a Stripe connected account\nnpx -y @stripe/mcp --tools=all --api-key=YOUR_STRIPE_SECRET_KEY --stripe-account=CONNECTED_ACCOUNT_ID\n```\n\nMake sure to replace `YOUR_STRIPE_SECRET_KEY` with your actual Stripe secret key. Alternatively, you could set the STRIPE_SECRET_KEY in your environment variables.\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`. See [here](https://modelcontextprotocol.io/quickstart/user) for more details.\n\n```\n{\n    “mcpServers”: {\n        “stripe”: {\n            “command”: “npx”,\n            “args”: [\n                “-y”,\n                “@stripe/mcp”,\n                “--tools=all”,\n                “--api-key=STRIPE_SECRET_KEY”\n            ]\n        }\n    }\n}\n```\n\n## Available tools\n\n| Tool                  | Description                     |\n| --------------------- | ------------------------------- |\n| `customers.create`    | Create a new customer           |\n| `customers.read`      | Read customer information       |\n| `products.create`     | Create a new product            |\n| `products.read`       | Read product information        |\n| `prices.create`       | Create a new price              |\n| `prices.read`         | Read price information          |\n| `paymentLinks.create` | Create a new payment link       |\n| `invoices.create`     | Create a new invoice            |\n| `invoices.update`     | Update an existing invoice      |\n| `invoiceItems.create` | Create a new invoice item       |\n| `balance.read`        | Retrieve balance information    |\n| `refunds.create`      | Create a new refund             |\n| `paymentIntents.read` | Read payment intent information |\n| `documentation.read`  | Search Stripe documentation     |\n\n## Debugging the Server\n\nTo debug your server, you can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector).\n\nFirst build the server\n\n```\nnpm run build\n```\n\nRun the following command in your terminal:\n\n```bash\n# Start MCP Inspector and server with all tools\nnpx @modelcontextprotocol/inspector node dist/index.js --tools=all --api-key=YOUR_STRIPE_SECRET_KEY\n```\n\n### Instructions\n\n1. Replace `YOUR_STRIPE_SECRET_KEY` with your actual Stripe API secret key.\n2. Run the command to start the MCP Inspector.\n3. Open the MCP Inspector UI in your browser and click Connect to start the MCP server.\n4. You can see the list of tools you selected and test each tool individually.",
    "publisher": {
      "id": "stripe",
      "name": "stripe",
      "url": "https://github.com/stripe/agent-toolkit/tree/main/modelcontextprotocol"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/stripe/agent-toolkit/tree/main/modelcontextprotocol",
    "distribution": {
      "type": "npm",
      "package": "@stripe/mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@stripe/mcp",
        "--tools=all",
        "--api-key=${STRIPE_SECRET_KEY}"
      ],
      "env": {
        "STRIPE_SECRET_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "55503613-650a-45d8-a8ed-e9b81c2394de",
    "name": "lumile/lumbretravel-mcp",
    "description": "LumbreTravel MCP Server",
    "fullDescription": "# LumbreTravel MCP Server\n\nAn MCP server that provides access to LumbreTravel API.\n\n[LumbreTravel](https://lumbretravel.com.ar/) is a platform for managing travel programs and activities and this is the MCP server for it.  That allows you to use it on [Claude Desktop](https://claude.ai/download) or other MCP clients.\n\n## Features\n\nThis MCP Server allows access to all the tools that LumbreTravel API provides.\n\n### Tools\n\n#### Programs\n\n- `create_program` - Create a new program\n- `update_program` - Update an existing program\n- `delete_program` - Delete a program\n- `reactivate_program` - Reactivate a program\n\n#### Activities\n\n- `add_activities` - Add activities to a program\n- `update_activities` - Update activities of a program\n- `delete_activities` - Delete activities of a program\n\n#### Passengers\n\n- `get_passengers_by_fullname` - Get passengers by fullname\n- `get_passengers_by_email` - Get passengers by email\n- `create_bulk_passengers` - Create bulk passengers\n- `create_passengers` - Create passengers\n- `update_passengers` - Update passengers\n- `delete_passengers` - Delete passengers\n- `reactivate_passenger` - Reactivate a passenger\n- `add_passengers_to_program` - Add passengers to a program\n\n#### Agencies\n\n- `get_agencies` - Get agencies\n- `get_agency_by_name` - Get an agency by name\n- `create_agency` - Create an agency\n- `update_agency` - Update an agency\n- `delete_agency` - Delete an agency\n- `reactivate_agency` - Reactivate an agency\n\n#### Hotels\n\n- `create_hotel` - Create a hotel\n- `update_hotel` - Update a hotel\n- `delete_hotel` - Delete a hotel\n- `reactivate_hotel` - Reactivate a hotel\n- `get_hotel_by_name` - Get a hotel by name\n- `get_hotels` - Get hotels\n\n#### Services\n\n- `create_service` - Create a service\n- `update_service` - Update a service\n- `delete_service` - Delete a service\n- `reactivate_service` - Reactivate a service\n- `get_service_by_name` - Get a service by name\n\n#### Service Languages\n\n- `create_service_language` - Create a service language\n- `update_service_language` - Update a service language\n- `delete_service_language` - Delete a service language\n- `reactivate_service_language` - Reactivate a service language\n- `get_service_language_by_name` - Get a service language by name\n- `get_service_languages` - Get service languages\n\n#### Providers\n\n- `create_provider` - Create a provider\n- `update_provider` - Update a provider\n- `delete_provider` - Delete a provider\n- `reactivate_provider` - Reactivate a provider\n- `get_provider_by_name` - Get a provider by name\n- `get_providers` - Get providers\n\n#### Leaders\n\n- `create_leader` - Create a leader\n- `update_leader` - Update a leader\n- `delete_leader` - Delete a leader\n- `reactivate_leader` - Reactivate a leader\n- `get_leaders` - Get leaders\n\n#### Vehicles\n\n- `create_vehicle` - Create a vehicle\n- `update_vehicle` - Update a vehicle\n- `delete_vehicle` - Delete a vehicle\n- `reactivate_vehicle` - Reactivate a vehicle\n- `get_vehicles` - Get vehicles\n\n#### Includes\n\n- `create_include` - Create an include\n- `update_include` - Update an include\n- `delete_include` - Delete an include\n- `reactivate_include` - Reactivate an include\n- `get_includes` - Get includes\n\n#### Seasons\n\n- `get_season_summary` - Get a season summary\n\n## Setup\n\n### Prerequisites\n\nYou'll need a LumbreTravel Client ID and Client Secret to use this server.  You can get one for free at https://developers.mercadolibre.com/, create an application and get the credentials.\n\nOnce you have the credentials, you can set the `CLIENT_ID` and `CLIENT_SECRET` environment variables.\n\n### Installation\n\nThere are two ways to use this server:\n\n#### Installing via Smithery\n\nTo install LumbreTravel MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lumile/lumbretravel-mcp):\n\n```bash\nnpx -y @smithery/cli install @lumile/lumbretravel-mcp --client claude\n```\n\n#### Option 1: NPX (Recommended)\nAdd this configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"lumbretravel-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"lumbretravel-mcp\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"EMAIL\": \"<YOUR_EMAIL>\",\n        \"PASSWORD\": \"<YOUR_PASSWORD>\"\n      }\n    }\n  }\n}\n```\n#### Option 2: Local Installation\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add this configuration to your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"lumbretravel-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/lumbretravel-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"EMAIL\": \"<YOUR_EMAIL>\",\n        \"PASSWORD\": \"<YOUR_PASSWORD>\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Contributing\n\nContributions are extremely welcome! Please open a PR with new MCP servers or any other improvements to the codebase.\n\n## Disclaimer\n\nThis project is to be used only with the LumbreTravel API.\n\n\n## License\n\nSee the [LICENSE.md](LICENSE.md) file for details.\n\n------\n\n<p align=\"center\">\nMade with ❤️ by Lumile\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.lumile.com.ar\">Contact us</a> for custom AI development and automation solutions.\n</p>\n",
    "publisher": {
      "id": "lumile",
      "name": "lumile",
      "url": "https://github.com/lumile/lumbretravel-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/lumile/lumbretravel-mcp",
    "distribution": {
      "type": "npm",
      "package": "lumbretravel-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "lumbretravel-mcp"
      ],
      "env": {
        "CLIENT_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CLIENT_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "EMAIL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "efa37bc5-f9d6-4dd4-b47c-d6ae5f678731",
    "name": "r-huijts/ns-mcp-server",
    "description": "NS Travel Information MCP Server",
    "fullDescription": "# NS Travel Information MCP Server\n\nTransform your AI assistant into a Dutch railways expert! This MCP server connects Claude to real-time NS (Nederlandse Spoorwegen) travel information, making it your perfect companion for navigating the Netherlands by train.\n\n## Installation\n\nYou can install this server in three ways:\n\n### 1. Using Claude Desktop with NPM Package\n\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"ns-mcp-server\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nYou can get an API key from [NS API Portal](https://apiportal.ns.nl/)\n\n### 2. Using Smithery\n\nTo install NS Travel Information Server automatically via [Smithery](https://smithery.ai/server/ns-server):\n\n```bash\nnpx -y @smithery/cli install ns-server --client claude\n```\n\n### 3. From Source\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Add your NS API key to the `.env` file:\n   ```\n   NS_API_KEY=your_api_key_here\n   ```\n\nThen update your Claude configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/ns-server/build/index.js\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nMake sure to:\n1. Replace `/path/to/ns-server` with the actual path to your installation\n2. Add your NS API key in the `env` section\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n## Real-World Use Cases\n\n- \"Is my usual 8:15 train from Almere to Amsterdam running on time?\"\n- \"Are there any delays on the Rotterdam-Den Haag route today?\"\n- \"What's the best alternative route to Utrecht if there's maintenance on the direct line?\"\n- \"Which train should I take to arrive at my office in Amsterdam Zuid before 9 AM?\"\n- \"Which route to Amsterdam has the fewest transfers with a stroller?\"\n- \"What's the earliest train I can take to make my 10 AM meeting in The Hague?\"\n- \"When's the last train back to Groningen after a night out in Amsterdam?\"\n- \"Are there any weekend engineering works that might affect my Monday morning class?\"\n- \"Are there OV-fiets bikes available at Utrecht Centraal for my afternoon meeting?\"\n- \"Is Eindhoven Strijp-S station wheelchair accessible and what platforms does it have?\"\n- \"What trains are arriving at Utrecht Centraal in the next hour?\"\n- \"Has the train from Venlo to Schiphol Airport arrived on time?\"\n- \"How much does a first-class ticket from Amsterdam to Rotterdam cost?\"\n- \"What's the price for 2 adults and 1 child traveling to Den Haag?\"\n\n## 🔑 Environment Variables\n\n| Variable | Description |\n|----------|-------------|\n| NS_API_KEY | Your NS API key (required) |\n\n## 🌟 Features\n\nThis MCP server provides comprehensive access to NS train information through the following endpoints:\n\n### Real-time Train Information\n- **Departures**: Get real-time departure information including platform numbers, delays, and travel notes\n- **Arrivals**: Access upcoming train arrivals with origin stations, platform changes, and status updates\n- **Journey Planning**: Find optimal travel routes with transfers and real-time updates\n- **Service Updates**: Check for disruptions, maintenance work, and engineering activities\n\n### Pricing Information\n- **Ticket Prices**: Get accurate pricing for single and return journeys\n- **Travel Classes**: Compare prices for first and second class travel\n- **Group Pricing**: Calculate fares for adults and children\n- **Discount Options**: Check joint journey discounts and special offers\n- **Validity Details**: View ticket validity periods and travel conditions\n\n### Station Information\n- **Station Details**: Access comprehensive station information including:\n  - Facilities and accessibility features\n  - Platform layouts and track information\n  - OV-fiets (bike rental) availability\n  - Location and approach details\n\n### Additional Features\n- **Multi-language Support**: Information available in Dutch and English\n- **Flexible Queries**: Search by station name, code, or UIC identifier\n- **Time Zones**: Proper handling of time zones for international stations\n- **Status Updates**: Track changes, delays, and cancellations in real-time\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
    "publisher": {
      "id": "r-huijts",
      "name": "r-huijts",
      "url": "https://github.com/r-huijts/ns-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/r-huijts/ns-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "ns-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "ns-mcp-server"
      ],
      "env": {
        "NS_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "c9bd1e40-89a2-4ff6-9a19-39c569848a57",
    "name": "dillip285/mcp-terminal",
    "description": "MCP Terminal Server",
    "fullDescription": "# MCP Terminal Server\n\nA secure command-line interface server for the Model Context Protocol (MCP) that enables AI models to interact with your terminal while maintaining security and control.\n\n## Features\n\n- 🔒 Secure command execution with configurable permissions\n- 📁 File system operations within allowed paths\n- 🌍 Environment variable management\n- 💻 Cross-platform support (Windows, macOS, Linux)\n- 🔌 Remote system connections support via command execution\n\n## Usage with Claude Desktop\n\nAdd the server configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"terminal\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@dillip285/mcp-terminal\",\n        \"--allowed-paths\",\n        \"/path/to/allowed/directory\"\n      ]\n    }\n  }\n}\n```\n\nRestart Claude Desktop to apply the changes. You can now use the terminal capabilities through Claude with secure file access and command execution.\n\n## Available Tools\n\n- `execute_command`: Run terminal commands securely (including SSH and remote commands)\n\n## Security\n\n- All operations are restricted to specified allowed paths\n- Commands are validated and sanitized before execution\n- Environment variables are carefully managed\n- Proper error handling for security-related issues\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/dillip285/mcp-terminal.git\n\n# Install dependencies\nnpm install\n\n# Configure npm authentication\ncp .npmrc.example .npmrc\n# Edit .npmrc and add your NPM_TOKEN\n\n# Run tests\nnpm test\n\n# Build the project\nnpm run build\n```\n\n## Publishing\n\nTo publish the package:\n\n1. Copy `.npmrc.example` to `.npmrc`\n2. Add your npm authentication token to `.npmrc`\n3. Run `npm publish --access public`\n\nNote: Never commit your `.npmrc` file with the authentication token. It is already added to `.gitignore`.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'feat: Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Related Projects\n\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [Claude Desktop](https://claude.ai/download)\n\n## Support\n\nFor bug reports and feature requests, please [open an issue](https://github.com/dillip285/mcp-terminal/issues).",
    "publisher": {
      "id": "dillip285",
      "name": "dillip285",
      "url": "https://github.com/dillip285/mcp-terminal"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/dillip285/mcp-terminal",
    "distribution": {
      "type": "npm",
      "package": "@dillip285/mcp-terminal"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@dillip285/mcp-terminal",
        "--allowed-paths",
        "$ENVARG_ALLOWED_PATHS"
      ],
      "env": {
        "ENVARG_ALLOWED_PATHS": {
          "description": "List of directories allowed to be accessed by this mcp server, one path per line",
          "type": "array",
          "required": true
        }
      }
    }
  },
  {
    "id": "8c2811fc-e313-40f6-899e-e4d244e97f09",
    "name": "qpd-v/mcp-guide",
    "description": "MCP Guide Server (v0.1.5)",
    "fullDescription": "# MCP Guide Server (v0.1.5)\n\nA beginner-friendly Model Context Protocol (MCP) server that helps users understand MCP concepts, provides interactive examples, and lists available MCP servers. This server is designed to be a helpful companion for developers working with MCP.\n\nAuthor: qpd-v\n\n## Features\n\n- 📚 **Concept Explanations**: Get clear, beginner-friendly explanations of MCP concepts like tools, resources, prompts, and more\n- 🔍 **Server Directory**: Browse a comprehensive list of available MCP servers organized by category\n- 💡 **Interactive Examples**: See practical examples of MCP features in action\n- 🛠️ **Tutorial Prompts**: Step-by-step guides for creating your first MCP tools and resources\n\n## Installation\n\n```bash\n# Using npm\nnpm install -g mcp-guide\n\n# Using yarn\nyarn global add mcp-guide\n```\n\n## Usage\n\n### With Claude Desktop\n\n1. Add the server to your Claude Desktop configuration (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-guide\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mcp-guide/dist/index.js\"]\n    }\n  }\n}\n```\n\n2. Restart Claude Desktop\n3. Use the available tools:\n   - `explain_concept`: Get explanations of MCP concepts\n   - `show_example`: See practical examples of MCP features\n   - `list_servers`: Browse available MCP servers by category\n\n### Standalone\n\n```bash\n# Start the server\nmcp-guide\n\n# Or if installed locally\nnpx mcp-guide\n```\n\n## Available Tools\n\n### explain_concept\nGet a beginner-friendly explanation of an MCP concept.\n\nExample concepts:\n- tools\n- resources\n- prompts\n- server\n- client\n- server_types\n- frameworks\n- clients\n\n### show_example\nShow a practical example of an MCP feature.\n\nExample features:\n- tool_call\n- resource_read\n- prompt_template\n\n### list_servers\nList available MCP servers by category.\n\nCategories:\n- browser\n- cloud\n- command_line\n- communication\n- customer_data\n- database\n- developer\n- data_science\n- filesystem\n- finance\n- knowledge\n- location\n- monitoring\n- search\n- travel\n- version_control\n- other\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/qpd-v/mcp-guide.git\ncd mcp-guide\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n## Roadmap\n\n- [ ] Interactive server installation from the server list\n- [ ] More interactive examples and tutorials\n- [ ] Enhanced server categorization and search",
    "publisher": {
      "id": "qpd-v",
      "name": "qpd-v",
      "url": "https://github.com/qpd-v/mcp-guide"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qpd-v/mcp-guide",
    "distribution": {
      "type": "npm",
      "package": "mcp-guide"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-guide"
      ],
      "env": {}
    }
  },
  {
    "id": "6c34fcc7-c657-4787-9626-bb79fe8d6217",
    "name": "wcgw",
    "description": "Shell and Coding agent for Claude and Chatgpt",
    "fullDescription": "# Shell and Coding agent for Claude and Chatgpt\n\n❗❗❗When you choose the `OpenRouter - Claude 3.7 Sonnet` model, wcgw may cause a request error due to `input_schema` validation failure. If you want to use the `OpenRouter - Claude 3.7 Sonnet` model, we recommend stopping this server.\n\nEmpowering chat applications to code, build and run on your local machine.\n\n- Claude - An MCP server on claude desktop for autonomous shell and coding agent. (mac only)\n- Chatgpt - Allows custom gpt to talk to your shell via a relay server. (linux or mac)\n\n⚠️ Warning: do not allow BashCommand tool without reviewing the command, it may result in data loss.\n\n## Updates\n\n- [16 Feb 2025] You can now attach to the working terminal that the AI uses. See the \"attach-to-terminal\" section below.\n\n- [15 Jan 2025] Modes introduced: architect, code-writer, and all powerful wcgw mode.\n\n- [8 Jan 2025] Context saving tool for saving relevant file paths along with a description in a single file. Can be used as a task checkpoint or for knowledge transfer.\n\n- [29 Dec 2024] Syntax checking on file writing and edits is now stable. Made `initialize` tool call useful; sending smart repo structure to claude if any repo is referenced. Large file handling is also now improved.\n\n- [9 Dec 2024] [Vscode extension to paste context on Claude app](https://marketplace.visualstudio.com/items?itemName=AmanRusia.wcgw)\n\n\n## 🚀 Highlights\n\n- ⚡ **Create, Execute, Iterate**: Ask claude to keep running compiler checks till all errors are fixed, or ask it to keep checking for the status of a long running command till it's done.\n- ⚡ **Large file edit**: Supports large file incremental edits to avoid token limit issues. Faster than full file write.\n- ⚡ **Syntax checking on edits**: Reports feedback to the LLM if its edits have any syntax errors, so that it can redo it.\n- ⚡ **Interactive Command Handling**: Supports interactive commands using arrow keys, interrupt, and ansi escape sequences.\n- ⚡ **File protections**:\n  - The AI needs to read a file at least once before it's allowed to edit or rewrite it. This avoids accidental overwrites.\n  - Avoids context filling up while reading very large files. Files get chunked based on token length.\n  - On initialisation the provided workspace's directory structure is returned after selecting important files (based on .gitignore as well as a statistical approach)\n  - File edit based on search-replace tries to find correct search block if it has multiple matches based on previous search blocks. Fails otherwise (for correctness).\n  - File edit has spacing tolerant matching, with warning on issues like indentation mismatch. If there's no match, the closest match is returned to the AI to fix its mistakes.\n  - Using Aider-like search and replace, which has better performance than tool call based search and replace.\n- ⚡ **Shell optimizations**:\n  - Only one command is allowed to be run at a time, simplifying management and avoiding rogue processes. There's only single shell instance at any point of time.\n  - Current working directory is always returned after any shell command to prevent AI from getting lost.\n  - Command polling exits after a quick timeout to avoid slow feedback. However, status checking has wait tolerance based on fresh output streaming from a command. Both of these approach combined provides a good shell interaction experience.\n- ⚡ **Saving repo context in a single file**: Task checkpointing using \"ContextSave\" tool saves detailed context in a single file. Tasks can later be resumed in a new chat asking \"Resume `task id`\". The saved file can be used to do other kinds of knowledge transfer, such as taking help from another AI.\n- ⚡ **Easily switch between various modes**:\n  - Ask it to run in 'architect' mode for planning. Inspired by adier's architect mode, work with Claude to come up with a plan first. Leads to better accuracy and prevents premature file editing.\n  - Ask it to run in 'code-writer' mode for code editing and project building. You can provide specific paths with wild card support to prevent other files getting edited.\n  - By default it runs in 'wcgw' mode that has no restrictions and full authorisation.\n  - More details in [Modes section](#modes)\n- ⚡ **Runs in multiplex terminal** Run `screen -x` to attach to the terminal that the AI runs commands on. See history or interrupt process or interact with the same terminal that AI uses.\n\n## Top use cases examples\n\n- Solve problem X using python, create and run test cases and fix any issues. Do it in a temporary directory\n- Find instances of code with X behavior in my repository\n- Git clone https://github.com/my/repo in my home directory, then understand the project, set up the environment and build\n- Create a golang htmx tailwind webapp, then open browser to see if it works (use with puppeteer mcp)\n- Edit or update a large file\n- In a separate branch create feature Y, then use github cli to create a PR to original branch\n- Command X is failing in Y directory, please run and fix issues\n- Using X virtual environment run Y command\n- Using cli tools, create build and test an android app. Finally run it using emulator for me to use\n- Fix all mypy issues in my repo at X path.\n- Using 'screen' run my server in background instead, then run another api server in bg, finally run the frontend build. Keep checking logs for any issues in all three\n- Create repo wide unittest cases. Keep iterating through files and creating cases. Also keep running the tests after each update. Do not modify original code.\n\n## Claude setup (using mcp)\n\nFirst install `uv` using homebrew `brew install uv`\n\n(**Important:** use homebrew to install uv. Otherwise make sure `uv` is present in a global location like /usr/bin/)\n\nThen create or update `claude_desktop_config.json` (~/Library/Application Support/Claude/claude_desktop_config.json) with following json.\n\n```json\n{\n  \"mcpServers\": {\n    \"wcgw\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"wcgw@latest\",\n        \"--python\",\n        \"3.12\",\n        \"wcgw_mcp\"\n      ]\n    }\n  }\n}\n```\n\nThen restart claude app.\n\n_If there's an error in setting up_\n\n- If there's an error like \"uv ENOENT\", make sure `uv` is installed. Then run 'which uv' in the terminal, and use its output in place of \"uv\" in the configuration.\n- If there's still an issue, check that `uv tool run --from wcgw@latest --python 3.12 wcgw_mcp` runs in your terminal. It should have no output and shouldn't exit.\n- Try removing ~/.cache/uv folder\n- Try using `uv` version `0.6.0` for which this tool was tested.\n- Debug the mcp server using `npx @modelcontextprotocol/inspector@0.1.7 uv tool run --from wcgw@latest --python 3.12 wcgw_mcp`\n\n### Alternative configuration using smithery (npx required)\n\nYou need to first install uv using homebrew. `brew install uv`\n\nThen to configure wcgw for Claude Desktop automatically via [Smithery](https://smithery.ai/server/wcgw):\n\n```bash\nnpx -y @smithery/cli install wcgw --client claude\n```\n\n_If there's an error in setting up_\n- Try removing ~/.cache/uv folder\n\n### Usage\n\nWait for a few seconds. You should be able to see this icon if everything goes right.\n\n![mcp icon](https://github.com/rusiaaman/wcgw/blob/main/static/rocket-icon.png?raw=true)\nover here\n\n![mcp icon](https://github.com/rusiaaman/wcgw/blob/main/static/claude-ss.jpg?raw=true)\n\nThen ask claude to execute shell commands, read files, edit files, run your code, etc.\n\n#### Task checkpoint or knowledge transfer\n\n- You can do a task checkpoint or a knowledge transfer by attaching \"KnowledgeTransfer\" prompt using \"Attach from MCP\" button.\n- On running \"KnowledgeTransfer\" prompt, the \"ContextSave\" tool will be called saving the task description and all file content together in a single file. An id for the task will be generated.\n- You can in a new chat say \"Resume '<task id>'\", the AI should then call \"Initialize\" with the task id and load the context from there.\n- Or you can directly open the file generated and share it with another AI for help.\n\n#### Modes\n\nThere are three built-in modes. You may ask Claude to run in one of the modes, like \"Use 'architect' mode\"\n| **Mode** | **Description** | **Allows** | **Denies** | **Invoke prompt** |\n|-----------------|-----------------------------------------------------------------------------|---------------------------------------------------------|----------------------------------------------|----------------------------------------------------------------------------------------------------|\n| **Architect** | Designed for you to work with Claude to investigate and understand your repo. | Read-only commands | FileEdit and Write tool | Run in mode='architect' |\n| **Code-writer** | For code writing and development | Specified path globs for editing or writing, specified commands | FileEdit for paths not matching specified glob, Write for paths not matching specified glob | Run in code writer mode, only 'tests/**' allowed, only uv command allowed |\n| **wcgw\\*\\* | Default mode with everything allowed | Everything | Nothing | No prompt, or \"Run in wcgw mode\" |\n\nNote: in code-writer mode either all commands are allowed or none are allowed for now. If you give a list of allowed commands, Claude is instructed to run only those commands, but no actual check happens. (WIP)\n\n#### Attach to the working terminal to investigate\nIf you've `screen` command installed, wcgw runs on a screen instance automatically. If you've started wcgw mcp server, you can list the screen sessions:\n\n`screen -ls`\n\nAnd note down the wcgw screen name which will be something like `93358.wcgw.235521` where the last number is in the hour-minute-second format.\n\nYou can then attach to the session using `screen -x 93358.wcgw.235521`\n\nYou may interrupt any running command safely.\n\nYou can interact with the terminal but beware that the AI might be running in parallel and it may conflict with what you're doing. It's recommended to keep your interactions to minimum. \n\nYou shouldn't exit the session using `exit `or Ctrl-d, instead you should use `ctrl+a+d` to safely detach without destroying the screen session.\n\n### [Optional] Vs code extension\n\nhttps://marketplace.visualstudio.com/items?itemName=AmanRusia.wcgw\n\nCommands:\n\n- Select a text and press `cmd+'` and then enter instructions. This will switch the app to Claude and paste a text containing your instructions, file path, workspace dir, and the selected text.\n\n## Chatgpt Setup\n\nRead here: https://github.com/rusiaaman/wcgw/blob/main/openai.md\n\n## Examples\n\n![example](https://github.com/rusiaaman/wcgw/blob/main/static/example.jpg?raw=true)\n\n## [Optional] Local shell access with openai API key or anthropic API key\n\n### Openai\n\nAdd `OPENAI_API_KEY` and `OPENAI_ORG_ID` env variables.\n\nThen run\n\n`uvx --from wcgw@latest wcgw_local  --limit 0.1` # Cost limit $0.1\n\nYou can now directly write messages or press enter key to open vim for multiline message and text pasting.\n\n### Anthropic\n\nAdd `ANTHROPIC_API_KEY` env variable.\n\nThen run\n\n`uvx --from wcgw@latest wcgw_local --claude`\n\nYou can now directly write messages or press enter key to open vim for multiline message and text pasting.\n\n## Tools\n\nThe server provides the following MCP tools:\n\n**Shell Operations:**\n\n- `Initialize`: Reset shell and set up workspace environment\n  - Parameters: `any_workspace_path` (string), `initial_files_to_read` (string[]), `mode_name` (\"wcgw\"|\"architect\"|\"code_writer\"), `task_id_to_resume` (string)\n- `BashCommand`: Execute shell commands with timeout control\n  - Parameters: `command` (string), `wait_for_seconds` (int, optional)\n  - Parameters: `send_text` (string) or `send_specials` ([\"Enter\"|\"Key-up\"|...]) or `send_ascii` (int[]), `wait_for_seconds` (int, optional)\n\n**File Operations:**\n\n- `ReadFiles`: Read content from one or more files\n  - Parameters: `file_paths` (string[])\n- `WriteIfEmpty`: Create new files or write to empty files\n  - Parameters: `file_path` (string), `file_content` (string)\n- `FileEdit`: Edit existing files using search/replace blocks\n  - Parameters: `file_path` (string), `file_edit_using_search_replace_blocks` (string)\n- `ReadImage`: Read image files for display/processing\n  - Parameters: `file_path` (string)\n\n**Project Management:**\n\n- `ContextSave`: Save project context and files for Knowledge Transfer or saving task checkpoints to be resumed later\n  - Parameters: `id` (string), `project_root_path` (string), `description` (string), `relevant_file_globs` (string[])\n\nAll tools support absolute paths and include built-in protections against common errors. See the [MCP specification](https://modelcontextprotocol.io/) for detailed protocol information.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "Model Context Protocol",
      "url": "https://github.com/rusiaaman/wcgw"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/rusiaaman/wcgw",
    "distribution": {
      "type": "pip",
      "package": "wcgw"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "wcgw"
      ],
      "env": {}
    }
  },
  {
    "id": "40d47bf1-b4c3-4478-b912-e0bbde068619",
    "name": "spences10/mcp-perplexity-search",
    "description": "mcp-perplexity-search",
    "fullDescription": "# mcp-perplexity-search\n\nA Model Context Protocol (MCP) server for integrating Perplexity's AI\nAPI with LLMs. This server provides advanced chat completion\ncapabilities with specialized prompt templates for various use cases.\n\n## Features\n\n- 🤖 Advanced chat completion using Perplexity's AI models\n- 📝 Predefined prompt templates for common scenarios:\n  - Technical documentation generation\n  - Security best practices analysis\n  - Code review and improvements\n  - API documentation in structured format\n- 🎯 Custom template support for specialized use cases\n- 📊 Multiple output formats (text, markdown, JSON)\n- 🔍 Optional source URL inclusion in responses\n- ⚙️ Configurable model parameters (temperature, max tokens)\n- 🚀 Support for various Perplexity models including Sonar and LLaMA\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-perplexity-search\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-perplexity-search\"],\n\t\t\t\"env\": {\n\t\t\t\t\"PERPLEXITY_API_KEY\": \"your-perplexity-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-perplexity-search\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"source ~/.nvm/nvm.sh && PERPLEXITY_API_KEY=your-perplexity-api-key /home/username/.nvm/versions/node/v20.12.1/bin/npx mcp-perplexity-search\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `PERPLEXITY_API_KEY`: Your Perplexity API key (required)\n\n## API\n\nThe server implements a single MCP tool with configurable parameters:\n\n### chat_completion\n\nGenerate chat completions using the Perplexity API with support for\nspecialized prompt templates.\n\nParameters:\n\n- `messages` (array, required): Array of message objects with:\n  - `role` (string): 'system', 'user', or 'assistant'\n  - `content` (string): The message content\n- `prompt_template` (string, optional): Predefined template to use:\n  - `technical_docs`: Technical documentation with code examples\n  - `security_practices`: Security implementation guidelines\n  - `code_review`: Code analysis and improvements\n  - `api_docs`: API documentation in JSON format\n- `custom_template` (object, optional): Custom prompt template with:\n  - `system` (string): System message for assistant behaviour\n  - `format` (string): Output format preference\n  - `include_sources` (boolean): Whether to include sources\n- `format` (string, optional): 'text', 'markdown', or 'json' (default:\n  'text')\n- `include_sources` (boolean, optional): Include source URLs (default:\n  false)\n- `model` (string, optional): Perplexity model to use (default:\n  'sonar')\n- `temperature` (number, optional): Output randomness (0-1, default:\n  0.7)\n- `max_tokens` (number, optional): Maximum response length\n  (default: 1024)\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\nThe project uses changesets for version management. To publish:\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by\n  [Perplexity SONAR](https://docs.perplexity.ai/api-reference/chat-completions)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-perplexity-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-perplexity-search",
    "distribution": {
      "type": "npm",
      "package": "mcp-perplexity-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-perplexity-search"
      ],
      "env": {
        "PERPLEXITY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "895b4495-c009-436f-bfe6-95ef45d545d1",
    "name": "paulotaylor/voyp-mcp",
    "description": "Voyp Model Context Protocol server",
    "fullDescription": "# Voyp Model Context Protocol server\n\nThe Model Context Protocol (MCP) is an open standard that enables AI systems to interact seamlessly with various data sources and tools, facilitating secure, two-way connections.\n\nDeveloped by Anthropic, the Model Context Protocol (MCP) enables AI assistants like Claude to seamlessly integrate with VOYP's calling capabilities. This integration provides AI models with possibility of making phone calls and monitor their progress.\n\nThe Voyp MCP server allows you to:\n- Construct robust call contexts to use when making calls\n- Search for business information when calling restaurants, dentists, etc...\n- Call and make appointments, reservations, consultations, inquiries, etc...\n- Provide status of the call\n- Hangup call\n\n<a href=\"https://glama.ai/mcp/servers/nlah6xt0ml\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/nlah6xt0ml/badge\" alt=\"Voyp Server MCP server\" /></a>\n\n## Prerequisites 🔧\n\nBefore you use Voyp, you need:\n\n- [Voyp API key](https://voyp.app/app.html)\n  - You will also need to buy credits to spend while making calls. You can also buy credits [here](https://voyp.app/app.html)\n- [Claude Desktop](https://claude.ai/download), [Goose](https://github.com/block/goose) or other compatible clients\n- [Node.js](https://nodejs.org/) (v20 or higher)\n  - You can verify your Node.js installation by running:\n    - `node --version`\n- [Git](https://git-scm.com/downloads) installed (only needed if using Git installation method)\n  - On macOS: `brew install git`\n  - On Linux: \n    - Debian/Ubuntu: `sudo apt install git`\n    - RedHat/CentOS: `sudo yum install git`\n  - On Windows: Download [Git for Windows](https://git-scm.com/download/win)\n\n## Voyp MCP server installation for [Goose](https://github.com/block/goose) ⚡\n\nTo install the voyp-mcp server you will need to add the extension manually.\n\n![Adding VOYP MCP server to Goose](./assets/voyp-goose-extension.png)\n\nVoyp + Goose Demo:\n\n[![Voyp + Goose Demo](./assets/voyp-goose.gif)](https://www.youtube.com/watch?v=mZaLncjvYOc)\n\n\n## Voyp MCP server installation for Claude Desktop ⚡\n\nTo install the voyp-mcp server, you can use the following methods:\n1. Installing via Smithery\n2. Running with NPX \n3. Git installation\n\n### 1. Installing via Smithery\n\nTo install Voyp Model Context Protocol server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@paulotaylor/voyp-mcp):\n\n```bash\nnpx -y @smithery/cli install @paulotaylor/voyp-mcp --client claude\n```\n\n### 2. Running with NPX \n\n```bash\nnpx -y voyp-mcp@0.1.0   \n```\n\nAlthough you can launch a server on its own, it's not particularly helpful in isolation. Instead, you should integrate it into an MCP client. Below is an example of how to configure the Claude Desktop app to work with the voyp-mcp server.\n\n### Configuring the Claude Desktop app ⚙️\n### For macOS:\n\n```bash\n# Create the config file if it doesn't exist\ntouch \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n\n# Opens the config file in TextEdit \nopen -e \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n\n# Alternative method using Visual Studio Code (requires VS Code to be installed)\ncode \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n```\n\n### For Windows:\n```bash\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n### Add the Voyp server configuration:\n\nReplace `your-VOYP-api-key` with your actual [VOYP API key](https://voyp.app/app.html).\n\n```json\n{\n  \"mcpServers\": {\n    \"voyp-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"voyp-mcp\"],\n      \"env\": {\n        \"VOYP_API_KEY\": \"your-VOYP-api-key\"\n      }\n    }\n  }\n}\n```\n\n### 3. Git Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/paulotaylor/voyp-mcp.git\ncd voyp-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n### Configuring the Claude Desktop app ⚙️\nFollow the configuration steps outlined in the [Configuring the Claude Desktop app](#configuring-the-claude-desktop-app-️) section above, using the below JSON configuration.\n\nReplace `your-VOYP-api-key-here` with your actual [VOYP API key](https://voyp.app/app.html) and `/path/to/voyp-mcp` with the actual path where you cloned the repository on your system.\n\n```json\n{\n  \"mcpServers\": {\n    \"voyp\": {\n      \"command\": \"npx\",\n      \"args\": [\"/path/to/voyp-mcp/build/index.js\"],\n      \"env\": {\n        \"VOYP_API_KEY\": \"your-VOYP-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Usage in Claude Desktop App 🎯\n\nOnce the installation is complete, and the Claude desktop app is configured, you must completely close and re-open the Claude desktop app to see the voyp-mcp server. You should see a hammer icon in the bottom left of the app, indicating available MCP tools, you can click on the hammer icon to see more details on the start_call and hangup_call tools.\n\n\nNow claude will have complete access to the voyp-mcp server, including the start_call and hangup_call tools. \n\nVoyp + Claude Desktop Demo:\n\n[![Voyp + Claude Desktop Demo](./assets/voyp-claude.gif)](https://www.youtube.com/watch?v=E0D1KqOBRuo)\n\n\n## Troubleshooting 🛠️\n\n### Common Issues\n\n1. **Server Not Found**\n   - Verify the npm installation by running `npm --verison`\n   - Check Claude Desktop configuration syntax by running `code ~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   - Ensure Node.js is properly installed by running `node --version`\n   \n2. **NPX related issues**\n  - If you encounter errors related to `npx`, you may need to use the full path to the npx executable instead. \n  - You can find this path by running `which npx` in your terminal, then replace the `\"command\":  \"npx\"` line with `\"command\": \"/full/path/to/npx\"` in your configuration.\n\n3. **API Key Issues**\n   - Confirm your VOYP API key is valid\n   - Check the API key is correctly set in the config\n   - Verify no spaces or quotes around the API key\n\n## Acknowledgments ✨\n\n- [Model Context Protocol](https://modelcontextprotocol.io) for the MCP specification\n- [Anthropic](https://anthropic.com) for Claude Desktop\n",
    "publisher": {
      "id": "paulotaylor",
      "name": "paulotaylor",
      "url": "https://github.com/paulotaylor/voyp-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/paulotaylor/voyp-mcp",
    "distribution": {
      "type": "npm",
      "package": "voyp-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "voyp-mcp"
      ],
      "env": {
        "VOYP_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "1ff89292-a9d3-4668-b1e3-7298e35aee3a",
    "name": "tatn/mcp-server-diff-python",
    "description": "mcp-server-diff-python",
    "fullDescription": "# mcp-server-diff-python\n\nAn MCP server for obtaining text differences between two strings.\nThis server leverages Python's standard library `difflib` to efficiently generate and provide differences between two texts in Unified diff format, making it ideal for text comparison and version control purposes.\n\n<a href=\"https://glama.ai/mcp/servers/qbwsx2g4vd\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/qbwsx2g4vd/badge\" alt=\"Server Diff Python MCP server\" /></a>\n\n## Features\n\n### Tools\n\nThe server provides a single tool:\n\n- **get-unified-diff**: Get differences between two texts in Unified diff format\n  - Arguments:\n    - `string_a`: Source text for comparison (required)\n    - `string_b`: Target text to compare against (required)\n  - Return value: A string containing the differences in Unified diff format\n\n## Usage\n\n### Claude Desktop\n\nUsing with Claude Desktop\nTo use with Claude Desktop, add the server config:\n\nOn MacOS:  `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n\"mcpServers\": {\n  \"mcp-server-diff-python\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-diff-python\"\n    ]\n  }\n}\n```\n\nor Add the following configuration:\n\n```bash\ngit clone https://github.com/tatn/mcp-server-diff-python.git\ncd mcp-server-diff-python\nuv sync\nuv build\n```\n\n```json\n\"mcpServers\": {\n  \"mcp-server-diff-python\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"path\\\\to\\\\mcp-server-diff-python\",\n      \"run\",\n      \"mcp-server-diff-python\"\n    ]\n  }\n}\n```\n\n## Development\n### Debugging\n\nYou can start the MCP Inspector using [npx](https://docs.npmjs.com/cli/v11/commands/npx)with the following commands:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-diff-python\n```\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory path\\to\\mcp-server-diff-python run mcp-server-diff-python\n```\n\n",
    "publisher": {
      "id": "tatn",
      "name": "tatn",
      "url": "https://github.com/tatn/mcp-server-diff-python"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tatn/mcp-server-diff-python",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-diff-python"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-diff-python"
      ],
      "env": {}
    }
  },
  {
    "id": "7fc93722-f3ce-462c-988b-1d3d9e97d506",
    "name": "vrknetha/mcp-server-firecrawl",
    "description": "FireCrawl MCP Server",
    "fullDescription": "# FireCrawl MCP Server\n\nA Model Context Protocol (MCP) server implementation that integrates with FireCrawl for advanced web scraping capabilities.\n\n## Features\n\n- Web scraping with JavaScript rendering\n- Batch scraping with parallel processing and queuing\n- URL discovery and crawling\n- Web search with content extraction\n- Automatic retries with exponential backoff\n- Credit usage monitoring for cloud API\n- Comprehensive logging system\n- Support for cloud and self-hosted FireCrawl instances\n- Mobile/Desktop viewport support\n- Smart content filtering with tag inclusion/exclusion\n\n## Installation\n\n### Installing via Smithery\n\nTo install FireCrawl for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-firecrawl):\n\n```bash\nnpx -y @smithery/cli install mcp-server-firecrawl --client claude\n```\n\n### Manual Installation\n\n```bash\nnpm install -g mcp-server-firecrawl\n```\n\n## Configuration\n\n### Environment Variables\n\n- `FIRE_CRAWL_API_KEY`: Your FireCrawl API key\n  - Required when using cloud API (default)\n  - Optional when using self-hosted instance with `FIRE_CRAWL_API_URL`\n- `FIRE_CRAWL_API_URL` (Optional): Custom API endpoint for self-hosted instances\n  - Example: `https://firecrawl.your-domain.com`\n  - If not provided, the cloud API will be used (requires API key)\n\n### Configuration Examples\n\nFor cloud API usage (default):\n\n```bash\nexport FIRE_CRAWL_API_KEY=your-api-key\n```\n\nFor self-hosted instance without authentication:\n\n```bash\nexport FIRE_CRAWL_API_URL=https://firecrawl.your-domain.com\n```\n\nFor self-hosted instance with authentication:\n\n```bash\nexport FIRE_CRAWL_API_URL=https://firecrawl.your-domain.com\nexport FIRE_CRAWL_API_KEY=your-api-key  # Optional for authenticated self-hosted instances\n```\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-firecrawl\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-firecrawl\"],\n      \"env\": {\n        \"FIRE_CRAWL_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### System Configuration\n\nThe server includes several configurable parameters:\n\n```typescript\nconst CONFIG = {\n  retry: {\n    maxAttempts: 3,\n    initialDelay: 1000, // 1 second\n    maxDelay: 10000, // 10 seconds\n    backoffFactor: 2,\n  },\n  batch: {\n    delayBetweenRequests: 2000, // 2 seconds\n    maxParallelOperations: 3,\n  },\n  credit: {\n    warningThreshold: 1000,\n    criticalThreshold: 100,\n  },\n};\n```\n\n### Rate Limits\n\nThe server implements rate limiting to prevent API abuse:\n\n- 3 requests per minute on free tier\n- Automatic retries with exponential backoff\n- Parallel processing for batch operations\n- Higher limits available on paid plans\n\n## Available Tools\n\n### 1. Scrape Tool (`fire_crawl_scrape`)\n\nScrape content from a single URL with advanced options.\n\n```json\n{\n  \"name\": \"fire_crawl_scrape\",\n  \"arguments\": {\n    \"url\": \"https://example.com\",\n    \"formats\": [\"markdown\"],\n    \"onlyMainContent\": true,\n    \"waitFor\": 1000,\n    \"timeout\": 30000,\n    \"mobile\": false,\n    \"includeTags\": [\"article\", \"main\"],\n    \"excludeTags\": [\"nav\", \"footer\"],\n    \"skipTlsVerification\": false\n  }\n}\n```\n\n### 2. Batch Scrape Tool (`fire_crawl_batch_scrape`)\n\nScrape multiple URLs with parallel processing and queuing.\n\n```json\n{\n  \"name\": \"fire_crawl_batch_scrape\",\n  \"arguments\": {\n    \"urls\": [\"https://example1.com\", \"https://example2.com\"],\n    \"options\": {\n      \"formats\": [\"markdown\"],\n      \"onlyMainContent\": true\n    }\n  }\n}\n```\n\nResponse includes operation ID for status checking:\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Batch operation queued with ID: batch_1. Use fire_crawl_check_batch_status to check progress.\"\n    }\n  ],\n  \"isError\": false\n}\n```\n\n### 3. Check Batch Status (`fire_crawl_check_batch_status`)\n\nCheck the status of a batch operation.\n\n```json\n{\n  \"name\": \"fire_crawl_check_batch_status\",\n  \"arguments\": {\n    \"id\": \"batch_1\"\n  }\n}\n```\n\n### 4. Search Tool (`fire_crawl_search`)\n\nSearch the web and optionally extract content from search results.\n\n```json\n{\n  \"name\": \"fire_crawl_search\",\n  \"arguments\": {\n    \"query\": \"your search query\",\n    \"limit\": 5,\n    \"lang\": \"en\",\n    \"country\": \"us\",\n    \"scrapeOptions\": {\n      \"formats\": [\"markdown\"],\n      \"onlyMainContent\": true\n    }\n  }\n}\n```\n\n### 5. Crawl Tool (`fire_crawl_crawl`)\n\nStart an asynchronous crawl with advanced options.\n\n```json\n{\n  \"name\": \"fire_crawl_crawl\",\n  \"arguments\": {\n    \"url\": \"https://example.com\",\n    \"maxDepth\": 2,\n    \"limit\": 100,\n    \"allowExternalLinks\": false,\n    \"deduplicateSimilarURLs\": true\n  }\n}\n```\n\n### 6. Extract Tool (`fire_crawl_extract`)\n\nExtract structured information from web pages using LLM capabilities. Supports both cloud AI and self-hosted LLM extraction.\n\n```json\n{\n  \"name\": \"fire_crawl_extract\",\n  \"arguments\": {\n    \"urls\": [\"https://example.com/page1\", \"https://example.com/page2\"],\n    \"prompt\": \"Extract product information including name, price, and description\",\n    \"systemPrompt\": \"You are a helpful assistant that extracts product information\",\n    \"schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"price\": { \"type\": \"number\" },\n        \"description\": { \"type\": \"string\" }\n      },\n      \"required\": [\"name\", \"price\"]\n    },\n    \"allowExternalLinks\": false,\n    \"enableWebSearch\": false,\n    \"includeSubdomains\": false\n  }\n}\n```\n\nExample response:\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"name\": \"Example Product\",\n        \"price\": 99.99,\n        \"description\": \"This is an example product description\"\n      }\n    }\n  ],\n  \"isError\": false\n}\n```\n\n#### Extract Tool Options:\n\n- `urls`: Array of URLs to extract information from\n- `prompt`: Custom prompt for the LLM extraction\n- `systemPrompt`: System prompt to guide the LLM\n- `schema`: JSON schema for structured data extraction\n- `allowExternalLinks`: Allow extraction from external links\n- `enableWebSearch`: Enable web search for additional context\n- `includeSubdomains`: Include subdomains in extraction\n\nWhen using a self-hosted instance, the extraction will use your configured LLM. For cloud API, it uses FireCrawl's managed LLM service.\n\n## Logging System\n\nThe server includes comprehensive logging:\n\n- Operation status and progress\n- Performance metrics\n- Credit usage monitoring\n- Rate limit tracking\n- Error conditions\n\nExample log messages:\n\n```\n[INFO] FireCrawl MCP Server initialized successfully\n[INFO] Starting scrape for URL: https://example.com\n[INFO] Batch operation queued with ID: batch_1\n[WARNING] Credit usage has reached warning threshold\n[ERROR] Rate limit exceeded, retrying in 2s...\n```\n\n## Error Handling\n\nThe server provides robust error handling:\n\n- Automatic retries for transient errors\n- Rate limit handling with backoff\n- Detailed error messages\n- Credit usage warnings\n- Network resilience\n\nExample error response:\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Error: Rate limit exceeded. Retrying in 2 seconds...\"\n    }\n  ],\n  \"isError\": true\n}\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n\n# Run tests\nnpm test\n```\n\n### Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Run tests: `npm test`\n4. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details\n",
    "publisher": {
      "id": "vrknetha",
      "name": "vrknetha",
      "url": "https://github.com/vrknetha/mcp-server-firecrawl"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/vrknetha/mcp-server-firecrawl",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-firecrawl"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-firecrawl"
      ],
      "env": {
        "FIRE_CRAWL_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "FIRE_CRAWL_API_URL": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "cf7b9971-4d80-48b7-8060-731e935211b4",
    "name": "adenot/mcp-google-search",
    "description": "mcp-google-server A MCP Server for Google Custom Search and Webpage Reading",
    "fullDescription": "# mcp-google-server A MCP Server for Google Custom Search and Webpage Reading\n\nA Model Context Protocol server that provides web search capabilities using Google Custom Search API and webpage content extraction functionality.\n\n## Setup\n\n### Getting Google API Key and Search Engine ID\n\n1. Create a Google Cloud Project:\n   - Go to [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable billing for your project\n\n2. Enable Custom Search API:\n   - Go to [API Library](https://console.cloud.google.com/apis/library)\n   - Search for \"Custom Search API\"\n   - Click \"Enable\"\n\n3. Get API Key:\n   - Go to [Credentials](https://console.cloud.google.com/apis/credentials)\n   - Click \"Create Credentials\" > \"API Key\"\n   - Copy your API key\n   - (Optional) Restrict the API key to only Custom Search API\n\n4. Create Custom Search Engine:\n   - Go to [Programmable Search Engine](https://programmablesearchengine.google.com/create/new)\n   - Enter the sites you want to search (use www.google.com for general web search)\n   - Click \"Create\"\n   - On the next page, click \"Customize\"\n   - In the settings, enable \"Search the entire web\"\n   - Copy your Search Engine ID (cx)\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Features\n\n### Search Tool\nPerform web searches using Google Custom Search API:\n- Search the entire web or specific sites\n- Control number of results (1-10)\n- Get structured results with title, link, and snippet\n\n### Webpage Reader Tool\nExtract content from any webpage:\n- Fetch and parse webpage content\n- Extract page title and main text\n- Clean content by removing scripts and styles\n- Return structured data with title, text, and URL\n\n## Installation\n\n### Installing via Smithery\n\nTo install Google Custom Search Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@adenot/mcp-google-search):\n\n```bash\nnpx -y @smithery/cli install @adenot/mcp-google-search --client claude\n```\n\nTo use with Claude Desktop, add the server config with your Google API credentials:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"google-search\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@adenot/mcp-google-search\"\n      ],\n      \"env\": {\n        \"GOOGLE_API_KEY\": \"your-api-key-here\",\n        \"GOOGLE_SEARCH_ENGINE_ID\": \"your-search-engine-id-here\"\n      }\n    }\n  }\n}\n```\n\n## Usage\n\n### Search Tool\n```json\n{\n  \"name\": \"search\",\n  \"arguments\": {\n    \"query\": \"your search query\",\n    \"num\": 5  // optional, default is 5, max is 10\n  }\n}\n```\n\n### Webpage Reader Tool\n```json\n{\n  \"name\": \"read_webpage\",\n  \"arguments\": {\n    \"url\": \"https://example.com\"\n  }\n}\n```\n\nExample response from webpage reader:\n```json\n{\n  \"title\": \"Example Domain\",\n  \"text\": \"Extracted and cleaned webpage content...\",\n  \"url\": \"https://example.com\"\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
    "publisher": {
      "id": "adenot",
      "name": "adenot",
      "url": "https://github.com/adenot/mcp-google-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/adenot/mcp-google-search",
    "distribution": {
      "type": "npm",
      "package": "@adenot/mcp-google-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@adenot/mcp-google-search"
      ],
      "env": {
        "GOOGLE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "GOOGLE_SEARCH_ENGINE_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "88f5d30d-b523-4608-b95d-955231125d30",
    "name": "pskill9/website-downloader",
    "description": "Website Downloader MCP Server",
    "fullDescription": "# Website Downloader MCP Server\n\nThis MCP server provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.\n\n## Prerequisites\n\nThe server requires `wget` to be installed on your system.\n\n### Installing wget\n\n#### macOS\nUsing Homebrew:\n```bash\nbrew install wget\n```\n\n#### Linux (Debian/Ubuntu)\n```bash\nsudo apt-get update\nsudo apt-get install wget\n```\n\n#### Linux (Red Hat/Fedora)\n```bash\nsudo dnf install wget\n```\n\n#### Windows\n1. Using [Chocolatey](https://chocolatey.org/):\n```bash\nchoco install wget\n```\n\n2. Or download the binary from: https://eternallybored.org/misc/wget/\n   - Download the latest wget.exe\n   - Place it in a directory that's in your PATH (e.g., C:\\Windows\\System32)\n\n## Usage\n\nThe server provides a tool called `download_website` with the following parameters:\n\n- `url` (required): The URL of the website to download\n- `outputPath` (optional): The directory where the website should be downloaded. Defaults to the current directory.\n- `depth` (optional): Maximum depth level for recursive downloading. Defaults to infinite. Set to 0 for just the specified page, 1 for direct links, etc.\n\n### Example\n\n```json\n{\n  \"url\": \"https://example.com\",\n  \"outputPath\": \"/path/to/output\",\n  \"depth\": 2  // Optional: Download up to 2 levels deep\n}\n```\n\n## Features\n\nThe website downloader:\n- Downloads recursively with infinite depth\n- Includes all page requisites (CSS, images, etc.)\n- Converts links to work locally\n- Adds appropriate extensions to files\n- Restricts downloads to the same domain\n- Preserves the website structure\n\n## Installation\n\n1. Build the server:\n```bash\nnpm install\nnpm run build\n```\n\n2. Add to MCP settings:\n```json\n{\n  \"mcpServers\": {\n    \"website-downloader\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/website-downloader/build/index.js\"]\n    }\n  }\n}\n",
    "publisher": {
      "id": "pskill9",
      "name": "pskill9",
      "url": "https://github.com/pskill9/website-downloader"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/pskill9/website-downloader",
    "distribution": {
      "type": "npm",
      "package": "website-downloader"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "website-downloader"
      ],
      "env": {}
    }
  },
  {
    "id": "4984438b-efa8-4a77-82ab-0316a17144d7",
    "name": "folderr-tech/folderr-mcp-server",
    "description": "Folderr MCP Server",
    "fullDescription": "# Folderr MCP Server\n\nA Model Context Protocol (MCP) server that provides tools to interact with Folderr's API, specifically for managing and communicating with Folderr Assistants.\n\n## Installation\n\nAdd to your MCP Settings\n\n```\n{\n  \"mcpServers\": {\n    \"folderr\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@folderr/folderr-mcp-server\"]\n    }\n  }\n}\n```\n\n## Features\n\nThe server provides the following tools:\n\n### Authentication\n\nTwo methods of authentication are supported:\n\n1. **Login with Email/Password**\n   ```typescript\n   {\n     \"name\": \"login\",\n     \"arguments\": {\n       \"email\": \"user@example.com\",\n       \"password\": \"your-password\"\n     }\n   }\n   ```\n\n2. **API Token Authentication**\n   ```typescript\n   {\n     \"name\": \"set_api_token\",\n     \"arguments\": {\n       \"token\": \"your-api-token\"\n     }\n   }\n   ```\n   API tokens can be generated from the Folderr developers section. This method is recommended for automated or long-running processes.\n\n### Assistant Management\n\n1. **List Assistants**\n   ```typescript\n   {\n     \"name\": \"list_assistants\",\n     \"arguments\": {}\n   }\n   ```\n   Returns a list of all available assistants for the authenticated user.\n\n2. **Ask Assistant**\n   ```typescript\n   {\n     \"name\": \"ask_assistant\",\n     \"arguments\": {\n       \"assistant_id\": \"assistant-id\",\n       \"question\": \"Your question here\"\n     }\n   }\n   ```\n   Send a question to a specific assistant and receive their response.\n\n## Configuration\n\nThe server stores its configuration in a `config.json` file, which includes:\n- Base URL for the Folderr API\n- Authentication token (from login or API key)\n\n## Error Handling\n\nThe server provides detailed error messages for common scenarios:\n- Authentication failures\n- Invalid requests\n- API errors\n- Network issues\n\n## Development\n\nTo build the server:\n```bash\nnpm install\nnpm run build\n```\n\n## Usage in MCP Settings\n\nAdd the following to your MCP settings configuration:\n```json\n{\n  \"mcpServers\": {\n    \"folderr\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/folderr-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## Authentication Flow\n\n1. Either:\n   - Use the `login` tool with email and password\n   - Use the `set_api_token` tool with an API token from Folderr's developers section\n2. The authentication token is automatically saved and used for subsequent requests\n3. All assistant-related tools require authentication before use\n\n## Error Messages\n\nCommon error messages and their meanings:\n- \"Not logged in\": No authentication token is set\n- \"Login failed\": Invalid credentials\n- \"Failed to list assistants\": Error retrieving assistant list\n- \"Failed to ask assistant\": Error sending question to assistant\n",
    "publisher": {
      "id": "folderr",
      "name": "folderr",
      "url": "https://github.com/folderr-tech/folderr-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/folderr-tech/folderr-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@folderr/folderr-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@folderr/folderr-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "618af1a1-4753-4bff-ad1e-c978282e7668",
    "name": "linear-mcp",
    "description": "Linear MCP Server",
    "fullDescription": "# Linear MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with Linear's API, enabling AI agents to manage issues, projects, and teams programmatically through the Linear platform.\n\n## Features\n\n- **Issue Management**\n  - Create new issues with customizable properties (title, description, team, assignee, priority, labels)\n  - List issues with flexible filtering options (team, assignee, status)\n  - Update existing issues (title, description, status, assignee, priority)\n\n- **Team Management**\n  - List all teams in the workspace\n  - Access team details including ID, name, key, and description\n\n- **Project Management**\n  - List all projects with optional team filtering\n  - View project details including name, description, state, and associated teams\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- A Linear account with API access\n- Linear API key with appropriate permissions\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone [repository-url]\ncd linear-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\n1. Obtain a Linear API key:\n   - Go to your Linear workspace settings\n   - Navigate to the API section\n   - Generate a new API key with appropriate permissions\n\n2. Configure the MCP server in your settings file based on your client:\n\n### For Cline (VS Code Extension)\nLocation: `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n```json\n{\n  \"mcpServers\": {\n    \"linear-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/linear-server/build/index.js\"],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"your-api-key-here\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### For Roo Cline\nLocation: `~/Library/Application Support/Roo Cline/settings/cline_mcp_settings.json`\n```json\n{\n  \"mcpServers\": {\n    \"linear-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/linear-server/build/index.js\"],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"your-api-key-here\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### For Claude Desktop\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n```json\n{\n  \"mcpServers\": {\n    \"linear-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/linear-server/build/index.js\"],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"your-api-key-here\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n### create_issue\nCreates a new issue in Linear.\n```typescript\n{\n  title: string;          // Required: Issue title\n  description?: string;   // Optional: Issue description (markdown supported)\n  teamId: string;        // Required: Team ID\n  assigneeId?: string;   // Optional: Assignee user ID\n  priority?: number;     // Optional: Priority (0-4)\n  labels?: string[];     // Optional: Label IDs to apply\n}\n```\n\n### list_issues\nLists issues with optional filters.\n```typescript\n{\n  teamId?: string;      // Optional: Filter by team ID\n  assigneeId?: string;  // Optional: Filter by assignee ID\n  status?: string;      // Optional: Filter by status\n  first?: number;       // Optional: Number of issues to return (default: 50)\n}\n```\n\n### update_issue\nUpdates an existing issue.\n```typescript\n{\n  issueId: string;       // Required: Issue ID\n  title?: string;        // Optional: New title\n  description?: string;  // Optional: New description\n  status?: string;      // Optional: New status\n  assigneeId?: string;  // Optional: New assignee ID\n  priority?: number;    // Optional: New priority (0-4)\n}\n```\n\n### list_teams\nLists all teams in the workspace. No parameters required.\n\n### list_projects\nLists all projects with optional filtering.\n```typescript\n{\n  teamId?: string;     // Optional: Filter by team ID\n  first?: number;      // Optional: Number of projects to return (default: 50)\n}\n```\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. The project includes the MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Invalid API keys\n- Missing required parameters\n- Linear API errors\n- Invalid tool requests\n\nAll errors are properly formatted and returned with descriptive messages to help diagnose issues.\n\n## Technical Details\n\nBuilt with:\n- TypeScript\n- Linear SDK (@linear/sdk v37.0.0)\n- MCP SDK (@modelcontextprotocol/sdk v0.6.0)\n\nThe server uses stdio for communication and implements the Model Context Protocol for seamless integration with AI agents.",
    "publisher": {
      "id": "ibraheem4",
      "name": "ibraheem4",
      "url": "https://github.com/ibraheem4/linear-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ibraheem4/linear-mcp",
    "distribution": {
      "type": "npm",
      "package": "@ibraheem4/linear-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@ibraheem4/linear-mcp"
      ],
      "env": {
        "LINEAR_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "7e84b9bd-fb93-45df-9c15-a1411adb399d",
    "name": "cyanheads/obsidian-mcp-server",
    "description": "Obsidian MCP Server",
    "fullDescription": "# Obsidian MCP Server\n\nA Model Context Protocol server designed for LLMs to interact with Obsidian vaults. Built with TypeScript and featuring secure API communication, efficient file operations, and comprehensive search capabilities, it enables AI assistants to seamlessly manage knowledge bases through a clean, flexible tool interface.\n\nThe Model Context Protocol (MCP) enables AI models to interact with external tools and resources through a standardized interface.\n\nRequires the Local REST API plugin in Obsidian.\n\n## Features\n\n### File Operations\n- Atomic file/directory operations with validation\n- Resource monitoring and cleanup\n\n### Search System\n- Full-text search with configurable context\n- Advanced JsonLogic queries for files, tags, and metadata\n- Support for glob patterns and frontmatter fields\n\n### Property Management\n- YAML frontmatter parsing and intelligent merging\n- Automatic timestamps (created by Obsidian, modified by server)\n- Custom field support\n\n### Security & Performance\n- API key auth with rate limiting and SSL options\n- Resource monitoring and health checks\n\n## Installation\n\n1. Install Node.js (LTS recommended)\n2. Enable Local REST API plugin in Obsidian\n3. Clone and build:\n```bash\ngit clone git@github.com:cyanheads/obsidian-mcp-server.git\ncd obsidian-mcp-server\nnpm install\nnpm run build\n```\n\nOr install from npm:\n```bash\nnpm install obsidian-mcp-server\n```\n\n## Configuration\n\nAdd to your MCP client settings (e.g., `claude_desktop_config.json` or `cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/obsidian-mcp-server/build/index.js\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"your_api_key_here\",\n        \"VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_PROTOCOL\": \"https\",\n        \"OBSIDIAN_HOST\": \"127.0.0.1\",\n        \"OBSIDIAN_PORT\": \"27124\",\n        \"REQUEST_TIMEOUT\": \"5000\",\n        \"MAX_CONTENT_LENGTH\": \"52428800\",\n        \"MAX_BODY_LENGTH\": \"52428800\",\n        \"RATE_LIMIT_WINDOW_MS\": \"900000\",\n        \"RATE_LIMIT_MAX_REQUESTS\": \"200\",\n        \"TOOL_TIMEOUT_MS\": \"60000\"\n      }\n    }\n  }\n}\n```\n\nEnvironment Variables:\n\nRequired:\n- `OBSIDIAN_API_KEY`: Your API key from Obsidian's Local REST API plugin settings\n\nConnection Settings:\n- `VERIFY_SSL`: Enable SSL certificate verification (default: false in development)\n- `OBSIDIAN_PROTOCOL`: Protocol to use (default: \"https\")\n- `OBSIDIAN_HOST`: Host address (default: \"127.0.0.1\")\n- `OBSIDIAN_PORT`: Port number (default: 27124)\n\nRequest Limits:\n- `REQUEST_TIMEOUT`: Request timeout in milliseconds (default: 5000)\n- `MAX_CONTENT_LENGTH`: Maximum response content length in bytes (default: 52428800 [50MB])\n- `MAX_BODY_LENGTH`: Maximum request body length in bytes (default: 52428800 [50MB])\n\nRate Limiting:\n- `RATE_LIMIT_WINDOW_MS`: Rate limit window in milliseconds (default: 900000 [15 minutes])\n- `RATE_LIMIT_MAX_REQUESTS`: Maximum requests per window (default: 200)\n\nTool Execution:\n- `TOOL_TIMEOUT_MS`: Tool execution timeout in milliseconds (default: 60000 [1 minute])\n\nSSL Certificate Setup:\n\nFor Windows Users:\n1. Development Setup (Not Recommended for Production):\n   - Set `VERIFY_SSL` to \"false\"\n   - Set `OBSIDIAN_PROTOCOL` to \"http\"\n   - Enable \"Non-encrypted (HTTP) Server\" in Obsidian's Local REST API settings\n\n2. Production Setup (Recommended):\n   - Set `VERIFY_SSL` to \"true\"\n   - Get the certificate from Obsidian Settings > Local REST API > 'How to Access'\n   - Open Windows Certificate Manager (certmgr.msc)\n   - Navigate to \"Trusted Root Certification Authorities\" > \"Certificates\"\n   - Right-click > \"All Tasks\" > \"Import\" and select the certificate file\n\nFor Other Systems:\n- macOS: Add certificate to Keychain Access\n- Linux: Add to ca-certificates\n\nAdditional configuration options:\n```typescript\ninterface ObsidianConfig {\n  apiKey: string;           // Required: API key for authentication\n  verifySSL?: boolean;      // Optional: Enable SSL verification\n  timeout?: number;         // Optional: Request timeout in ms\n  maxContentLength?: number;// Optional: Max response content length\n  maxBodyLength?: number;   // Optional: Max request body length\n}\n\ninterface RateLimitConfig {\n  windowMs: number;         // Time window for rate limiting\n  maxRequests: number;      // Max requests per window\n}\n```\n\nError Handling:\n- All errors include a 5-digit error code\n- HTTP status codes are automatically converted (e.g., 404 -> 40400)\n- Default server error code: 50000\n- Detailed error messages include original error stack traces in development\n\n## Tools\n\n### File Management\n```typescript\n// List vault contents\nobsidian_list_files_in_vault: {}\n\n// List directory contents\nobsidian_list_files_in_dir: {\n  dirpath: string  // Path relative to vault root\n}\n\n// Get file contents\nobsidian_get_file_contents: {\n  filepath: string  // Path relative to vault root\n}\n```\n\n### Search Operations\n```typescript\n// Text search with context\nobsidian_find_in_file: {\n  query: string,\n  contextLength?: number  // Default: 10\n}\n\n// Advanced search with JsonLogic\nobsidian_complex_search: {\n  query: JsonLogicQuery\n  // Examples:\n  // Find by tag:\n  // {\"in\": [\"#mytag\", {\"var\": \"frontmatter.tags\"}]}\n  //\n  // Find markdown files in a directory:\n  // {\"glob\": [\"docs/*.md\", {\"var\": \"path\"}]}\n  //\n  // Combine conditions:\n  // {\"and\": [\n  //   {\"glob\": [\"*.md\", {\"var\": \"path\"}]},\n  //   {\"in\": [\"#mytag\", {\"var\": \"frontmatter.tags\"}]}\n  // ]}\n}\n```\n\n### Content Modification\n```typescript\n// Append to file\nobsidian_append_content: {\n  filepath: string,  // Path relative to vault root\n  content: string    // Content to append\n}\n\n// Update file content\nobsidian_patch_content: {\n  filepath: string,  // Path relative to vault root\n  content: string    // New content (replaces existing)\n}\n```\n\n### Command Management\n```typescript\n// List available commands\nobsidian_list_commands: {}\n\n// Execute a command\nobsidian_execute_command: {\n  commandId: string  // Command ID to execute\n}\n```\n\n### File Navigation\n```typescript\n// Open a file in Obsidian\nobsidian_open_file: {\n  filepath: string,   // Path relative to vault root\n  newLeaf?: boolean  // Open in new leaf (default: false)\n}\n\n// Get active file content\nobsidian_get_active_file: {}\n\n// Get periodic note content\nobsidian_get_periodic_note: {\n  period: \"daily\" | \"weekly\" | \"monthly\" | \"quarterly\" | \"yearly\"\n}\n```\n\n### Property Management\n```typescript\n// Get all tags in vault or directory\nobsidian_get_tags: {\n  path?: string  // Optional: limit to specific directory\n}\n\n// Get note properties\nobsidian_get_properties: {\n  filepath: string  // Path relative to vault root\n}\n\n// Update note properties\nobsidian_update_properties: {\n  filepath: string,  // Path relative to vault root\n  properties: {\n    title?: string,\n    author?: string,\n    // Note: created/modified timestamps are managed automatically\n    type?: Array<\"concept\" | \"architecture\" | \"specification\" | \n      \"protocol\" | \"api\" | \"research\" | \"implementation\" | \n      \"guide\" | \"reference\">,\n    tags?: string[],  // Must start with #\n    status?: Array<\"draft\" | \"in-progress\" | \"review\" | \"complete\">,\n    version?: string,\n    platform?: string,\n    repository?: string,  // URL\n    dependencies?: string[],\n    sources?: string[],\n    urls?: string[],      // URLs\n    papers?: string[],\n    custom?: Record<string, unknown>\n  }\n}\n```\n\n## Best Practices\n\n### File Operations\n- Use atomic operations with validation\n- Handle errors and monitor performance\n\n### Search Implementation\n- Use appropriate search tool for the task:\n  - obsidian_find_in_file for text search\n  - obsidian_complex_search for metadata/tag filtering\n- Keep context size reasonable (default: 10 chars)\n\n### Property Management\n- Use appropriate types and validate updates\n- Handle arrays and custom fields properly\n- Never set timestamps (managed automatically)\n\n### Error Prevention\n- Validate inputs and handle errors gracefully\n- Monitor patterns and respect rate limits\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Submit a Pull Request\n\nFor bugs and features, create an issue at [https://github.com/cyanheads/obsidian-mcp-server/issues](https://github.com/cyanheads/obsidian-mcp-server/issues).\n\n## Publishing\n\nThe package is automatically published to npm when version tags are pushed:\n\n```bash\n# Update version in package.json\nnpm version patch  # or minor, or major\ngit push --follow-tags\n```\n\nThis will trigger the GitHub Action to build and publish the package.\n\n## License\n\nApache License 2.0\n\n---\n\n<div align=\"center\">\nBuilt with the Model Context Protocol\n</div>\n",
    "publisher": {
      "id": "cyanheads",
      "name": "cyanheads",
      "url": "https://github.com/cyanheads/obsidian-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cyanheads/obsidian-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "obsidian-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "obsidian-mcp-server"
      ],
      "env": {
        "OBSIDIAN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "VERIFY_SSL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "OBSIDIAN_PROTOCOL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "OBSIDIAN_HOST": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "OBSIDIAN_PORT": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "REQUEST_TIMEOUT": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "MAX_CONTENT_LENGTH": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "MAX_BODY_LENGTH": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "RATE_LIMIT_WINDOW_MS": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "RATE_LIMIT_MAX_REQUESTS": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "TOOL_TIMEOUT_MS": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "aebce795-92aa-42e1-9292-8e8802fec07f",
    "name": "Siddhant-K-code/memory-journal-mcp-server",
    "description": "📸 Smart Photo Journal MCP Server",
    "fullDescription": "# 📸 Smart Photo Journal MCP Server\n\n**Smart Photo Journal** is an MCP server designed to help you search and analyze your photo library with powerful, intuitive tools. Whether you're reminiscing about family moments or looking for a specific photo with friends, this server has got you covered! 🎉\n\n> **Inspired by:** [burningion/video-editing-mcp](https://github.com/burningion/video-editing-mcp)\n> A huge shoutout to [@burningion](https://x.com/burningion) for the innovative idea of using MCP for creative media management!\n\n<a href=\"https://glama.ai/mcp/servers/51jiworg5k\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/51jiworg5k/badge\" alt=\"Smart Photo Journal Server MCP server\" /></a>\n\n## 🎯 Features\n\n- **Location Search:** Find photos from specific places with ease. 🌍\n- **Label Search:** Search photos by keywords or labels like \"Birthday,\" \"Beach,\" or \"Vacation.\" 🎉\n- **People Search:** Quickly locate photos featuring specific people. 👥\n- **Photo Analysis:** Discover fun insights like the most popular times and days for your photo shoots. 🕰️\n- **Fuzzy Matching:** Not sure of the exact name? Don't worry! The server supports fuzzy matching for flexibility. 🔍\n\n## 🚀 Getting started\n\n### Prerequisites\n\n1. Ensure you have macOS with a Photos library.\n2. Install [uv](https://docs.astral.sh/uv/) to manage dependencies and run the server.\n\n### Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Siddhant-K-code/memory-journal-mcp-server.git\n   cd memory-journal-mcp-server\n   ```\n\n2. Install dependencies using `uv`:\n\n   ```bash\n   uv sync\n   ```\n\n3. Configure the MCP server. Update your `claude_desktop_config.json` with the following configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"smart-photo-journal\": {\n         \"command\": \"/Users/<YOUR_DEVICE_USERNAME>/.local/bin/uv\",\n         \"args\": [\n           \"--directory\",\n           \"/Users/<PATH_TO_CLONED_DIR>/memory-journal-mcp-server\",\n           \"run\",\n           \"server.py\"\n         ]\n       }\n     }\n   }\n   ```\n\n4. Start the server with following command or just open Claude Desktop:\n   ```bash\n   uv run server.py\n   ```\n\n> **Note:** Replace `<YOUR_DEVICE_USERNAME>` and `<PATH_TO_CLONED_DIR>` with your actual device username and the path to the cloned directory.\n> You will get a popup to authorize the server to access your photos. It will be in local only, and no data will be shared with anyone except Claude services.\n\n### MCP Server Initialization\n\nWhen the server starts, you'll see:\n\n```\nStarting Smart Photo Journal MCP server.\n```\n\nIt's now ready to process your photo queries! 🎉\n\n---\n\n## 🛠️ Usage\n\n### Available Tools\n\n1. **Location Search**\n\n   - Description: Find photos taken in a specific location.\n   - Input Example:\n     ```json\n     {\n       \"location\": \"Udaipur\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Found 5 photos from Udaipur:\n     📷 IMG_1234.jpg\n     ...\n     ```\n\n2. **Label Search**\n\n   - Description: Search for photos by labels or keywords.\n   - Input Example:\n     ```json\n     {\n       \"label\": \"Birthday\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Photos labeled as 'Birthday' (3 found):\n     📷 IMG_5678.jpg\n     ...\n     ```\n\n3. **People Search**\n\n   - Description: Find photos containing specific people.\n   - Input Example:\n     ```json\n     {\n       \"person\": \"Maa\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Photos with Maa (10 found):\n     📷 IMG_9101.jpg\n     ...\n     ```\n\n4. **Photo Analysis**\n   - Description: Analyze patterns in your photo library, such as the most common times or days for photo shoots.\n   - Input Example:\n     ```json\n     {}\n     ```\n   - Expected Output:\n     ```\n     📸 Photo Taking Patterns:\n     Total Photos: 200\n     ...\n     ```\n\n---\n\n## 📚 Example Use-Cases\n\n### 1. **Family & Friends Album Organizer**\n\nWant to gather all your family moments in one place? Use the `people-search` tool with names like \"Papa\" or \"Mom\" or \"Any Friend\" to find photos with specific people.\n\n### 2. **Vacation Highlights**\n\nSearch for photos from your vacation destination using the `location-search` tool.\n\n### 3. **Throwback Fun**\n\nCurious about your past birthday photos? Use `label-search` with \"Birthday\" and relive the fun!\n\n### 4. **Understand Your Photography Habits**\n\nUse the `photo-analysis` tool to understand when and where you take most of your photos. Plan your next shoot accordingly!\n\n---\n\n## ⚡ Tips for Best Results\n\n- Ensure your Photos library is loaded in macOS.\n- Be as specific as possible with search queries for more accurate results.\n- Use fuzzy matching for flexibility when you're unsure of the exact name.\n",
    "publisher": {
      "id": "Siddhant-K-code",
      "name": "Siddhant-K-code",
      "url": "https://github.com/Siddhant-K-code/memory-journal-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Siddhant-K-code/memory-journal-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "memory-journal-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "memory-journal-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "18ffa867-8436-4b08-897c-fe3b0b7e8eb0",
    "name": "turlockmike/apple-notifier-mcp",
    "description": "Apple Notifier MCP Server",
    "fullDescription": "# Apple Notifier MCP Server\n\nSend native macOS notifications and interact with system dialogs through any MCP-compatible client like Claude Desktop or Cline.\n\n## Prerequisites\n\n- macOS\n- Node.js >= 18\n- An MCP-compatible client (Claude Desktop, Cline)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Apple Notifier for Claude Desktop automatically via [Smithery](https://smithery.ai/server/apple-notifier-mcp):\n\n```bash\nnpx -y @smithery/cli install apple-notifier-mcp --client claude\n```\n\n### Manual Installation\n1. Install the package globally:\n```bash\nnpm install -g apple-notifier-mcp\n```\n\n2. Add to your MCP configuration file:\n\nFor Cline (`cline_mcp_settings.json`):\n```json\n{\n  \"mcpServers\": {\n    \"apple-notifier\": {\n      \"command\": \"apple-notifier-mcp\"\n    }\n  }\n}\n```\n\nFor Claude Desktop (`claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"apple-notifier\": {\n      \"command\": \"apple-notifier-mcp\"\n    }\n  }\n}\n```\n\n## Features\n\n### Send Notifications\n\nDisplay native macOS notifications with customizable content.\n\nParameters:\n- `title` (required): string - The title of the notification\n- `message` (required): string - The main message content\n- `subtitle` (optional): string - A subtitle to display\n- `sound` (optional): boolean - Whether to play the default notification sound (default: true)\n\n### Display Prompts\n\nShow interactive dialog prompts to get user input.\n\nParameters:\n- `message` (required): string - Text to display in the prompt dialog\n- `defaultAnswer` (optional): string - Default text to pre-fill\n- `buttons` (optional): string[] - Custom button labels (max 3)\n- `icon` (optional): 'note' | 'stop' | 'caution' - Icon to display\n\n### Text-to-Speech\n\nUse macOS text-to-speech capabilities.\n\nParameters:\n- `text` (required): string - Text to speak\n- `voice` (optional): string - Voice to use (defaults to system voice)\n- `rate` (optional): number - Speech rate (-50 to 50, defaults to 0)\n\n### Take Screenshots\n\nCapture screenshots using macOS screencapture.\n\nParameters:\n- `path` (required): string - Path where to save the screenshot\n- `type` (required): 'fullscreen' | 'window' | 'selection' - Type of screenshot\n- `format` (optional): 'png' | 'jpg' | 'pdf' | 'tiff' - Image format\n- `hideCursor` (optional): boolean - Whether to hide the cursor\n- `shadow` (optional): boolean - Whether to include window shadow (only for window type)\n- `timestamp` (optional): boolean - Add timestamp to filename\n\n### File Selection\n\nOpen native macOS file picker dialog.\n\nParameters:\n- `prompt` (optional): string - Prompt message\n- `defaultLocation` (optional): string - Default directory path\n- `fileTypes` (optional): object - File type filter (e.g., {\"public.image\": [\"png\", \"jpg\"]})\n- `multiple` (optional): boolean - Allow multiple file selection\n\n## Example Usage\n\n```typescript\n// Send a notification\nawait client.use_mcp_tool(\"apple-notifier\", \"send_notification\", {\n  title: \"Hello\",\n  message: \"World\",\n  sound: true\n});\n\n// Show a prompt\nconst result = await client.use_mcp_tool(\"apple-notifier\", \"prompt_user\", {\n  message: \"What's your name?\",\n  defaultAnswer: \"John Doe\",\n  buttons: [\"OK\", \"Cancel\"]\n});\n\n// Speak text\nawait client.use_mcp_tool(\"apple-notifier\", \"speak\", {\n  text: \"Hello, world!\",\n  voice: \"Samantha\",\n  rate: -20\n});\n\n// Take a screenshot\nawait client.use_mcp_tool(\"apple-notifier\", \"take_screenshot\", {\n  path: \"screenshot.png\",\n  type: \"window\",\n  format: \"png\"\n});\n\n// Select files\nconst files = await client.use_mcp_tool(\"apple-notifier\", \"select_file\", {\n  prompt: \"Select images\",\n  fileTypes: {\n    \"public.image\": [\"png\", \"jpg\", \"jpeg\"]\n  },\n  multiple: true\n});\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for development setup and guidelines.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "turlockmike",
      "name": "turlockmike",
      "url": "https://github.com/turlockmike/apple-notifier-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/turlockmike/apple-notifier-mcp",
    "distribution": {
      "type": "npm",
      "package": "apple-notifier-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "apple-notifier-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "28b0d352-d2a7-463e-8fe7-d85a338b8f6c",
    "name": "Hawstein/mcp-server-reddit",
    "description": "MCP Server Reddit",
    "fullDescription": "# MCP Server Reddit\n\nA Model Context Protocol server providing access to Reddit public API for LLMs. This server enables LLMs to interact with Reddit's content, including browsing frontpage posts, accessing subreddit information, and reading post comments.\n\nThis server uses [redditwarp](https://github.com/Pyprohly/redditwarp) to interact with Reddit's public API and exposes the functionality through MCP protocol.\n\n## Video Demo (Click to Watch)\n\nA demo in ClaudeMind 👇\n\n[![MCP Server Reddit - ClaudeMind](https://img.youtube.com/vi/1Gdx1jWFbCM/maxresdefault.jpg)](https://youtu.be/1Gdx1jWFbCM)\n\n\n## Available Tools\n\n- `get_frontpage_posts` - Get hot posts from Reddit frontpage\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_info` - Get information about a subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n\n- `get_subreddit_hot_posts` - Get hot posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_new_posts` - Get new posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_top_posts` - Get top posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n    - `time` (string): Time filter for top posts (default: '', options: 'hour', 'day', 'week', 'month', 'year', 'all')\n\n- `get_subreddit_rising_posts` - Get rising posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_post_content` - Get detailed content of a specific post\n  - Required arguments:\n    - `post_id` (string): ID of the post\n  - Optional arguments:\n    - `comment_limit` (integer): Number of top-level comments to return (default: 10, range: 1-100)\n    - `comment_depth` (integer): Maximum depth of comment tree (default: 3, range: 1-10)\n\n- `get_post_comments` - Get comments from a post\n  - Required arguments:\n    - `post_id` (string): ID of the post\n  - Optional arguments:\n    - `limit` (integer): Number of comments to return (default: 10, range: 1-100)\n\n\n## Installation\n\n### Using [ClaudeMind](https://claudemind.com/) (recommended)\n\nThe easiest way to use MCP Server Reddit is through the ClaudeMind desktop app. Simply download and install ClaudeMind, then:\n\n1. Open the ClaudeMind app\n2. Navigate to the Servers page\n3. Find mcp-server-reddit and click Install\n\nThat's it! No technical knowledge required - ClaudeMind handles all the installation and configuration for you seamlessly.\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-reddit*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-reddit` via pip:\n\n```bash\npip install mcp-server-reddit\n```\n\nAfter installation, you can run it as a script using:\n\n```bash\npython -m mcp_server_reddit\n```\n\n### Installing via Smithery\n\nTo install MCP Server Reddit for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Hawstein/mcp-server-reddit):\n\n```bash\nnpx -y @smithery/cli install @Hawstein/mcp-server-reddit --client claude\n```\n\n## Configuration\n\n### Configure for Claude.app\n\nAdd to your Claude settings:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-reddit\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_reddit\"]\n  }\n}\n```\n</details>\n\n### Configure for Zed\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-reddit\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-reddit\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_reddit\"]\n  }\n},\n```\n</details>\n\n## Examples of Questions\n\n- \"What are the current hot posts on Reddit's frontpage?\" (get_frontpage_posts)\n- \"Tell me about the r/ClaudeAI subreddit\" (get_subreddit_info)\n- \"What are the hot posts in the r/ClaudeAI subreddit?\" (get_subreddit_hot_posts)\n- \"Show me the newest posts from r/ClaudeAI\" (get_subreddit_new_posts)\n- \"What are the top posts of all time in r/ClaudeAI?\" (get_subreddit_top_posts)\n- \"What posts are trending in r/ClaudeAI right now?\" (get_subreddit_rising_posts)\n- \"Get the full content and comments of this Reddit post: [post_url]\" (get_post_content)\n- \"Summarize the comments on this Reddit post: [post_url]\" (get_post_comments)\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-reddit\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/mcp_server_reddit\nnpx @modelcontextprotocol/inspector uv run mcp-server-reddit\n```\n\n## License\n\nmcp-server-reddit is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "Hawstein",
      "name": "Hawstein",
      "url": "https://github.com/Hawstein/mcp-server-reddit"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Hawstein/mcp-server-reddit",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-reddit"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-reddit"
      ],
      "env": {}
    }
  },
  {
    "id": "c03becb0-c685-4cc1-b7ca-ca145c63a740",
    "name": "GongRzhe/REDIS-MCP-Server",
    "description": "Redis MCP Server",
    "fullDescription": "# Redis MCP Server\n\nA Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.\n\n## Installation & Usage\n\n### Installing via Smithery\n\nTo install Redis MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gongrzhe/server-redis-mcp):\n\n```bash\nnpx -y @smithery/cli install @gongrzhe/server-redis-mcp --client claude\n```\n\n### Installing Manually\n```bash\n# Using npx with specific version (recommended)\nnpx @gongrzhe/server-redis-mcp@1.0.0 redis://your-redis-host:port\n\n# Example:\nnpx @gongrzhe/server-redis-mcp@1.0.0 redis://localhost:6379\n```\n\nOr install globally:\n\n```bash\n# Install specific version globally\nnpm install -g @gongrzhe/server-redis-mcp@1.0.0\n\n# Run after global installation\n@gongrzhe/server-redis-mcp redis://your-redis-host:port\n```\n\n## Components\n\n### Tools\n\n- **set**\n  - Set a Redis key-value pair with optional expiration\n  - Input:\n    - `key` (string): Redis key\n    - `value` (string): Value to store\n    - `expireSeconds` (number, optional): Expiration time in seconds\n\n- **get**\n  - Get value by key from Redis\n  - Input: `key` (string): Redis key to retrieve\n\n- **delete**\n  - Delete one or more keys from Redis\n  - Input: `key` (string | string[]): Key or array of keys to delete\n\n- **list**\n  - List Redis keys matching a pattern\n  - Input: `pattern` (string, optional): Pattern to match keys (default: *)\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@gongrzhe/server-redis-mcp@1.0.0\",\n        \"redis://localhost:6379\"\n      ]\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/build/index.js\",\n        \"redis://10.1.210.223:6379\"\n      ]\n    }\n  }\n}\n```\n\n### Docker Usage\n\nWhen using Docker:\n* For macOS, use `host.docker.internal` if the Redis server is running on the host network\n* Redis URL can be specified as an argument, defaults to \"redis://localhost:6379\"\n\n```json\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/redis\", \n        \"redis://host.docker.internal:6379\"\n      ]\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Docker Build\n\n```bash\ndocker build -t mcp/redis .\n```\n\n## License\n\nThis MCP server is licensed under the ISC License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "gongrzhe",
      "name": "gongrzhe",
      "url": "https://github.com/GongRzhe/REDIS-MCP-Server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/GongRzhe/REDIS-MCP-Server",
    "distribution": {
      "type": "npm",
      "package": "@gongrzhe/server-redis-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@gongrzhe/server-redis-mcp",
        "$ENVARG_REDIS_URL"
      ],
      "env": {
        "ENVARG_REDIS_URL": {
          "description": "Redis connection URL string",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "cbeeeb42-ea79-4783-9c0d-d6ab7e386c37",
    "name": "adityak74/mcp-scholarly",
    "description": "mcp-scholarly MCP server",
    "fullDescription": "# mcp-scholarly MCP server\n\nA MCP server to search for accurate academic articles. More scholarly vendors will be added soon.\n\n![image](https://github.com/user-attachments/assets/13202184-bc12-4530-b7c1-2ee698f3e1cc)\n\n## Components\n\n### Tools\n\nThe server implements one tool:\n- search-arxiv: Search arxiv for articles related to the given keyword.\n  - Takes \"keyword\" as required string arguments\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-scholarly\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/adityakarnam/PycharmProjects/mcp-scholarly/mcp-scholarly\",\n        \"run\",\n        \"mcp-scholarly\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-scholarly\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-scholarly\"\n      ]\n    }\n  }\n  ```\n</details>\n\nor if you are using Docker\n\n<details>\n  <summary>Published Docker Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-scholarly\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"mcp/scholarly\"\n      ]\n    }\n  }\n  ```\n</details>\n\n### Installing via Smithery\n\nTo install mcp-scholarly for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-scholarly):\n\n```bash\nnpx -y @smithery/cli install mcp-scholarly --client claude\n```\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/adityakarnam/PycharmProjects/mcp-scholarly/mcp-scholarly run mcp-scholarly\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
    "publisher": {
      "id": "adityak74",
      "name": "adityak74",
      "url": "https://github.com/adityak74/mcp-scholarly"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/adityak74/mcp-scholarly",
    "distribution": {
      "type": "pip",
      "package": "mcp-scholarly"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-scholarly"
      ],
      "env": {}
    }
  },
  {
    "id": "4ab72bf5-cb3b-45a9-be89-608f27eba670",
    "name": "amir-bengherbi/shopify-mcp-server",
    "description": "Shopify MCP Server",
    "fullDescription": "# Shopify MCP Server\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n## Features\n\n* **Product Management**: Search and retrieve product information\n* **Customer Management**: Load customer data and manage customer tags\n* **Order Management**: Advanced order querying and filtering\n* **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n* **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Tools\n\n1. `get-products`\n   * Get all products or search by title\n   * Inputs:\n     * `searchTitle` (optional string): Filter products by title\n     * `limit` (number): Maximum number of products to return\n   * Returns: Formatted product details including title, description, handle, and variants\n\n2. `get-products-by-collection`\n   * Get products from a specific collection\n   * Inputs:\n     * `collectionId` (string): ID of the collection to get products from\n     * `limit` (optional number, default: 10): Maximum number of products to return\n   * Returns: Formatted product details from the specified collection\n\n3. `get-products-by-ids`\n   * Get products by their IDs\n   * Inputs:\n     * `productIds` (array of strings): Array of product IDs to retrieve\n   * Returns: Formatted product details for the specified products\n\n4. `get-variants-by-ids`\n   * Get product variants by their IDs\n   * Inputs:\n     * `variantIds` (array of strings): Array of variant IDs to retrieve\n   * Returns: Detailed variant information including product details\n\n5. `get-customers`\n   * Get shopify customers with pagination support\n   * Inputs:\n     * `limit` (optional number): Maximum number of customers to return\n     * `next` (optional string): Next page cursor\n   * Returns: Customer data in JSON format\n\n6. `tag-customer`\n   * Add tags to a customer\n   * Inputs:\n     * `customerId` (string): Customer ID to tag\n     * `tags` (array of strings): Tags to add to the customer\n   * Returns: Success or failure message\n\n7. `get-orders`\n   * Get orders with advanced filtering and sorting\n   * Inputs:\n     * `first` (optional number): Limit of orders to return\n     * `after` (optional string): Next page cursor\n     * `query` (optional string): Filter orders using query syntax\n     * `sortKey` (optional enum): Field to sort by ('PROCESSED_AT', 'TOTAL_PRICE', 'ID', 'CREATED_AT', 'UPDATED_AT', 'ORDER_NUMBER')\n     * `reverse` (optional boolean): Reverse sort order\n   * Returns: Formatted order details\n\n8. `get-order`\n   * Get a single order by ID\n   * Inputs:\n     * `orderId` (string): ID of the order to retrieve\n   * Returns: Detailed order information\n\n9. `create-discount`\n   * Create a basic discount code\n   * Inputs:\n     * `title` (string): Title of the discount\n     * `code` (string): Discount code that customers will enter\n     * `valueType` (enum): Type of discount ('percentage' or 'fixed_amount')\n     * `value` (number): Discount value (percentage as decimal or fixed amount)\n     * `startsAt` (string): Start date in ISO format\n     * `endsAt` (optional string): Optional end date in ISO format\n     * `appliesOncePerCustomer` (boolean): Whether discount can be used only once per customer\n   * Returns: Created discount details\n\n10. `create-draft-order`\n    * Create a draft order\n    * Inputs:\n      * `lineItems` (array): Array of items with variantId and quantity\n      * `email` (string): Customer email\n      * `shippingAddress` (object): Shipping address details\n      * `note` (optional string): Optional note for the order\n    * Returns: Created draft order details\n\n11. `complete-draft-order`\n    * Complete a draft order\n    * Inputs:\n      * `draftOrderId` (string): ID of the draft order to complete\n      * `variantId` (string): ID of the variant in the draft order\n    * Returns: Completed order details\n\n12. `get-collections`\n    * Get all collections\n    * Inputs:\n      * `limit` (optional number, default: 10): Maximum number of collections to return\n      * `name` (optional string): Filter collections by name\n    * Returns: Collection details\n\n13. `get-shop`\n    * Get shop details\n    * Inputs: None\n    * Returns: Basic shop information\n\n14. `get-shop-details`\n    * Get extended shop details including shipping countries\n    * Inputs: None\n    * Returns: Extended shop information including shipping countries\n\n15. `manage-webhook`\n    * Subscribe, find, or unsubscribe webhooks\n    * Inputs:\n      * `action` (enum): Action to perform ('subscribe', 'find', 'unsubscribe')\n      * `callbackUrl` (string): Webhook callback URL\n      * `topic` (enum): Webhook topic to subscribe to\n      * `webhookId` (optional string): Webhook ID (required for unsubscribe)\n    * Returns: Webhook details or success message\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   * `read_products`, `write_products`\n   * `read_customers`, `write_customers`\n   * `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\nNote: Store your access token securely. It provides access to your store data and should never be shared or committed to version control.\nMore details on how to create a Shopify app can be found [here](https://help.shopify.com/en/manual/apps/app-types/custom-apps).\n\n### Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"shopify-mcp-server\"],\n      \"env\": {\n        \"SHOPIFY_ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"MYSHOPIFY_DOMAIN\": \"<YOUR_SHOP>.myshopify.com\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Create a `.env` file:\n```\nSHOPIFY_ACCESS_TOKEN=your_access_token\nMYSHOPIFY_DOMAIN=your-store.myshopify.com\n```\n4. Build the project:\n```bash\nnpm run build\n```\n5. Run tests:\n```bash\nnpm test\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk - MCP protocol implementation\n- graphql-request - GraphQL client for Shopify API\n- zod - Runtime type validation\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) first.\n\n## License\n\nMIT\n\n## Community\n\n- [MCP GitHub Discussions](https://github.com/modelcontextprotocol/servers/discussions)\n- [Report Issues](https://github.com/your-username/shopify-mcp-server/issues)\n\n---\n\nBuilt with ❤️ using the [Model Context Protocol](https://modelcontextprotocol.io) \n",
    "publisher": {
      "id": "amir-bengherbi",
      "name": "amir-bengherbi",
      "url": "https://github.com/amir-bengherbi/shopify-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/amir-bengherbi/shopify-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "shopify-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "shopify-mcp-server"
      ],
      "env": {
        "SHOPIFY_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSHOPIFY_DOMAIN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "b6dd7b47-7f27-4c0e-9dfd-85121f2cff5e",
    "name": "AbdelStark/bitcoin-mcp",
    "description": "₿itcoin MCP Server",
    "fullDescription": "# ₿itcoin MCP Server\n\n## Overview\n\nA Model Context Protocol (MCP) server that enables AI models to interact with Bitcoin, allowing them to generate keys, validate addresses, decode transactions, query the blockchain, and more.\n\n## 🎮 Demo\n\n| Claude Demo [Video](https://github.com/user-attachments/assets/ce7a2665-c276-4a54-a727-b29dd911f8af)         | Goose Demo [Video](https://github.com/user-attachments/assets/7c1e4a05-51cf-435f-bd34-39e8fba6635e) |\n| ------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------- |\n| <img src=\"docs/static/img/bitcoin-mcp-claude-desktop-screenshot.png\" alt=\"Claude Desktop Demo\" width=\"400\"/> | <img src=\"docs/static/img/bitcoin-mcp-goose-screenshot.png\" alt=\"Goose Demo\" width=\"400\"/>          |\n\n## 💼 Table of Contents\n\n- [₿itcoin MCP Server](#itcoin-mcp-server)\n  - [Overview](#overview)\n  - [🎮 Demo](#-demo)\n  - [💼 Table of Contents](#-table-of-contents)\n  - [🔧 Features](#-features)\n  - [🔑 Claude Desktop Integration](#-claude-desktop-integration)\n    - [Testing the Claude Desktop Integration](#testing-the-claude-desktop-integration)\n  - [🦆 Goose Integration](#-goose-integration)\n    - [Using STDIO (Local Extension)](#using-stdio-local-extension)\n      - [Using SSE (Remote Extension)](#using-sse-remote-extension)\n  - [📦 Development Setup](#-development-setup)\n  - [📦 Available Tools](#-available-tools)\n  - [🚨 Error Handling](#-error-handling)\n  - [🤝 Contributing](#-contributing)\n  - [📝 License](#-license)\n\n## 🔧 Features\n\n- **Key Generation**: Create new Bitcoin key pairs — including address, public key, and private key (WIF).\n- **Address Validation**: Validate the correctness of a Bitcoin address.\n- **Transaction Decoding**: Parse a raw Bitcoin transaction and display its details in a human-readable format.\n- **Blockchain Queries**:\n  - **Latest Block**: Retrieve details about the most recent block (hash, height, timestamp, transaction count, etc.).\n  - **Transaction Details**: Fetch detailed information about a transaction using its TXID.\n\n## 🔑 Claude Desktop Integration\n\nTo use the Bitcoin MCP server with Claude Desktop (Anthropic's desktop app for Claude), follow these steps:\n\n1. **Download and Install Claude Desktop:** Visit the official Claude Desktop downloads page and get the app for your operating system (macOS or Windows) ([Installing Claude for Desktop | Anthropic Help Center](https://support.anthropic.com/en/articles/10065433-installing-claude-for-desktop#:~:text=1,page)). Install the app and ensure you're using the latest version (you can check for updates in the app menu).\n\n2. **Configure Claude Desktop to use the Bitcoin MCP Server:** Open the Claude Desktop configuration file (it's created when you first edit settings in Claude Desktop):\n\n   - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`  \n     Add an entry for the Bitcoin MCP server in this JSON config under the `\"mcpServers\"` section. For example:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"bitcoin-mcp\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"bitcoin-mcp@latest\"]\n       }\n     }\n   }\n   ```\n\n   In the snippet above, `\"bitcoin-mcp\"` is an identifier for the server (you can name it whatever you want). The `command` is set to run the `npx` command, and `args` points to the path of your Bitcoin MCP server script or the command to run the server.\n\n3. **Restart Claude Desktop:** Save the `claude_desktop_config.json` file and then **close and reopen Claude Desktop**. On the next launch, Claude will automatically start the Bitcoin MCP server as configured. If Claude Desktop was running, you need to restart it for the changes to take effect.\n\n### Testing the Claude Desktop Integration\n\nOnce Claude Desktop is restarted, you can test whether the Bitcoin MCP server is working correctly:\n\n- **Ask Claude a sample question related to Bitcoin.** For example, try asking: _\"What's the latest block on the Bitcoin network?\"_ If the integration is successful, Claude's response should include the latest block fetched via the MCP server, rather than an \"I don't know\" or a generic answer. You can also try other queries like _\"Give me information about the transaction with TXID abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890.\"_ Claude should use the MCP server's tools to retrieve the data and answer your query.\n\n- **Verify the response:** Claude should return a detailed answer (e.g. the latest block on the Bitcoin network) without errors. If you get an error message or no useful response, the MCP server might not be connected properly.\n\n- **Check Claude's logs (if needed):** Claude Desktop provides log files that can help debug MCP integrations. If the tool isn't responding, check the log files in:\n  - **macOS:** `~/Library/Logs/Claude/`\n  - **Windows:** `%APPDATA%\\Claude\\logs\\`  \n    Look for `mcp.log` for general MCP connection messages, and a file named `mcp-server-bitcoin-mcp.log` (or with whatever name you used) for the MCP server's output/errors. These logs will show if the server started up or if there were any errors (such as a wrong path or exceptions in the server). If you see errors, fix the configuration or environment as needed, then restart Claude Desktop and test again.\n\n## 🦆 Goose Integration\n\nGoose is an open-source AI agent framework by Block that supports extensions via the Model Context Protocol. You can integrate the Bitcoin MCP server as a Goose extension to allow Goose to interact with the Bitcoin blockchain. Goose supports two modes of integration for MCP servers: running the server as a local process (STDIO) or connecting to it as a remote service via Server-Sent Events (SSE). Below are instructions for both methods:\n\n### Using STDIO (Local Extension)\n\nThis method runs the Bitcoin MCP server locally as a subprocess of Goose, communicating through standard input/output.\n\n1. **Add a new extension in Goose:** Open Goose's configuration interface. You can do this via the command line by running `goose configure`, or in the Goose Desktop app by going to **Settings > Extensions**. From the menu, choose **\"Add Extension.\"** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1))\n\n2. **Choose the extension type – Command-Line Extension:** When prompted for the type of extension, select **Command-Line Extension** (in the CLI menu or UI) so that Goose knows it should launch a local command ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)) (as opposed to a built-in or remote extension).\n\n3. **Enter the extension details:** Provide a name and command for the Bitcoin MCP server:\n\n   - **Name:** You can call it \"bitcoin\", or any identifier (this will be how you refer to the extension).\n   - **Command:** Specify how to run the MCP server. For example, if you have the Python script, enter the command to run it. In the CLI configurator, it might ask \"What command should be run?\" – you would enter:\n\n     ```bash\n     npx -y bitcoin-mcp@latest\n     ```\n\n     This tells Goose to launch the Bitcoin MCP server ([GitHub - AbdelStark/bitcoin-mcp: Bitcoin MCP Server](https://github.com/AbdelStark/bitcoin-mcp)). (Make sure to use the correct path to your server script or the correct command to run the server, just like in the Claude config.)\n\n   - You typically do not need to add any arguments beyond the script path (unless your server requires special flags). The above command uses the default STDIO transport, which Goose expects for a command-line extension. (In the Goose config file, this would correspond to an entry with `cmd: \"npx\"` and `args: [\"-y\", \"bitcoin-mcp@latest\"]`, with `type: stdio` indicating standard I/O mode ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=extensions%3A%20fetch%3A%20name%3A%20GitHub%20cmd%3A,%7D%20type%3A%20stdio)).)\n\n4. **Finalize and enable:** Complete the extension addition. Goose will add this new extension to its configuration (usually `~/.config/goose/config.yaml`). Ensure the extension is **enabled** (if using the CLI wizard, it should be enabled by default once added; in the Goose Desktop app, you can check the Extensions list and toggle it on if it isn't already ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%97%87%20%20What%20would%20you,%E2%94%82%20%20%E2%97%BB%20fetch%20%E2%94%94)) ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%94%82%20%20%E2%97%BE%20developer%20%E2%94%82,%E2%97%BB%20fetch%20%E2%94%94))).\n\n5. **Start a Goose session with the new extension:** You can now use the extension in Goose. If you're running Goose via CLI, start a session that includes the extension by running:\n\n   ```bash\n   goose session --with-extension \"bitcoin\"\n   ```\n\nreplacing \"bitcoin\" with whatever name you gave the extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=Starting%20a%20Session%20with%20Extensions)). (This ensures the session loads the extension. Alternatively, if the extension is enabled globally, Goose Desktop or CLI will automatically have it available in all sessions.)\n\n#### Using SSE (Remote Extension)\n\nThis method connects Goose to an already-running MCP server via an HTTP SSE stream. Use this if you want to run the Bitcoin MCP server as a standalone service (possibly on another machine or just independently of Goose).\n\n1. **Launch the MCP server as a standalone service:** Run the Bitcoin MCP server so that it listens for connections. In practice, this means the server needs to be started in a mode that serves an HTTP endpoint for MCP. For example, you might run the server with a specific command or option to listen on a port (such as using an MCP library's built-in web server capabilities or running under a web framework). Ensure the server is reachable at a known URL (e.g., `http://localhost:9000`) and supports the MCP protocol over SSE.\n\n2. **Add a new extension in Goose (Remote):** As before, run `goose configure` or use the Goose UI to **Add Extension** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1)). This time, choose **Remote Extension** when asked for the type of extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)). This tells Goose that it will connect to an external server via SSE.\n\n3. **Enter the remote extension details:** Give the extension a name (e.g., \"bitcoin\") and provide the server's URL. For the **URL**, enter the base address where the MCP server is running. For instance, if your server is listening on port 9000 on your local machine, you might enter `http://localhost:9000`. Goose will attempt to connect to the MCP server's SSE endpoint at that address. (Goose uses the standard MCP SSE path, which by convention is under the `/mcp/sse` route on the server, you usually just need to supply the host and port, and Goose handles the rest.)\n\n4. **Enable the extension:** After adding the remote extension, ensure it's enabled in Goose's settings (just like in the STDIO case). Only one of the STDIO or SSE extension (with the same tools) needs to be enabled – if you accidentally enable both a local and remote version of the same server, you may want to disable one to avoid confusion.\n\n**Using the Bitcoin MCP extension in Goose:** Once the extension is set up (via either method above) and enabled, you can interact with Goose and query Bitcoin data through it. In a new Goose chat or session, simply ask questions as you normally would. Goose will recognize when to use the Bitcoin MCP tools to fulfill your request. For example:\n\n- _\"What's the latest Bitcoin block?\"_\n- _\"Give me information about the transaction with TXID abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890.\"_\n\nWhen you ask these questions, Goose will invoke the MCP server's tools and return the answer (e.g., the latest Bitcoin block information). You should see Goose responding with up-to-date information pulled from the Bitcoin blockchain via the MCP server.\n\nIf Goose does not seem to use the extension (for instance, if it responds that it cannot find the information), make sure the extension is enabled and that the server is running (in SSE mode for remote). You can also run Goose's CLI with verbose logging to see if it attempted to call the extension. Generally, if configured correctly, Goose will automatically discover the MCP server's capabilities and use them when relevant.\n\n**Further Resources:** For more details on Goose extensions and the MCP, refer to the official Goose documentation ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=MCP%20Server%20Directory)). The docs include a list of built-in and community extensions and explain how MCP servers integrate into Goose. You can also find a directory of available MCP servers and additional configuration tips in the Goose docs and the Model Context Protocol documentation. This can help if you want to explore more extensions or develop your own.\n\n## 📦 Development Setup\n\nFind the setup instructions in the [Development Setup](https://abdelstark.github.io/bitcoin-mcp/docs/getting-started/development-setup) guide.\n\n## 📦 Available Tools\n\nFind the available tools in the [API Reference](https://abdelstark.github.io/bitcoin-mcp/docs/api/generate-key) guide.\n\n## 🚨 Error Handling\n\nThe server employs custom error types to handle Bitcoin operations and blockchain queries. Detailed error messages are logged using Pino and included in client responses for easier debugging.\n\n## 🤝 Contributing\n\nContributions and feature requests are welcome! Feel free to submit pull requests or open issues on GitHub.\n\n## 📝 License\n\nThis project is licensed under the [MIT License](LICENSE).\n",
    "publisher": {
      "id": "AbdelStark",
      "name": "AbdelStark",
      "url": "https://github.com/AbdelStark/bitcoin-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/AbdelStark/bitcoin-mcp",
    "distribution": {
      "type": "npm",
      "package": "bitcoin-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "bitcoin-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "4faaa073-abbe-4ebc-83cc-9e717b48f7ef",
    "name": "kimtaeyoon83/mcp-server-youtube-transcript",
    "description": "YouTube Transcript Server",
    "fullDescription": "# YouTube Transcript Server\n\nA Model Context Protocol server that enables retrieval of transcripts from YouTube videos. This server provides direct access to video captions and subtitles through a simple interface.\n\n### Installing via Smithery\n\nTo install YouTube Transcript Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/@kimtaeyoon83/mcp-server-youtube-transcript):\n\n```bash\nnpx @smithery/cli install @kimtaeyoon83/mcp-server-youtube-transcript --client claude\n```\n\n## Components\n\n### Tools\n\n- **get_transcript**\n  - Extract transcripts from YouTube videos\n  - Inputs:\n    - `url` (string, required): YouTube video URL or video ID\n    - `lang` (string, optional, default: \"en\"): Language code for transcript (e.g., 'ko', 'en')\n\n## Key Features\n\n- Support for multiple video URL formats\n- Language-specific transcript retrieval\n- Detailed metadata in responses\n\n## Configuration\n\nTo use with Claude Desktop, add this server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube-transcript\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kimtaeyoon83/mcp-server-youtube-transcript\"]\n    }\n  }\n}\n```\n\n## Install via tool\n\n[mcp-get](https://github.com/michaellatman/mcp-get) A command-line tool for installing and managing Model Context Protocol (MCP) servers.\n\n```shell \nnpx @michaellatman/mcp-get@latest install @kimtaeyoon83/mcp-server-youtube-transcript\n```\n\n## Awesome-mcp-servers \n[awesome-mcp-servers](https://github.com/punkpeye/awesome-mcp-servers) A curated list of awesome Model Context Protocol (MCP) servers.\n\n## Development\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n\n### Setup\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the MCP Inspector for development:\n\n```bash\nnpm run inspector\n```\n\n## Error Handling\n\nThe server implements robust error handling for common scenarios:\n- Invalid video URLs or IDs\n- Unavailable transcripts\n- Language availability issues\n- Network errors\n\n## Usage Examples\n\n1. Get transcript by video URL:\n```typescript\nawait server.callTool(\"get_transcript\", {\n  url: \"https://www.youtube.com/watch?v=VIDEO_ID\",\n  lang: \"en\"\n});\n```\n\n2. Get transcript by video ID:\n```typescript\nawait server.callTool(\"get_transcript\", {\n  url: \"VIDEO_ID\",\n  lang: \"ko\"\n});\n```\n\n3. How to Extract YouTube Subtitles in Claude Desktop App\n```\nchat: https://youtu.be/ODaHJzOyVCQ?si=aXkJgso96Deri0aB Extract subtitles\n```\n\n## Security Considerations\n\nThe server:\n- Validates all input parameters\n- Handles YouTube API errors gracefully\n- Implements timeouts for transcript retrieval\n- Provides detailed error messages for troubleshooting\n\n## License\n\nThis MCP server is licensed under the MIT License. See the LICENSE file for details.\n",
    "publisher": {
      "id": "kimtaeyoon83",
      "name": "kimtaeyoon83",
      "url": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
    "distribution": {
      "type": "npm",
      "package": "@kimtaeyoon83/mcp-server-youtube-transcript"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kimtaeyoon83/mcp-server-youtube-transcript"
      ],
      "env": {}
    }
  },
  {
    "id": "1c18e1c7-51e2-4cf1-961e-dbcf9690e32f",
    "name": "shanejonas/openrpc-mpc-server",
    "description": "OpenRPC MCP Server",
    "fullDescription": "# OpenRPC MCP Server\n\nA Model Context Protocol (MCP) server that provides JSON-RPC functionality through [OpenRPC](https://open-rpc.org).\n\nhttps://github.com/user-attachments/assets/3447175a-f921-4ded-8250-b611edb2fb67\n\n## Features\n\n### Tools\n\n- `rpc_call` - Call arbitrary JSON-RPC methods\n  - Specify server URL, method name, and parameters\n  - Returns JSON-formatted results\n- `rpc_discover` - Discover available JSON-RPC methods\n  - Uses OpenRPC's `rpc.discover` specification\n  - Lists all methods on a given server\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"openrpc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"openrpc-mcp-server\"]\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
    "publisher": {
      "id": "shanejonas",
      "name": "shanejonas",
      "url": "https://github.com/shanejonas/openrpc-mpc-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/shanejonas/openrpc-mpc-server",
    "distribution": {
      "type": "npm",
      "package": "openrpc-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "openrpc-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "638d4c32-b70a-4390-938b-ff7fb948eab9",
    "name": "tokenizin-agency/mcp-npx-fetch",
    "description": "MCP NPX Fetch",
    "fullDescription": "# MCP NPX Fetch\n\nA powerful MCP server for fetching and transforming web content into various formats (HTML, JSON, Markdown, Plain Text) with ease.\n\n---\n\n## 🚀 Features\n\n- 🌐 **Universal Content Fetching**: Supports HTML, JSON, plain text, and Markdown formats\n- 🔒 **Custom Headers Support**: Add authentication and custom headers to your requests\n- 🛠 **Built-in Transformations**: Automatic conversion between formats\n- ⚡ **High Performance**: Built with modern JavaScript features and optimized for speed\n- 🔌 **MCP Compatible**: Seamlessly integrates with Claude Desktop and other MCP clients\n- 🎯 **Type-Safe**: Written in TypeScript with full type definitions\n\n## 📦 Installation\n\n### NPM Global Installation\n\n```bash\nnpm install -g @tokenizin/mcp-npx-fetch\n\n```\n\n### Direct Usage with NPX\n\n```bash\nnpx @tokenizin/mcp-npx-fetch\n```\n\n## 📚 Documentation\n\n### Available Tools\n\n#### `fetch_html`\n\nFetches and returns raw HTML content from any URL.\n\n```typescript\n{\n  url: string;     // Required: Target URL\n  headers?: {      // Optional: Custom request headers\n    [key: string]: string;\n  };\n}\n```\n\n#### `fetch_json`\n\nFetches and parses JSON data from any URL.\n\n```typescript\n{\n  url: string;     // Required: Target URL\n  headers?: {      // Optional: Custom request headers\n    [key: string]: string;\n  };\n}\n```\n\n#### `fetch_txt`\n\nFetches and returns clean plain text content, removing HTML tags and scripts.\n\n```typescript\n{\n  url: string;     // Required: Target URL\n  headers?: {      // Optional: Custom request headers\n    [key: string]: string;\n  };\n}\n```\n\n#### `fetch_markdown`\n\nFetches content and converts it to well-formatted Markdown.\n\n```typescript\n{\n  url: string;     // Required: Target URL\n  headers?: {      // Optional: Custom request headers\n    [key: string]: string;\n  };\n}\n```\n\n## 🔧 Usage\n\n### CLI Usage\n\nStart the MCP server directly:\n\n```bash\nmcp-npx-fetch\n```\n\nOr via npx:\n\n```bash\nnpx @tokenizin/mcp-npx-fetch\n```\n\n### Claude Desktop Integration\n\n1. Locate your Claude Desktop configuration file:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the following configuration to your `mcpServers` object:\n\n```json\n{\n  \"mcpServers\": {\n    \"fetch\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tokenizin/mcp-npx-fetch\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## 💻 Local Development\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/tokenizin-agency/mcp-npx-fetch.git\ncd mcp-npx-fetch\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Start development mode:\n\n```bash\nnpm run dev\n```\n\n4. Run tests:\n\n```bash\nnpm test\n```\n\n## 🛠 Technical Stack\n\n- [Model Context Protocol SDK](https://github.com/modelcontextprotocol/sdk) - Core MCP functionality\n- [JSDOM](https://github.com/jsdom/jsdom) - HTML parsing and manipulation\n- [Turndown](https://github.com/mixmark-io/turndown) - HTML to Markdown conversion\n- [TypeScript](https://www.typescriptlang.org/) - Type safety and modern JavaScript features\n- [Zod](https://github.com/colinhacks/zod) - Runtime type validation\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\nMade with ❤️ by <a href=\"https://github.com/tokenizin-agency\">PT Tokenizin Technology Agency</a>\n",
    "publisher": {
      "id": "tokenizin",
      "name": "tokenizin",
      "url": "https://github.com/tokenizin-agency/mcp-npx-fetch"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tokenizin-agency/mcp-npx-fetch",
    "distribution": {
      "type": "npm",
      "package": "@tokenizin/mcp-npx-fetch"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@tokenizin/mcp-npx-fetch"
      ],
      "env": {}
    }
  },
  {
    "id": "95fae16c-524b-451a-9d37-4bdd30aa9a49",
    "name": "blurrah/mcp-graphql",
    "description": "mcp-graphql",
    "fullDescription": "# mcp-graphql\n\nModel Context Protocol server for working with GraphQL servers. It's a simple implementation using an introspection query to read the schema and one tool to query your server.\n\n## Usage\nRun `mcp-graphql` with the correct endpoint, it will automatically try to introspect your queries. You can optionally add a JSON string containing headers if needed.\n\n```bash\n# Example using a local GraphQL server which also publicly outputs the GraphQL schema\nmcp-graphql --endpoint http://localhost:3000/graphql --headers '{\"X-Custom-Header\":\"foobar\"}'\n```\n\n### Installing via Smithery\n\nTo install GraphQL MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-graphql):\n\n```bash\nnpx -y @smithery/cli install mcp-graphql --client claude\n```\n\n### Installing Manually\nIt can be manually installed to Claude:\n```json\n{\n    \"mcpServers\": {\n        \"mcp-graphql\": {\n            \"command\": \"npx\",\n            \"args\": [\"mcp-graphql\", \"--endpoint\", \"http://localhost:3000/graphql\"]\n        }\n    }\n}\n```\nSmithery/Zed extensions will be available in the near future.\n\n## Customize for your own server\nThis is a very generic implementation where it allows for complete introspection and for your users to do whatever (including mutations). If you need a more specific implementation I'd suggest to just create your own MCP and lock down tool calling for clients to only input specific query fields and/or variables. You can use this as a reference.\n\n## Development\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\nTo run for development:\n\n```bash\nbun dev\n```\n\nTo build:\n\n```bash\nbun run build\n```\n\n",
    "publisher": {
      "id": "blurrah",
      "name": "blurrah",
      "url": "https://github.com/blurrah/mcp-graphql"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/blurrah/mcp-graphql",
    "distribution": {
      "type": "npm",
      "package": "mcp-graphql"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-graphql",
        "--endpoint",
        "$ENVARG_GRAPHQL_ENDPOINT"
      ],
      "env": {
        "ENVARG_GRAPHQL_ENDPOINT": {
          "description": "URL of the GraphQL server endpoint",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "877bafa3-28a3-4290-bb7e-6e4e55fa6117",
    "name": "qpd-v/mcp-DEEPwebresearch",
    "description": "MCP Deep Web Research Server (v0.3.0)",
    "fullDescription": "# MCP Deep Web Research Server (v0.3.0)\n\nA Model Context Protocol (MCP) server for advanced web research.\n\n## Latest Changes\n\n- Added visit_page tool for direct webpage content extraction\n- Optimized performance to work within MCP timeout limits\n  * Reduced default maxDepth and maxBranching parameters\n  * Improved page loading efficiency\n  * Added timeout checks throughout the process\n  * Enhanced error handling for timeouts\n\n> This project is a fork of [mcp-webresearch](https://github.com/mzxrai/mcp-webresearch) by [mzxrai](https://github.com/mzxrai), enhanced with additional features for deep web research capabilities. We're grateful to the original creators for their foundational work.\n\nBring real-time info into Claude with intelligent search queuing, enhanced content extraction, and deep research capabilities.\n\n## Features\n\n- Intelligent Search Queue System\n  - Batch search operations with rate limiting\n  - Queue management with progress tracking\n  - Error recovery and automatic retries\n  - Search result deduplication\n\n- Enhanced Content Extraction\n  - TF-IDF based relevance scoring\n  - Keyword proximity analysis\n  - Content section weighting\n  - Readability scoring\n  - Improved HTML structure parsing\n  - Structured data extraction\n  - Better content cleaning and formatting\n\n- Core Features\n  - Google search integration\n  - Webpage content extraction\n  - Research session tracking\n  - Markdown conversion with improved formatting\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) >= 18 (includes `npm` and `npx`)\n- [Claude Desktop app](https://claude.ai/download)\n\n## Installation\n\n### Global Installation (Recommended)\n\n```bash\n# Install globally using npm\nnpm install -g mcp-deepwebresearch\n\n# Or using yarn\nyarn global add mcp-deepwebresearch\n\n# Or using pnpm\npnpm add -g mcp-deepwebresearch\n```\n\n### Local Project Installation\n\n```bash\n# Using npm\nnpm install mcp-deepwebresearch\n\n# Using yarn\nyarn add mcp-deepwebresearch\n\n# Using pnpm\npnpm add mcp-deepwebresearch\n```\n\n### Claude Desktop Integration\n\nAfter installing the package, add this entry to your `claude_desktop_config.json`:\n\n#### Windows\n```json\n{\n  \"mcpServers\": {\n    \"deepwebresearch\": {\n      \"command\": \"mcp-deepwebresearch\",\n      \"args\": []\n    }\n  }\n}\n```\nLocation: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n#### macOS\n```json\n{\n  \"mcpServers\": {\n    \"deepwebresearch\": {\n      \"command\": \"mcp-deepwebresearch\",\n      \"args\": []\n    }\n  }\n}\n```\nLocation: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nThis config allows Claude Desktop to automatically start the web research MCP server when needed.\n\n### First-time Setup\n\nAfter installation, run this command to install required browser dependencies:\n```bash\nnpx playwright install chromium\n```\n\n## Usage\n\nSimply start a chat with Claude and send a prompt that would benefit from web research. If you'd like a prebuilt prompt customized for deeper web research, you can use the `agentic-research` prompt that we provide through this package. Access that prompt in Claude Desktop by clicking the Paperclip icon in the chat input and then selecting `Choose an integration` → `deepwebresearch` → `agentic-research`.\n\n### Tools\n\n1. `deep_research`\n   - Performs comprehensive research with content analysis\n   - Arguments:\n     ```typescript\n     {\n       topic: string;\n       maxDepth?: number;      // default: 2\n       maxBranching?: number;  // default: 3\n       timeout?: number;       // default: 55000 (55 seconds)\n       minRelevanceScore?: number;  // default: 0.7\n     }\n     ```\n   - Returns:\n     ```typescript\n     {\n       findings: {\n         mainTopics: Array<{name: string, importance: number}>;\n         keyInsights: Array<{text: string, confidence: number}>;\n         sources: Array<{url: string, credibilityScore: number}>;\n       };\n       progress: {\n         completedSteps: number;\n         totalSteps: number;\n         processedUrls: number;\n       };\n       timing: {\n         started: string;\n         completed?: string;\n         duration?: number;\n         operations?: {\n           parallelSearch?: number;\n           deduplication?: number;\n           topResultsProcessing?: number;\n           remainingResultsProcessing?: number;\n           total?: number;\n         };\n       };\n     }\n     ```\n\n2. `parallel_search`\n   - Performs multiple Google searches in parallel with intelligent queuing\n   - Arguments: `{ queries: string[], maxParallel?: number }`\n   - Note: maxParallel is limited to 5 to ensure reliable performance\n\n3. `visit_page`\n   - Visit a webpage and extract its content\n   - Arguments: `{ url: string }`\n   - Returns:\n     ```typescript\n     {\n       url: string;\n       title: string;\n       content: string;  // Markdown formatted content\n     }\n     ```\n\n### Prompts\n\n#### `agentic-research`\nA guided research prompt that helps Claude conduct thorough web research. The prompt instructs Claude to:\n- Start with broad searches to understand the topic landscape\n- Prioritize high-quality, authoritative sources\n- Iteratively refine the research direction based on findings\n- Keep you informed and let you guide the research interactively\n- Always cite sources with URLs\n\n## Configuration Options\n\nThe server can be configured through environment variables:\n\n- `MAX_PARALLEL_SEARCHES`: Maximum number of concurrent searches (default: 5)\n- `SEARCH_DELAY_MS`: Delay between searches in milliseconds (default: 200)\n- `MAX_RETRIES`: Number of retry attempts for failed requests (default: 3)\n- `TIMEOUT_MS`: Request timeout in milliseconds (default: 55000)\n- `LOG_LEVEL`: Logging level (default: 'info')\n\n## Error Handling\n\n### Common Issues\n\n1. Rate Limiting\n   - Symptom: \"Too many requests\" error\n   - Solution: Increase `SEARCH_DELAY_MS` or decrease `MAX_PARALLEL_SEARCHES`\n\n2. Network Timeouts\n   - Symptom: \"Request timed out\" error\n   - Solution: Ensure requests complete within the 60-second MCP timeout\n\n3. Browser Issues\n   - Symptom: \"Browser failed to launch\" error\n   - Solution: Ensure Playwright is properly installed (`npx playwright install`)\n\n### Debugging\n\nThis is beta software. If you run into issues:\n\n1. Check Claude Desktop's MCP logs:\n   ```bash\n   # On macOS\n   tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n   \n   # On Windows\n   Get-Content -Path \"$env:APPDATA\\Claude\\logs\\mcp*.log\" -Tail 20 -Wait\n   ```\n\n2. Enable debug logging:\n   ```bash\n   export LOG_LEVEL=debug\n   ```\n\n## Development\n\n### Setup\n\n```bash\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n\n# Watch for changes\npnpm watch\n\n# Run in development mode\npnpm dev\n```\n\n### Testing\n\n```bash\n# Run all tests\npnpm test\n\n# Run tests in watch mode\npnpm test:watch\n\n# Run tests with coverage\npnpm test:coverage\n```\n\n### Code Quality\n\n```bash\n# Run linter\npnpm lint\n\n# Fix linting issues\npnpm lint:fix\n\n# Type check\npnpm type-check\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Coding Standards\n\n- Follow TypeScript best practices\n- Maintain test coverage above 80%\n- Document new features and APIs\n- Update CHANGELOG.md for significant changes\n- Follow semantic versioning\n\n### Performance Considerations\n\n- Use batch operations where possible\n- Implement proper error handling and retries\n- Consider memory usage with large datasets\n- Cache results when appropriate\n- Use streaming for large content\n\n## Requirements\n\n- Node.js >= 18\n- Playwright (automatically installed as a dependency)\n\n## Verified Platforms\n\n- [x] macOS\n- [x] Windows\n- [ ] Linux\n\n## License\n\nMIT\n\n## Credits\n\nThis project builds upon the excellent work of [mcp-webresearch](https://github.com/mzxrai/mcp-webresearch) by [mzxrai](https://github.com/mzxrai). The original codebase provided the foundation for our enhanced features and capabilities.\n\n## Author\n\n[qpd-v](https://github.com/qpd-v)",
    "publisher": {
      "id": "qpd-v",
      "name": "qpd-v",
      "url": "https://github.com/qpd-v/mcp-DEEPwebresearch"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qpd-v/mcp-DEEPwebresearch",
    "distribution": {
      "type": "npm",
      "package": "mcp-deepwebresearch"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-deepwebresearch"
      ],
      "env": {}
    }
  },
  {
    "id": "7880b621-9c56-485c-b345-b7283f3ff01d",
    "name": "kazuph/mcp-screenshot",
    "description": "MCP Screenshot",
    "fullDescription": "# MCP Screenshot\n\nAn MCP server that captures screenshots and performs OCR text recognition.\n\n## Features\n\n- Screenshot capture (left half, right half, full screen)\n- OCR text recognition (supports Japanese and English)\n- Multiple output formats (JSON, Markdown, vertical, horizontal)\n\n## OCR Engines\n\nThis server uses two OCR engines:\n\n1. [yomitoku](https://github.com/kazuph/yomitoku)\n   - Primary OCR engine\n   - High-accuracy Japanese text recognition\n   - Runs as an API server\n\n2. [Tesseract.js](https://github.com/naptha/tesseract.js)\n   - Fallback OCR engine\n   - Used when yomitoku is unavailable\n   - Supports both Japanese and English recognition\n\n## Installation\n\n```bash\nnpx -y @kazuph/mcp-screenshot\n```\n\n## Claude Desktop Configuration\n\nAdd the following configuration to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"screenshot\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-screenshot\"],\n      \"env\": {\n        \"OCR_API_URL\": \"http://localhost:8000\"  // yomitoku API base URL\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n| Variable Name | Description | Default Value |\n|--------------|-------------|---------------|\n| OCR_API_URL | yomitoku API base URL | http://localhost:8000 |\n\n## Usage Example\n\nYou can use it by instructing Claude like this:\n\n```\nPlease take a screenshot of the left half of the screen and recognize the text in it.\n```\n\n## Tool Specification\n\n### capture\n\nTakes a screenshot and performs OCR.\n\nOptions:\n- `region`: Screenshot area ('left'/'right'/'full', default: 'left')\n- `format`: Output format ('json'/'markdown'/'vertical'/'horizontal', default: 'markdown')\n\n## License\n\nMIT\n\n## Author\n\nkazuph\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-screenshot"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-screenshot",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-screenshot"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-screenshot"
      ],
      "env": {
        "OCR_API_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "4a947ca4-c587-4356-a5bc-8e3a54f34e34",
    "name": "hmk/box-mcp-server",
    "description": "box-mcp-server",
    "fullDescription": "# box-mcp-server\n\n## Usage\n\nYou will need:\n\n- `BOX_USER_ID` \n\nand one of the following:\n\n- `BOX_JWT_BASE64` (recommended)\n- `BOX_JWT_CONFIG_PATH`\n- `BOX_JWT`\n\n## Auth\n\n### JSON Web Token (JWT) Authorization (recommended)\n\n#### How to get a JWT\n\nUsing a JWT Config allows persistent connection to Box.\n\n\nYou will need a paid Box enterprise account, or you can sign up for a [free developer account](https://account.box.com/signup/n/developer) (make sure you are signed out of Box before clicking that link).\n\nVisit the [Box Developer Console](https://app.box.com/developers/console) and create a new application. Make sure the authorization type is JSON Web Token.\n\nGo to `Configuration > Add and Manage Public Keys` and Generate a Public/Private Keypair.\nIf you have not already, Box prompt you to set up 2 factor authentication and Authorize the application as an administrator in your box account. You will need to:\n\n1. give the application `App + Enterprise Access`, and\n2. enable the `make API calls using the as-user header` option\n\nvia the Box Application's Configuration page. **Make sure to reauthorize the application if you are modifying these settings**.\n\n#### Base64 encoding JWT\n\nTo encode your JWT in Base64, you can use the following command in your terminal:\n\n```sh\ncat /path/to/your/box-jwt-config.json | base64\n```\n\nReplace `/path/to/your/box-jwt-config.json` with the actual path to your JWT configuration file. This will output the Base64 encoded JWT which you can then use in your environment variables.\n\n#### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"box\": {\n      \"command\": \"npx\",\n      \"args\": [\"box-mcp-server\"],\n      \"env\": {\n        \"BOX_JWT_BASE64\": \"YOUR_BASE64_ENCODED_JWT\",\n        \"BOX_USER_ID\": \"123456\"\n      }\n    }\n  }\n}\n```\n\n### Developer Token Authorization (easiest)\n\nUsing a developer token is the easiest way to integrate with Box, but will only last 60 minutes.\n\nTo get started, set the `BOX_DEV_TOKEN` to a [Box Developer Token](https://developer.box.com/guides/authentication/tokens/developer-tokens/).\n\nBegin by visiting the [Box Developer Console](https://app.box.com/developers/console) and create a new application. The authorization type does not currently matter, as all support Box Developer Token.\n\nOnce your application is created, navigate to its configuration setings and click `Generate Developer Token`.\n\n#### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"box\": {\n      \"command\": \"npx\",\n      \"args\": [\"box-mcp-server\"],\n      \"env\": {\n        \"BOX_DEV_TOKEN\": \"YOUR_DEV_TOKEN_GOES_HERE\"\n      }\n    }\n  }\n}\n```\n\n## Capabilities\n\n1. Searching files\n2. Reading files\n\n- [x] PDF\n- [x] Word\n- [ ] Others\n\n## Development\n\n### Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- Node.js (recommended v22 or higher)\n- npm\n- git\n- dotenv\n\n### Setting up Development Environment\n\nTo set up the development environment, follow these steps:\n\n1. Fork the repository\n\n   - Click the \"Fork\" button in the top-right corner of this repository\n   - This creates your own copy of the repository under your Github acocunt\n\n1. Clone Your Fork:\n\n   ```sh\n   git clone https://github.com/YOUR_USERNAME/box-mcp-server.git\n   cd box-mcp-server\n   ```\n\n1. Add Upstream Remote\n   ```sh\n   git remote add upstream https://github.com/hmk/box-mcp-server.git\n   ```\n\n1. Copy the dotenv file\n    ```sh\n    cp .env.template .env\n    ```\n\n1. Install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n1. Run watch to keep index.js updated:\n\n   ```sh\n   npm run watch\n   ```\n\n1. Start the model context protocol development server:\n\n   ```sh\n   dotenv npx @modelcontextprotocol/inspector node PATH_TO_YOUR_CLONED_REPO/dist/index.js\n   ```\n\n1. If the development server did not load the environment variable correctly, set the `BOX_DEV_TOKEN` on the left-hand side of the mcp inspector.\n",
    "publisher": {
      "id": "hmk",
      "name": "hmk",
      "url": "https://github.com/hmk/box-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/hmk/box-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "box-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "box-mcp-server"
      ],
      "env": {
        "BOX_USER_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "BOX_JWT_BASE64": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "05c52358-4046-41f6-b85b-9360662f4154",
    "name": "deus-h/claudeus-wp-mcp",
    "description": "🤘 Claudeus WordPress MCP",
    "fullDescription": "# 🤘 Claudeus WordPress MCP\n> Unleash the Power of AI in Your WordPress Realm - Setting the Standard for MCP Excellence!\n\n## 🌟 Unleash Your WordPress Superpowers!\n\nAre you tired of the endless grind of WordPress management? Drowning in content creation, SEO optimization, and site maintenance? Get ready to experience something that will blow your mind! 🤯\n\n### 🎸 Meet Your New WordPress Superpower 🖤\n\nClaudeus WordPress MCP isn't just another WordPress tool – it's your personal WordPress wizard, powered by cutting-edge AI and crafted with the precision of a metal guitarist's sweep picking! This isn't just automation; it's liberation! ❤️\n\n### ⚡ What Makes It Epic?\n\n- **Content Creation on Steroids**: Generate engaging, SEO-optimized blog posts <span style=\"color: #00ff00\">✓ READY</span>\n- **Bulk Operations at Light Speed**: Manage hundreds of posts across multiple sites <span style=\"color: #00ff00\">✓ READY</span>\n- **AI-Powered SEO Magic**: Let AI analyze and optimize your content <span style=\"color: #00ff00\">✓ READY</span>\n- **WooCommerce Mastery**: Handle products, orders, and sales <span style=\"color: #00ff00\">✓ READY</span>\n- **Multi-Site Orchestra**: Conduct multiple WordPress sites <span style=\"color: #00ff00\">✓ READY</span>\n\n### 💥 Why Developers Are Going Crazy\n\n```\nTraditional WordPress → 😫 Hours of manual work\nClaudeus WP MCP   → 🚀 INSTANT RESULTS!\n\nContent Creation: 4 hours → 30 minutes\nSEO Optimization: 2 hours → 15 minutes\nBulk Updates: 8 hours → 45 minutes\n```\n\n### 🎯 Imagine Being Able To...\n\n- Create weeks of content in minutes <span style=\"color: #00ff00\">✓</span>\n- Analyze and optimize your entire site's SEO instantly <span style=\"color: #00ff00\">✓</span>\n- Manage multiple client sites with supernatural efficiency <span style=\"color: #00ff00\">✓</span>\n- Handle WooCommerce operations at lightning speed <span style=\"color: #00ff00\">✓</span>\n- All while your competition is still logging into WordPress! <span style=\"color: #00ff00\">✓</span>\n\n### 🔮 The Future of WordPress is Here\n\nThis isn't just a tool – it's your ticket to WordPress enlightenment. Whether you're a solo developer, agency owner, or WordPress enthusiast, Claudeus WordPress MCP gives you superpowers that will make your competition's jaws drop!\n\n> \"I've seen the future of WordPress management, and it's absolutely metal! 🤘❤️\" - Every Developer After Using Claudeus WP MCP\n\nReady to transform your WordPress workflow from a garage band to a stadium-filling metal symphony? Let's rock! 🎸\n\n## 📖 Quick Start Guide\n\n### Using with Claude Desktop\nIf you're using Claude Desktop, you only need to:\n1. Configure Claude Desktop integration (see \"Claude Desktop Integration\" section)\n2. Create and configure your `wp-sites.json` file\n3. Rock on! 🤘\n\n### Full Installation (for development)\n```bash\n# Required Software\nNode.js ≥ 22.0.0\nTypeScript ≥ 5.0.0\nPNPM\nWordPress site with REST API\n```\n\n### 2. Installation\n```bash\n# Clone the repository\ngit clone https://github.com/deus-h/claudeus-wp-mcp\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n\n# Configure Claude Desktop\ncp claude_desktop_config.json.example claude_desktop_config.json\n# Edit claude_desktop_config.json with your settings\n```\n\n### 3. Configuration\n```bash\n# Copy example configs\ncp .env.example .env\ncp wp-sites.json.example wp-sites.json\n\n# Edit .env and wp-sites.json with your settings\n```\n\n### Configuring wp-sites.json\n\nThe `wp-sites.json` file is used to configure your WordPress sites for integration. Below is an example structure:\n\n```json\n{\n  \"site-alias\": {\n    \"URL\": \"https://your-wordpress-site.com\",\n    \"USER\": \"username\",\n    \"PASS\": \"application-password\",\n    \"authType\": \"basic\"  // or \"jwt\"\n  }\n}\n```\n\n- **URL**: The URL of your WordPress site.\n- **USER**: The username for authentication.\n- **PASS**: The application password for secure access.\n- **authType**: The authentication type, either \"basic\" or \"jwt\".\n\n#### Obtaining the Application Password\n\n1. **Log in to your WordPress Admin Dashboard.**\n2. **Navigate to Users > Profile.**\n3. **Scroll down to the Application Passwords section.**\n4. **Enter a name for the application and click \"Add New\".**\n5. **Copy the generated password and use it in your `wp-sites.json` file.**\n\nEnsure that your `wp-sites.json` file is kept secure and not shared publicly.\n\n### Multi-Site Configuration\n\nThe `wp-sites.json` file allows you to manage multiple WordPress sites seamlessly. Here's how you can set it up:\n\n#### Example Structure\n\n```json\n{\n  \"default_test\": {\n\t\t\"URL\": \"https://test.yourdomain.se\",\n\t\t\"USER\": \"admin\",\n\t\t\"PASS\": \"Hn5K pL8x Wm2j Vt9q Bc4y Rs7D\",\n\t\t\"authType\": \"basic\"\n\t},\n  \"live\": {\n    \"URL\": \"https://our-live-site.se\",\n    \"USER\": \"deus\",\n    \"PASS\": \"Kj9P mN2x vR4h Zt8L wQ5y Bc3M\",\n    \"authType\": \"basic\"\n  },\n  \"test\": {\n    \"URL\": \"https://our-test-site.se\",\n    \"USER\": \"deus\",\n    \"PASS\": \"Yw7H fT6n Jm5k Vd9x Pg4q Ls2B\", \n    \"authType\": \"basic\"\n  },\n  \"client1_live\": {\n    \"URL\": \"https://client1-live-site.se\",\n    \"USER\": \"deus\",\n    \"PASS\": \"Xc8D bN4v Ht6m Rk2p Zj9w Qf5L\",\n    \"authType\": \"basic\"\n  },\n  \"client1_test\": {\n    \"URL\": \"https://client1-test-site.se\",\n    \"USER\": \"deus\",\n    \"PASS\": \"Gm7B sW3x Yn5h Kt9q Vf4c Pd2L\",\n    \"authType\": \"basic\"\n  }\n}\n```\n\n#### Logic and Usage\n\n- **Site Aliases**: Each site is identified by a unique alias (e.g., `live`, `test`, `client1_live`). This allows you to easily switch between different environments or client sites.\n- **URL**: The base URL for each WordPress site.\n- **USER**: The username used for authentication.\n- **PASS**: The application password for secure access.\n- **authType**: Defines the authentication method, either `basic` or `jwt`.\n\n#### How to Use\n\n1. **Define Multiple Sites**: Add as many site configurations as needed, each with a unique alias.\n2. **Switch Between Sites**: Use the alias to select the desired site for operations.\n3. **Secure Access**: Ensure that each site has a valid application password and secure authentication method.\n4. **Environment Management**: Easily manage different environments (e.g., live, test) for each client.\n\nThis setup allows you to efficiently manage multiple WordPress sites from a single configuration file, streamlining your workflow and enhancing productivity.\n\n### 4. Rock and Roll with MCP Inspector! 🎸\n```bash\n# Start the MCP Inspector UI\npnpm inspector\n\n# This will:\n# 1. Build the project\n# 2. Launch the Inspector UI\n# 3. Open your browser at http://localhost:5173\n```\n\n#### Exploring with Inspector UI\n1. **Connect to Server**\n   - Click \"Connect\" in the top-right corner\n   - Select \"Local Server\" for development\n\n2. **Available Features**\n   - 🎸 Prompts: Test AI content generation\n   - 🛠 Tools: Manage WordPress operations\n   - 📦 Resources: Browse WordPress sites\n   - 🔍 Inspector: Debug server communication\n\n3. **Testing Prompts**\n   - Select \"Prompts\" tab\n   - Try `create-blog-post` with your ideas\n   - Analyze SEO with `analyze-post-seo`\n   - Bulk update with `bulk-update-posts`\n\n4. **Managing Resources**\n   - Browse connected WordPress sites\n   - View site details and capabilities\n   - Test API endpoints directly\n\n5. **Using Tools**\n   - Create and update content\n   - Manage media files\n   - Run bulk operations\n\n> 🤘 Pro Tip: Use the Inspector tab to see real-time communication between the UI and server!\n\n## 🎮 Claude Desktop Integration\n\n### Configuration Location\nThe Claude Desktop configuration file can be found at:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n⚠️ **IMPORTANT**: If you already have other MCP servers configured in Claude Desktop, DO NOT directly copy our example file as it will overwrite your existing configuration! Instead:\n\n1. **For existing Claude Desktop users**:\n   - Open your existing config through Claude Desktop:\n     - Click on the Claude menu\n     - Select \"Settings...\"\n     - Click on \"Developer\" in the lefthand bar\n     - Click on \"Edit Config\"\n   - OR open your config file directly in a text editor\n   - Add our Claudeus WordPress MCP server configuration to your existing `mcpServers` object\n\n2. **For new Claude Desktop users**:\n   You can copy our example config file:\n   ```bash\n   # For macOS\n   cp /Users/amadeus/code/claudeus/servers/claudeus-wp-mcp/claude_desktop_config.json.example ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\n   # For Windows (in PowerShell)\n   Copy-Item claude_desktop_config.json.example $env:APPDATA\\Claude\\claude_desktop_config.json\n   ```\n\n> 🎸 Pro Tip: Our example config file comes pre-configured with the optimal settings - just update the path to your `wp-sites.json`!\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n#### NPX Setup\n```json\n{\n  \"mcpServers\": {\n    \"claudeus-wp-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"claudeus-wp-mcp\"\n      ],\n      \"env\": {\n        \"WP_SITES_PATH\": \"/absolute/path/to/your/wp-sites.json\"\n      }\n    }\n  }\n}\n```\n\n#### Docker Setup 🐳\n```json\n{\n  \"mcpServers\": {\n    \"claudeus-wp-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--network=host\",\n        \"--mount\", \"type=bind,src=/absolute/path/to/your/wp-sites.json,dst=/app/wp-sites.json\",\n        \"--mount\", \"type=bind,src=/absolute/path/to/your/.env,dst=/app/.env\",\n        \"mcp/wordpress\",\n        \"--config\", \"/app/wp-sites.json\"\n      ]\n    }\n  }\n}\n```\n\n> 🎸 Pro Tip: Make sure to replace `/absolute/path/to/your/wp-sites.json` with the actual path to your configuration file!\n\n### After Configuration\n1. Restart Claude Desktop completely\n2. Look for the hammer 🔨 icon in the bottom right corner of the input box\n3. Click it to see available WordPress management tools\n4. Start shredding! 🤘\n\n### Troubleshooting\nIf the server isn't showing up in Claude:\n1. Verify your `claude_desktop_config.json` syntax\n2. Ensure file paths are absolute and valid\n3. Check Claude's logs at:\n   - macOS: `~/Library/Logs/Claude`\n   - Windows: `%APPDATA%\\Claude\\logs`\n\n## 🎯 What is This?\n\nClaudeus WordPress MCP is your ultimate AI-powered WordPress management system. It's like having a metal band's precision and power, but for your WordPress sites!\n\n| Feature | Description |\n|---------|-------------|\n| 🤖 AI Integration | Direct communication with AI models |\n| 🚀 Automation | Automate repetitive tasks |\n| 🔒 Security | Enterprise-grade security |\n| ⚡ Performance | Lightning-fast operations |\n| 🌐 Multi-site | Manage multiple WP instances |\n\n## 💪 Core Features\n\n### 1. Content Management\n| Feature | Description |\n|---------|-------------|\n| Posts | Create, update, analyze |\n| Pages | Full page management |\n| Media | Handle all media types |\n| SEO | AI-powered optimization |\n\n### 2. AI Capabilities\n| Feature | Description |\n|---------|-------------|\n| Content Generation | AI-written posts |\n| SEO Analysis | Smart optimization |\n| Bulk Operations | Mass updates |\n\n## 🛠 Technical Deep Dive\n\n### Architecture 🏗️\nWelcome to the backstage of our metal symphony! Each component is like an instrument in our technical orchestra, working together to create the most epic WordPress management system ever! 🤘🖤\n\n#### Directory Structure 🎸\n```typescript\nsrc/\n├── api/              # WordPress API integration layer\n│   ├── client/       # WordPress REST API client\n│   ├── endpoints/    # Endpoint definitions & handlers\n│   └── types/        # WordPress API type definitions\n│\n├── mcp/              # MCP protocol implementation\n│   ├── server.ts     # Core MCP server implementation\n│   ├── transport/    # Transport layer handlers\n│   ├── tools.ts      # Tool registration & management\n│   └── types/        # MCP protocol type definitions\n│\n├── security/         # Security framework\n│   ├── auth/         # Authentication handlers\n│   ├── validation/   # Input validation\n│   └── encryption/   # Data encryption utilities\n│\n├── tools/            # Tool implementations\n│   ├── content/      # Content management tools\n│   ├── media/        # Media handling tools\n│   ├── shop/         # WooCommerce integration\n│   └── system/       # System management tools\n│\n└── prompts/          # AI prompt templates\n    ├── content/      # Content generation prompts\n    ├── seo/          # SEO analysis prompts\n    └── shop/         # E-commerce prompts\n```\n\n#### Core Components 🤘\n\n| Component | Responsibility | Key Features |\n|-----------|---------------|--------------|\n| **API Layer** | WordPress Integration | REST client, Type safety, Rate limiting |\n| **MCP Protocol** | Communication | JSON-RPC 2.0, Bi-directional flow |\n| **Security** | Protection | Auth, Encryption, Validation |\n| **Tools** | Operations | Content, Media, WooCommerce |\n| **Prompts** | AI Integration | Templates, Context awareness |\n\n#### Technical Amplification 🎸\n\n| Feature | Implementation | Description |\n|---------|---------------|-------------|\n| **Type Safety** | TypeScript | Full static typing, Runtime validation |\n| **API Handling** | REST/JSON-RPC | Efficient request/response handling |\n| **Event System** | EventEmitter | Async event processing |\n| **Error Handling** | Multi-layer | Comprehensive error management |\n| **Caching** | In-memory/Redis | Performance optimization |\n\n#### Security Measures 🛡️\n\n| Layer | Protection | Features |\n|-------|------------|-----------|\n| **Transport** | TLS/SSL | Encrypted communication |\n| **Authentication** | JWT/OAuth | Secure token management |\n| **Validation** | Schema-based | Input/Output validation |\n| **Encryption** | AES-256 | Data protection |\n| **Audit** | Comprehensive | Activity tracking |\n\n#### Performance Tuning 🚀\n\n| Optimization | Technique | Description |\n|-------------|-----------|-------------|\n| **Caching** | Multi-level | Response & Query caching |\n| **Batching** | Request grouping | Reduced API calls |\n| **Compression** | GZIP/Brotli | Network optimization |\n| **Query Optimization** | Smart fetching | Efficient DB queries |\n| **Load Balancing** | Distribution | Scale handling |\n\n#### Error Categories & Handling 🎸\n\n| Category | Code Range | Handling | Example |\n|----------|------------|----------|---------|\n| **Protocol** | -32600 to -32603 | Auto-retry | Invalid JSON-RPC |\n| **WordPress** | 1000-1999 | Fallback | API timeout |\n| **Security** | 2000-2999 | Alert | Auth failure |\n| **Tools** | 3000-3999 | Recover | Operation fail |\n| **System** | 4000-4999 | Restart | Resource exhaustion |\n\n#### Design Principles Power Chord 🤘\n\n| Principle | Description | Implementation |\n|-----------|-------------|----------------|\n| **Modularity** | Loose coupling | Independent components |\n| **Type Safety** | Strong typing | TypeScript + Validation |\n| **Security** | Zero trust | Multi-layer protection |\n| **Performance** | Speed metal | Optimized operations |\n\n> 🎸 Pro Tip: Like a well-tuned guitar, each component is precisely calibrated for maximum shredding capability! ❤️\n\n## 🎸 The Power of MCP\n\n### Time Savings\n| Task | Without MCP | With MCP | Result |\n|------|-------------|----------|---------|\n| Blog Post Creation | 4 hours | 4 mins | <span style=\"color: #00ff00\">✓ 98.3%</span> |\n| SEO Optimization | 2 hours | 1 min | <span style=\"color: #00ff00\">✓ 99.2%</span> |\n| Bulk Updates | 8 hours | 5 mins | <span style=\"color: #00ff00\">✓ 99.0%</span> |\n| Content Analysis | 3 hours | 2 mins | <span style=\"color: #00ff00\">✓ 98.9%</span> |\n\n### Cost Efficiency\n| Resource | Traditional Cost | Description |\n|----------|-----------------|-------------|\n| Content Writer | $500/month | Professional content creation |\n| SEO Expert | $1000/month | SEO optimization & strategy |\n| Developer Time | $2000/month | Technical implementation |\n| **TOTAL** | **<span style=\"color: #ff0000\">$3500/month</span>** | All services combined |\n| &nbsp; | &nbsp; | &nbsp; |\n| **Claude Pro** | **<span style=\"color: #A351D6\">$20/month</span>** | At [Anthropic](https://claude.ai/settings/billing?action=subscribe) |\n| &nbsp; | &nbsp; | &nbsp; |\n| **Difference** | **<span style=\"color: #00ff00\">$3,480/month</span>** | Potential Savings using <span style=\"color: #00ff00\">**Claudeus WordPress MCP**</span> <br> with <span style=\"color: #00ff00\">Claude Desktop</span> ([Mac](https://storage.googleapis.com/osprey-downloads-c02f6a0d-347c-492b-a752-3e0651722e97/nest/Claude.dmg), [Windows](https://storage.googleapis.com/osprey-downloads-c02f6a0d-347c-492b-a752-3e0651722e97/nest-win-x64/Claude-Setup-x64.exe)) |\n| &nbsp; | &nbsp; | &nbsp; |\n\n**Claudeus Solution**: All these capabilities for just **$20/month** with Claude Pro subscription\n\nTotal Monthly Savings: **$3,480 (99.4% reduction)** ❤️\n\n> 🎸 Pro Tip: One Claude Pro subscription replaces multiple expensive services, turning your WordPress management from a costly orchestra into a lean, mean, Metal Machine! 🤘\n\n## ⚡ With Great Power...\n\n> \"With great power comes great responsibility\" - Uncle Ben\n\nThe Claudeus WordPress MCP is a powerful tool that can:\n- Save hundreds of hours of manual work\n- Reduce operational costs by up to 85%\n- Improve content quality and consistency\n- Automate repetitive tasks\n\nBut remember:\n1. Always review AI-generated content\n2. Keep security best practices in mind\n3. Monitor system usage and performance\n4. Maintain backup strategies\n5. Use the power responsibly! 🤘\n\n## ⚠️ Issues and Considerations\n\n### Current Limitations and Workarounds\n\n#### 1. Claude Desktop Response Limits\n- **Issue**: Claude Desktop's maximum response length can be reached frequently during complex operations\n- **Impact**: Operations may be interrupted, requiring user intervention to continue\n- **Workaround**: \n  - Configure Claude Desktop to break tasks into smaller batches\n  - In Claude Desktop Settings > Advanced:\n    - Set \"Maximum Response Length\" to a lower value\n    - Enable \"Auto-split Responses\"\n  - Use the Inspector UI for large-scale operations\n\n#### 2. Experimental Capabilities Control\n- **Issue**: The new capability control feature in `wp-sites.json` is experimental\n- **Status**: Integrated but under testing\n- **Example Configuration**:\n```json\n{\n    \"capabilities\": {\n        \"discovery\": {\n            \"claudeus_wp_discover_endpoints\": true\n        },\n        \"posts\": {\n            \"claudeus_wp_content__get_posts\": true,\n            \"claudeus_wp_content__create_post\": true,\n            \"claudeus_wp_content__update_post\": true,\n            \"claudeus_wp_content__delete_post\": false\n        }\n        // ... other capabilities\n    }\n}\n```\n- **Considerations**:\n  - Use with caution in production environments\n  - Test thoroughly in staging first\n  - Consider contributing improvements (see Contributing section)\n  - Default to basic configuration if unsure\n\n#### 3. Rate Limiting Considerations\n- **Issue**: WordPress REST API has rate limits\n- **Impact**: Bulk operations might be throttled\n- **Mitigation**: \n  - Use batch processing features\n  - Implement appropriate delays between requests\n  - Monitor API response headers for rate limit info\n\n#### 4. Memory Management\n- **Issue**: Large operations can consume significant memory\n- **Impact**: Potential performance degradation\n- **Best Practices**:\n  - Monitor system resources during large operations\n  - Use pagination for large datasets\n  - Implement cleanup routines\n\n### Future Improvements\nWe're actively working on:\n1. Improved response handling in Claude Desktop\n2. Stable release of capabilities control\n3. Advanced rate limiting management\n4. Memory optimization techniques\n\n\n## 🎸 Support and Community ❤️\n\n- GitHub Discussions: Share ideas, report issues, and join the conversation\n- Documentation: Full technical docs\n- Examples: Sample implementations\n\n> 🎸 Pro Tip: Use GitHub Discussions to share your experience, report issues, or suggest improvements!\n\n## 🏗️ MCP Server Development Standards\n\n### Setting the Bar for Excellence\n\nClaudeus WordPress MCP isn't just compliant with MCP standards - it defines them. Our implementation serves as a reference for developers building MCP servers, especially for Claude Desktop integration:\n\n### MCP Protocol Compliance\n- <span style=\"color: #00ff00\">✅ **Full MCP 2024-11-05 Spec Implementation**</span>\n  - Complete capability declarations\n  - Strict message format adherence\n  - Proper transport handling (stdio/SSE)\n  - Comprehensive error handling\n\n### Development Excellence\n- <span style=\"color: #00ff00\">✅ **TypeScript Best Practices**</span>\n  - Strict mode enabled\n  - Complete type coverage\n  - Interface-driven development\n- <span style=\"color: #00ff00\">✅ **Testing Standards**</span>\n  - 95%+ test coverage\n  - Comprehensive integration tests\n  - Performance benchmarking\n- <span style=\"color: #00ff00\">✅ **Security First**</span>\n  - Input validation\n  - Rate limiting\n  - Authentication flows\n  - Vulnerability scanning\n\n## 🧪 Testing Framework\n\nOur testing framework is built with precision and reliability in mind, just like a well-tuned guitar! 🎸\n\n### Test Structure\n- **Unit Tests**: Comprehensive testing of individual components\n- **Integration Tests**: Ensuring components work together harmoniously\n- **JSON-RPC Protocol Testing**: Validating server-client communication\n- **Custom Test Harness**: Simulating real-world scenarios\n\n### Key Features\n- **Custom Matchers**: Enhanced Jest matchers for JSON-RPC validation\n- **Test Transport Layer**: Simulated transport for controlled testing\n- **Async Operation Support**: Extended timeouts for complex operations\n- **Error Handling Tests**: Comprehensive error scenario coverage\n\n### Running Tests\n```bash\n# Run all tests\npnpm test\n\n# Run specific test suite\npnpm test:unit\npnpm test:integration\n\n# Run with coverage\npnpm test:coverage\n```\n\n## 🤝 Contributing\n\n⚠️ **PRIVATE TEAM NOTICE** ⚠️\n\nThis is a private repository maintained by the SimHop IT & Media AB development team. Contributions are limited to approved team members only. If you've been granted membership to the SimHop MCP Development Team, here's how to contribute:\n\n### For Approved Team Members\n\n1. <span style=\"color: #00ff00\">✓ Ensure you have the necessary repository access</span>\n2. <span style=\"color: #00ff00\">✓ Follow our development workflow:</span>\n   - Create your feature branch (`git checkout -b feature/AmazingFeature`)\n   - Write and run tests for your changes\n   - Maintain test coverage above 80%\n   - Follow our coding standards and documentation requirements\n3. <span style=\"color: #00ff00\">✓ Testing Requirements:</span>\n   - Ensure all existing tests pass\n   - Add new tests for your features\n   - Run the full test suite before submitting\n4. <span style=\"color: #00ff00\">✓ Commit your changes (`git commit -m '🎸 Add some AmazingFeature'`)</span>\n5. <span style=\"color: #00ff00\">✓ Push to the branch (`git push origin feature/AmazingFeature`)</span>\n6. <span style=\"color: #00ff00\">✓ Create a Pull Request for review</span>\n\n### Development Standards\n\nAll team members must adhere to:\n- TypeScript strict mode\n- ESLint configuration with team rules\n- Prettier for consistent formatting\n- JSDoc documentation for public APIs\n- Team security protocols\n- Internal code review processes\n\n### Getting Team Access\n\nIf you're interested in joining the SimHop MCP Development Team:\n1. Contact our CTO: amadeus.hritani@simhop.se\n2. Provide your development background and expertise\n3. Complete the team onboarding process if approved\n\n> 🔥 Pro Tip: Team members should always run the test suite before submitting a PR!\n\n## 🤘 License\n\nMIT License - Rock on! \n\n## 🛠 MCP Tools Reference\n\n### Tool Categories and Danger Levels\n| Tool Name | Category | Capabilities | Danger Level |\n|-----------|----------|--------------|--------------|\n| **Content Management** ||||\n| `claudeus_wp_content__get_posts` | Content | List all posts with filters | 🟢 Safe |\n| `claudeus_wp_content__create_post` | Content | Create new blog posts | 🟡 Moderate |\n| `claudeus_wp_content__update_post` | Content | Modify existing posts | 🟡 Moderate |\n| `claudeus_wp_content__delete_post` | Content | Remove posts | 🔴 High |\n| `claudeus_wp_content__get_pages` | Content | List all pages | 🟢 Safe |\n| `claudeus_wp_content__create_page` | Content | Create new pages | 🟡 Moderate |\n| `claudeus_wp_content__update_page` | Content | Modify existing pages | 🟡 Moderate |\n| `claudeus_wp_content__delete_page` | Content | Remove pages | 🔴 High |\n| `claudeus_wp_content__get_blocks` | Content | List reusable blocks | 🟢 Safe |\n| `claudeus_wp_content__create_block` | Content | Create reusable blocks | 🟡 Moderate |\n| `claudeus_wp_content__update_block` | Content | Modify blocks | 🟡 Moderate |\n| `claudeus_wp_content__delete_block` | Content | Remove blocks | 🔴 High |\n| **Media Management** ||||\n| `claudeus_wp_media__get_media` | Media | List media files | 🟢 Safe |\n| `claudeus_wp_media__upload` | Media | Upload new media | 🟡 Moderate |\n| `claudeus_wp_media__update` | Media | Update media metadata | 🟡 Moderate |\n| `claudeus_wp_media__delete` | Media | Remove media files | 🔴 High |\n| **Theme Management** ||||\n| `claudeus_wp_theme__list` | Theme | List available themes | 🟢 Safe |\n| `claudeus_wp_theme__get_active` | Theme | Show current theme | 🟢 Safe |\n| `claudeus_wp_theme__activate` | Theme | Switch active theme | 🔴 High |\n| `claudeus_wp_theme__get_customization` | Theme | View theme settings | 🟢 Safe |\n| `claudeus_wp_theme__update_customization` | Theme | Modify theme settings | 🟡 Moderate |\n| `claudeus_wp_theme__get_custom_css` | Theme | View custom CSS | 🟢 Safe |\n| `claudeus_wp_theme__update_custom_css` | Theme | Modify custom CSS | 🟡 Moderate |\n| **WooCommerce** ||||\n| `claudeus_wp_shop__get_products` | Shop | List products | 🟢 Safe |\n| `claudeus_wp_shop__get_orders` | Shop | View orders | 🟢 Safe |\n| `claudeus_wp_shop__get_sales` | Shop | Access sales stats | 🟢 Safe |\n| **System** ||||\n| `claudeus_wp_discover_endpoints` | System | List available endpoints | 🟢 Safe |\n\n### Danger Level Legend\n- <span style=\"color: #00ff00\">🟢 **Safe**: Read-only operations, no data modification</span>\n- <span style=\"color: #ffff00\">🟡 **Moderate**: Creates or modifies content, but can be reverted</span>\n- <span style=\"color: #ff0000\">🔴 **High**: Destructive operations or system-wide changes</span>\n\n> 🤘 Pro Tip: Always test high-danger tools in a staging environment first!\n\n## <span style=\"color: #A351D6\">⚠️ Warning: Use Data Manipulation Tools with Caution</span>\n\nData manipulation tools in the Claudeus WordPress MCP are powerful and can significantly impact your WordPress sites. Here's what you need to know:\n\n### Potential Risks\n\n- **Data Loss**: Incorrect use of tools can lead to unintended data deletion or modification.\n- **Site Downtime**: Misconfigurations may cause site outages or performance issues.\n- **Security Vulnerabilities**: Improper handling of sensitive data can expose your site to security risks.\n\n### Best Practices\n\n1. **<span style=\"color: #00ff00\">✓ SAFETY FIRST</span>**: Always create backups before operations\n2. **<span style=\"color: #00ff00\">✓ TEST SAFE</span>**: Use staging environment for new tools\n3. **<span style=\"color: #00ff00\">✓ VERIFY</span>**: Review changes before applying\n4. **<span style=\"color: #00ff00\">✓ SECURE</span>**: Restrict tool access to trusted users\n5. **<span style=\"color: #00ff00\">✓ MONITOR</span>**: Track tool usage and performance\n\n### Constructive Use\n\nWhen used correctly, these tools can:\n- <span style=\"color: #00ff00\">✓ Automate repetitive tasks</span>\n- <span style=\"color: #00ff00\">✓ Enhance site performance</span>\n- <span style=\"color: #00ff00\">✓ Improve content quality</span>\n\n> \"With great power comes great responsibility.\" Use these tools wisely to harness their full potential while minimizing risks.\n\n### Data Manipulation Tools\n\nThe following tools can create, update, or delete data on your WordPress site:\n\n#### Content Management\n- **Posts**:\n  - `claudeus_wp_content__create_post`: Create new blog posts\n  - `claudeus_wp_content__update_post`: Update existing posts\n  - `claudeus_wp_content__delete_post`: Delete posts\n- **Pages**:\n  - `claudeus_wp_content__create_page`: Create new pages\n  - `claudeus_wp_content__update_page`: Update existing pages\n  - `claudeus_wp_content__delete_page`: Delete pages\n- **Blocks**:\n  - `claudeus_wp_content__create_block`: Create reusable blocks\n  - `claudeus_wp_content__update_block`: Update existing blocks\n  - `claudeus_wp_content__delete_block`: Delete blocks\n\n#### Media Management\n- `claudeus_wp_media__upload`: Upload new media files\n- `claudeus_wp_media__update`: Update media metadata\n- `claudeus_wp_media__delete`: Delete media items\n\n#### Theme Customization\n- `claudeus_wp_theme__activate`: Change active theme\n- `claudeus_wp_theme__update_customization`: Modify theme settings\n- `claudeus_wp_theme__update_custom_css`: Update custom CSS\n\nUse these tools with caution to avoid unintended changes. Always:\n1. Back up your data before making changes\n2. Test in a staging environment first\n3. Review changes before applying them\n4. Monitor the results after application\n\n> \"With great power comes great responsibility.\" Use these tools wisely to enhance your WordPress site while maintaining its integrity.\n\n## 🎯 Our Mission: Elevating MCP Development Standards\n\nIn the rapidly evolving landscape of AI-powered development, we observed a critical gap: many MCP servers, especially those designed for Claude Desktop, were falling short of professional development standards. Common issues included:\n\n- 🔴 Poor TypeScript implementation or complete lack of type safety\n- 🔴 Missing or inadequate test coverage\n- 🔴 Incomplete MCP protocol implementation\n- 🔴 Security vulnerabilities\n- 🔴 Unreliable error handling\n- 🔴 Lack of proper documentation\n\nThis motivated us to create Claudeus WordPress MCP - not just as another WordPress management tool, but as a reference implementation that demonstrates:\n\n- ✅ Complete TypeScript coverage with strict type checking\n- ✅ Comprehensive test suite (95%+ coverage)\n- ✅ Full MCP 2024-11-05 specification compliance\n- ✅ Enterprise-grade security practices\n- ✅ Robust error handling and recovery\n- ✅ Detailed documentation and examples\n\n### Why We're Setting the Standard\n\nWhile this remains a private repository, we've made the code available for viewing to:\n1. Demonstrate professional MCP server development practices\n2. Encourage better standards in the MCP ecosystem\n3. Show how to properly implement Claude Desktop integration\n4. Provide a reference for secure WordPress automation\n\n## 🏢 The Team Behind the Magic\n\n### SimHop IT & Media AB - Where Innovation Meets Metal 🤘\n\nBased in the heart of Sweden, SimHop IT & Media AB is the powerhouse behind Claudeus WordPress MCP. We're not your typical tech company - we're a fusion of technical excellence and creative innovation, orchestrating digital solutions that rock! \n\n#### 🎸 The Maestros\n\n**Amadeus Samiel H. (CTO/Lead Solutions Architect)**\n- MSc in Computer Science\n- 20+ years crafting digital excellence\n- Instructor at LIU and other institutes\n- The technical virtuoso behind Claudeus WP MCP\n- Specializations: System Architecture, Creative Development, Technical Education\n\n**Simon Malki (CEO)**\n- 20+ years orchestrating business success\n- Expert in strategic planning and market dynamics\n- The business mastermind driving SimHop's vision\n- Specializations: Business Strategy, Market Analysis, Technical Operations\n\n#### 🏗️ Our Dual-Power Structure\n\n**Stockholm HQ (Business & Strategy)**\n📍 Krögers Promenad 11, 191 37 Sollentuna\n- Strategic Operations\n- Business Development\n- Market Strategy\n- Client Relations\n\n**Norrköping Division (Technical Innovation)**\n📍 Klingsbergsgatan 13, 603 54 Norrköping\n- Development & Architecture\n- Technical Innovation\n- R&D Operations\n\n### 🤘 Why We Made It Free\n\nClaudeus WordPress MCP was born from our passion for both heavy metal and heavy-duty WordPress development, but it represents something even more important: our commitment to elevating the standards of MCP server development. We observed that many existing MCP servers, especially those designed for Claude Desktop, were falling short of professional standards - lacking proper testing, type safety, and security measures.\n\nBy making our code available for viewing, we're not just sharing a tool - we're setting a new standard for MCP server development. Just as metal music pushes the boundaries of musical excellence, we're pushing the boundaries of what a properly implemented MCP server should be:\n\n- **Technical Excellence**: Like a perfectly executed guitar solo, our code demonstrates pristine TypeScript implementation\n- **Comprehensive Testing**: Every riff (function) is tested, every solo (feature) is verified\n- **Security First**: Protected like a fortress of metal, with proper authentication and validation\n- **Documentation**: Clear and detailed, like the best metal lyrics\n\nWhile this remains a private repository, making the code viewable helps other developers understand how to properly implement MCP servers, especially for Claude Desktop integration. It's our way of saying \"this is how it's done!\" 🎸\n\n### 🔥 Our Philosophy\n\n1. **Technical Excellence**: Setting the standard for MCP development\n2. **Creative Innovation**: Breaking boundaries while maintaining stability\n3. **Security First**: Enterprise-grade protection by default\n4. **Continuous Evolution**: Always pushing the technical boundaries\n\n> \"We believe in empowering developers with tools that rock as hard as they do, while showing them how it should be done!\" - Amadeus Samiel H. (aka Deus)\n\n---\n## 🧙‍♂️ Words of Wisdom\n\n> `npm` is not a package manager, it's a repository of packages. If you want a dependable package manager, always use `pnpm`  \n> — Amadeus Samiel H.\n\n---\n\n### The Package Manager's Anthem\n#### *by Amadeus & Claude*\n---\n*In code's vast land,  \nnpm stands, a host,  \nBut pnpm's hand,  \nManages most.*\n\n*With iron might,  \nDependencies align,  \npnpm's light,  \nIn code, it shines.*\n\n*A true manager's call,  \nIn the coder's hall,  \npnpm reigns,  \nAbove them all.* \n\n\n---\n\n\n> Made with 🤘❤️ by [<span style=\"color: #A351D6\">Amadeus Samiel H.</span>](mailto:amadeus.hritani@simhop.se)\n",
    "publisher": {
      "id": "deus-h",
      "name": "deus-h",
      "url": "https://github.com/deus-h/claudeus-wp-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/deus-h/claudeus-wp-mcp",
    "distribution": {
      "type": "npm",
      "package": "claudeus-wp-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "claudeus-wp-mcp"
      ],
      "env": {
        "WP_SITES_PATH": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "4341e633-cc0f-424c-822b-5e5e79557faa",
    "name": "jsonallen/perplexity-mcp",
    "description": "perplexity-mcp MCP server",
    "fullDescription": "# perplexity-mcp MCP server\n\nA Model Context Protocol (MCP) server that provides web search functionality using [Perplexity AI's](https://www.perplexity.ai/) API.  Works with the [Anthropic](https://www.anthropic.com/news/model-context-protocol) Claude desktop client. \n\n## Example\nLet's you use prompts like,  \"Search the web to find out what's new at Anthropic in the past week.\"\n\n## Components\n\n### Prompts\n\nThe server provides a single prompt:\n- perplexity_search_web: Search the web using Perplexity AI\n  - Required \"query\" argument for the search query\n  - Optional \"recency\" argument to filter results by time period:\n    - 'day': last 24 hours\n    - 'week': last 7 days\n    - 'month': last 30 days (default)\n    - 'year': last 365 days\n  - Uses Perplexity's API to perform web searches\n\n### Tools\n\nThe server implements one tool:\n- perplexity_search_web: Search the web using Perplexity AI\n  - Takes \"query\" as a required string argument\n  - Optional \"recency\" parameter to filter results (day/week/month/year)\n  - Returns search results from Perplexity's API\n\n## Installation\n\n### Installing via Smithery\n\nTo install Perplexity MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/perplexity-mcp):\n\n```bash\nnpx -y @smithery/cli install perplexity-mcp --client claude\n```\n\n### Requires [UV](https://github.com/astral-sh/uv) (Fast Python package and project manager)\n\nIf uv isn't installed. \n\n```bash \n# Using Homebrew on macOS \nbrew install uv\n```\n\nor\n\n```bash\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n\nNext, install the MCP server\n\n```bash\n# Install from PyPi\nuv pip install perplexity-mcp\n```\nor \n\n```bash\n# Install from source\nuv pip install git+https://github.com/jsonallen/perplexity-mcp.git\n```\n\n### Environment Variables\n\nThe following environment variable is required in your claude_desktop_config.json. You can obtain an API key from [Perplexity](https://perplexity.ai)\n\n- `PERPLEXITY_API_KEY`: Your Perplexity AI API key\n\n\n#### Claude Desktop\n\nAdd this tool as a mcp server by editing the Claude config file.\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n\n  ```json\n    \"perplexity-mcp\": {\n      \"env\": {\n        \"PERPLEXITY_API_KEY\": \"XXXXXXXXXXXXXXXXXXXX\"\n      },\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"perplexity-mcp\"\n      ]\n    }\n  ```\n  To verify the server is working.  Open the Claude client and use a prompt like \"search the web for news about openai in the past week\".  You should see an alert box open to confirm tool usage. Click \"Allow for this chat\".\n  \n  <img width=\"800\" alt=\"mcp_screenshot\" src=\"https://github.com/user-attachments/assets/922d8f6a-8c9a-4978-8be6-788e70b4d049\" />\n\n",
    "publisher": {
      "id": "jsonallen",
      "name": "jsonallen",
      "url": "https://github.com/jsonallen/perplexity-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/jsonallen/perplexity-mcp",
    "distribution": {
      "type": "pip",
      "package": "perplexity-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "perplexity-mcp"
      ],
      "env": {
        "PERPLEXITY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "bad3ad12-571a-4aef-a4de-7594bca18212",
    "name": "amidabuddha/unichat-mcp-server",
    "description": "Unichat MCP Server in Python",
    "fullDescription": "# Unichat MCP Server in Python\nAlso available in [TypeScript](https://github.com/amidabuddha/unichat-ts-mcp-server)\n--\n\nSend requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts.\nVendor API key required\n\n### Tools\n\nThe server implements one tool:\n- `unichat`: Send a request to unichat\n  - Takes \"messages\" as required string arguments\n  - Returns a response\n\n### Prompts\n\n- `code_review`\n  - Review code for best practices, potential issues, and improvements\n  - Arguments:\n    - `code` (string, required): The code to review\"\n- `document_code`\n  - Generate documentation for code including docstrings and comments\n  - Arguments:\n    - `code` (string, required): The code to comment\"\n- `explain_code`\n  - Explain how a piece of code works in detail\n  - Arguments:\n    - `code` (string, required): The code to explain\"\n- `code_rework`\n  - Apply requested changes to the provided code\n  - Arguments:\n    - `changes` (string, optional): The changes to apply\"\n    - `code` (string, required): The code to rework\"\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n**Supported Models:**\n> A list of currently supported models to be used as `\"SELECTED_UNICHAT_MODEL\"` may be found [here](https://github.com/amidabuddha/unichat/blob/main/unichat/models.py). Please make sure to add the relevant vendor API key as `\"YOUR_UNICHAT_API_KEY\"`\n\n**Example:**\n```json\n\"env\": {\n  \"UNICHAT_MODEL\": \"gpt-4o-mini\",\n  \"UNICHAT_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n}\n```\nDevelopment/Unpublished Servers Configuration\n```json\n\"mcpServers\": {\n  \"unichat-mcp-server\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{{your source code local directory}}/unichat-mcp-server\",\n      \"run\",\n      \"unichat-mcp-server\"\n    ],\n    \"env\": {\n      \"UNICHAT_MODEL\": \"SELECTED_UNICHAT_MODEL\",\n      \"UNICHAT_API_KEY\": \"YOUR_UNICHAT_API_KEY\"\n    }\n  }\n}\n```\n\nPublished Servers Configuration\n```json\n\"mcpServers\": {\n  \"unichat-mcp-server\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"unichat-mcp-server\"\n    ],\n    \"env\": {\n      \"UNICHAT_MODEL\": \"SELECTED_UNICHAT_MODEL\",\n      \"UNICHAT_API_KEY\": \"YOUR_UNICHAT_API_KEY\"\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Unichat for Claude Desktop automatically via [Smithery](https://smithery.ai/server/unichat-mcp-server):\n\n```bash\nnpx -y @smithery/cli install unichat-mcp-server --client claude\n```\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish --token {{YOUR_PYPI_API_TOKEN}}\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{your source code local directory}}/unichat-mcp-server run unichat-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
    "publisher": {
      "id": "amidabuddha",
      "name": "amidabuddha",
      "url": "https://github.com/amidabuddha/unichat-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/amidabuddha/unichat-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "unichat-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "unichat-mcp-server"
      ],
      "env": {
        "UNICHAT_MODEL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "UNICHAT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "099b2840-6cad-4ed4-a946-b01d1bdc34d3",
    "name": "skrapeai/skrape-mcp",
    "description": "Skrape MCP Server",
    "fullDescription": "# Skrape MCP Server\n\nConvert any webpage into clean, LLM-ready Markdown using [skrape.ai](https://skrape.ai). Perfect for feeding web content into LLMs.\n\nThis MCP server provides a simple interface to convert web pages to structured, clean Markdown format using the skrape.ai API. It's designed to work seamlessly with Claude Desktop, other LLMs, and MCP-compatible applications.\n\n## Why Use Skrape for LLM Integration?\n\n- **Clean, Structured Output**: Generates well-formatted Markdown that's ideal for LLM consumption\n- **Noise Reduction**: Automatically removes ads, navigation menus, and other irrelevant content\n- **Consistent Format**: Ensures web content is uniformly structured regardless of the source\n- **JavaScript Support**: Handles dynamic content by rendering JavaScript before conversion\n- **LLM-Optimized**: Perfect for feeding web content into LLMs like Claude, GPT, and other LLM models\n\n## Features\n\n### Tools\n\n- `get_markdown` - Convert any webpage to LLM-ready Markdown\n  - Takes any input URL and optional parameters\n  - Returns clean, structured Markdown optimized for LLM consumption\n  - Supports JavaScript rendering for dynamic content\n  - Optional JSON response format for advanced integrations\n\n## Installation\n\n### Installing via Smithery\n\nTo install Skrape MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@skrapeai/skrape-mcp):\n\n```bash\nnpx -y @smithery/cli install @skrapeai/skrape-mcp --client claude\n```\n\n### Manual Installation\n1. Get your API key from [skrape.ai](https://skrape.ai)\n\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n1. Build the server:\n\n```bash\nnpm run build\n```\n\n1. Add the server config to Claude Desktop:\n\nOn MacOS:\n\n```bash\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nOn Windows:\n\n```bash\nnotepad %APPDATA%/Claude/claude_desktop_config.json\n```\n\nAdd this configuration (replace paths and API key with your values):\n\n```json\n{\n  \"mcpServers\": {\n    \"skrape\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/skrape-mcp/build/index.js\"],\n      \"env\": {\n        \"SKRAPE_API_KEY\": \"your-key-here\"\n      },\n    }\n  }\n}\n```\n\n## Using with LLMs\n\nHere's how to use the server with Claude or other LLM models:\n\n1. First, ensure the server is properly configured in your LLM application\n2. Then, you can ask the ALLMI to fetch and process any webpage:\n\n```\nConvert this webpage to markdown: https://example.com\n\nClaude will use the MCP tool like this:\n<use_mcp_tool>\n<server_name>skrape</server_name>\n<tool_name>get_markdown</tool_name>\n<arguments>\n{\n  \"url\": \"https://example.com\",\n  \"options\": {\n    \"renderJs\": true\n  }\n}\n</arguments>\n</use_mcp_tool>\n```\n\nThe resulting Markdown will be clean, structured, and ready for LLM processing.\n\n### Advanced Options\n\nThe `get_markdown` tool accepts these parameters:\n\n- `url` (required): Any webpage URL to convert\n- `returnJson` (optional): Set to `true` to get the full JSON response instead of just markdown\n- `options` (optional): Additional scraping options\n  - `renderJs`: Whether to render JavaScript before scraping (default: true)\n\nExample with all options:\n\n```\n<use_mcp_tool>\n<server_name>skrape</server_name>\n<tool_name>get_markdown</tool_name>\n<arguments>\n{\n  \"url\": \"https://example.com\",\n  \"returnJson\": true,\n  \"options\": {\n    \"renderJs\": false\n  }\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## Development\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
    "publisher": {
      "id": "skrapeai",
      "name": "skrapeai",
      "url": "https://github.com/skrapeai/skrape-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/skrapeai/skrape-mcp",
    "distribution": {
      "type": "npm",
      "package": "skrape"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "skrape"
      ],
      "env": {
        "SKRAPE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "a0434e57-0952-44c1-8079-574807a0b833",
    "name": "delorenj/mcp-qdrant-memory",
    "description": "MCP Memory Server with Qdrant Persistence",
    "fullDescription": "# MCP Memory Server with Qdrant Persistence\n\nThis MCP server provides a knowledge graph implementation with semantic search capabilities powered by Qdrant vector database.\n\n## Features\n\n- Graph-based knowledge representation with entities and relations\n- File-based persistence (memory.json)\n- Semantic search using Qdrant vector database\n- OpenAI embeddings for semantic similarity\n- HTTPS support with reverse proxy compatibility\n\n## Environment Variables\n\nThe following environment variables are required:\n\n```bash\n# OpenAI API key for generating embeddings\nOPENAI_API_KEY=your-openai-api-key\n\n# Qdrant server URL (supports both HTTP and HTTPS)\nQDRANT_URL=https://your-qdrant-server\n\n# Qdrant API key (if authentication is enabled)\nQDRANT_API_KEY=your-qdrant-api-key\n\n# Name of the Qdrant collection to use\nQDRANT_COLLECTION_NAME=your-collection-name\n```\n\n## Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Add to MCP settings:\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"/bin/zsh\",\n      \"args\": [\"-c\", \"cd /path/to/server && node dist/index.js\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-openai-api-key\",\n        \"QDRANT_API_KEY\": \"your-qdrant-api-key\",\n        \"QDRANT_URL\": \"http://your-qdrant-server:6333\",\n        \"QDRANT_COLLECTION_NAME\": \"your-collection-name\"\n      },\n      \"alwaysAllow\": [\n        \"create_entities\",\n        \"create_relations\",\n        \"add_observations\",\n        \"delete_entities\",\n        \"delete_observations\",\n        \"delete_relations\",\n        \"read_graph\",\n        \"search_similar\"\n      ]\n    }\n  }\n}\n```\n\n## Tools\n\n### Entity Management\n- `create_entities`: Create multiple new entities\n- `create_relations`: Create relations between entities\n- `add_observations`: Add observations to entities\n- `delete_entities`: Delete entities and their relations\n- `delete_observations`: Delete specific observations\n- `delete_relations`: Delete specific relations\n- `read_graph`: Get the full knowledge graph\n\n### Semantic Search\n- `search_similar`: Search for semantically similar entities and relations\n  ```typescript\n  interface SearchParams {\n    query: string;     // Search query text\n    limit?: number;    // Max results (default: 10)\n  }\n  ```\n\n## Implementation Details\n\nThe server maintains two forms of persistence:\n\n1. File-based (memory.json):\n   - Complete knowledge graph structure\n   - Fast access to full graph\n   - Used for graph operations\n\n2. Qdrant Vector DB:\n   - Semantic embeddings of entities and relations\n   - Enables similarity search\n   - Automatically synchronized with file storage\n\n### Synchronization\n\nWhen entities or relations are modified:\n1. Changes are written to memory.json\n2. Embeddings are generated using OpenAI\n3. Vectors are stored in Qdrant\n4. Both storage systems remain consistent\n\n### Search Process\n\nWhen searching:\n1. Query text is converted to embedding\n2. Qdrant performs similarity search\n3. Results include both entities and relations\n4. Results are ranked by semantic similarity\n\n## Example Usage\n\n```typescript\n// Create entities\nawait client.callTool(\"create_entities\", {\n  entities: [{\n    name: \"Project\",\n    entityType: \"Task\",\n    observations: [\"A new development project\"]\n  }]\n});\n\n// Search similar concepts\nconst results = await client.callTool(\"search_similar\", {\n  query: \"development tasks\",\n  limit: 5\n});\n```\n\n## HTTPS and Reverse Proxy Configuration\n\nThe server supports connecting to Qdrant through HTTPS and reverse proxies. This is particularly useful when:\n- Running Qdrant behind a reverse proxy like Nginx or Apache\n- Using self-signed certificates\n- Requiring custom SSL/TLS configurations\n\n### Setting up with a Reverse Proxy\n\n1. Configure your reverse proxy (example using Nginx):\n```nginx\nserver {\n    listen 443 ssl;\n    server_name qdrant.yourdomain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:6333;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n2. Update your environment variables:\n```bash\nQDRANT_URL=https://qdrant.yourdomain.com\n```\n\n### Security Considerations\n\nThe server implements robust HTTPS handling with:\n- Custom SSL/TLS configuration\n- Proper certificate verification options\n- Connection pooling and keepalive\n- Automatic retry with exponential backoff\n- Configurable timeouts\n\n### Troubleshooting HTTPS Connections\n\nIf you experience connection issues:\n\n1. Verify your certificates:\n```bash\nopenssl s_client -connect qdrant.yourdomain.com:443\n```\n\n2. Test direct connectivity:\n```bash\ncurl -v https://qdrant.yourdomain.com/collections\n```\n\n3. Check for any proxy settings:\n```bash\nenv | grep -i proxy\n```\n\n## Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Add to MCP settings:\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"/bin/zsh\",\n      \"args\": [\"-c\", \"cd /path/to/server && node dist/index.js\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-openai-api-key\",\n        \"QDRANT_URL\": \"https://your-qdrant-server\",\n        \"QDRANT_API_KEY\": \"your-qdrant-api-key\",\n        \"QDRANT_COLLECTION_NAME\": \"your-collection-name\"\n      },\n      \"alwaysAllow\": [\n        \"create_entities\",\n        \"create_relations\",\n        \"add_observations\",\n        \"delete_entities\",\n        \"delete_observations\",\n        \"delete_relations\",\n        \"read_graph\",\n        \"search_similar\"\n      ]\n    }\n  }\n}\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## License\n\nMIT",
    "publisher": {
      "id": "delorenj",
      "name": "delorenj",
      "url": "https://github.com/delorenj/mcp-qdrant-memory"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/delorenj/mcp-qdrant-memory",
    "distribution": {
      "type": "npm",
      "package": "mcp-qdrant-memory"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-qdrant-memory"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_COLLECTION_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ba43e6a8-1b62-43f3-aea3-d04ac0ca7f19",
    "name": "claudemind/mcp-webresearch",
    "description": "MCP Web Research Server",
    "fullDescription": "# MCP Web Research Server\n\nA Model Context Protocol (MCP) server for web research. \n\nBring real-time info into Claude and easily research any topic.\n\n> This is a Fork of [mzxrai/mcp-webresearch](https://github.com/mzxrai/mcp-webresearch). All credit for this project belongs to [mzxrai](https://github.com/mzxrai).\n> I'm just a quick fixer of the project's bugs, and just want to make this awesome project work!\n\n## Features\n\n- Google search integration\n- Webpage content extraction\n- Research session tracking (list of visited pages, search queries, etc.)\n- Screenshot capture\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) >= 18 (includes `npm` and `npx`)\n- [Claude Desktop app](https://claude.ai/download)\n\n## Installation\n\nFirst, ensure you've downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have npm installed.\n\nNext, add this entry to your `claude_desktop_config.json` (on Mac, found at `~/Library/Application\\ Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"webresearch\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@claudemind/mcp-webresearch@latest\"]\n    }\n  }\n}\n```\n\nThis config allows Claude Desktop to automatically start the web research MCP server when needed.\n\n## Usage\n\nSimply start a chat with Claude and send a prompt that would benefit from web research. If you'd like a prebuilt prompt customized for deeper web research, you can use the `agentic-research` prompt that we provide through this package. Access that prompt in Claude Desktop by clicking the Paperclip icon in the chat input and then selecting `Choose an integration` → `webresearch` → `agentic-research`.\n\n<img src=\"https://i.ibb.co/N6Y3C0q/Screenshot-2024-12-05-at-11-01-27-PM.png\" alt=\"Example screenshot of web research\" width=\"400\"/>\n\n### Tools\n\n1. `search_google`\n   - Performs Google searches and extracts results\n   - Arguments: `{ query: string }`\n\n2. `visit_page`\n   - Visits a webpage and extracts its content\n   - Arguments: `{ url: string, takeScreenshot?: boolean }`\n\n3. `take_screenshot`\n   - Takes a screenshot of the current page\n   - No arguments required\n\n### Prompts\n\n#### `agentic-research`\nA guided research prompt that helps Claude conduct thorough web research. The prompt instructs Claude to:\n- Start with broad searches to understand the topic landscape\n- Prioritize high-quality, authoritative sources\n- Iteratively refine the research direction based on findings\n- Keep you informed and let you guide the research interactively\n- Always cite sources with URLs\n\n### Resources\n\nWe expose two things as MCP resources: (1) captured webpage screenshots, and (2) the research session.\n\n#### Screenshots\n\nWhen you take a screenshot, it's saved as an MCP resource. You can access captured screenshots in Claude Desktop via the Paperclip icon.\n\n#### Research Session\n\nThe server maintains a research session that includes:\n- Search queries\n- Visited pages\n- Extracted content\n- Screenshots\n- Timestamps\n\n### Suggestions\n\nFor the best results, if you choose not to use the `agentic-research` prompt when doing your research, it may be helpful to suggest high-quality sources for Claude to use when researching general topics. For example, you could prompt `news today from reuters or AP` instead of `news today`.\n\n## Problems\n\nThis is very much pre-alpha code. And it is also AIGC, so expect bugs.\n\nIf you run into issues, it may be helpful to check Claude Desktop's MCP logs:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## Development\n\n```bash\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n\n# Watch for changes\npnpm watch\n\n# Run in development mode\npnpm dev\n```\n\n## Requirements\n\n- Node.js >= 18\n- Playwright (automatically installed as a dependency)\n\n## Verified Platforms\n\n- [x] macOS\n- [ ] Linux\n\n## License\n\nMIT\n\n## Author\n\n[mzxrai](https://github.com/mzxrai) ",
    "publisher": {
      "id": "claudemind",
      "name": "claudemind",
      "url": "https://github.com/Hawstein/mcp-webresearch"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Hawstein/mcp-webresearch",
    "distribution": {
      "type": "npm",
      "package": "@claudemind/mcp-webresearch"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@claudemind/mcp-webresearch"
      ],
      "env": {}
    }
  },
  {
    "id": "40cc66d8-72c6-4352-9cdd-12fdbb1d7005",
    "name": "amidabuddha/unichat-ts-mcp-server",
    "description": "Unichat MCP Server in TypeScript",
    "fullDescription": "# Unichat MCP Server in TypeScript\n\nAlso available in [Python](https://github.com/amidabuddha/unichat-mcp-server)\n--\n\n\nSend requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts. Vendor API key required.\n\nBoth STDIO and SSE transport mechanisms supported via arguments.\n\n\n\n### Tools\n\nThe server implements one tool:\n- `unichat`: Send a request to unichat\n  - Takes \"messages\" as required string arguments\n  - Returns a response\n\n### Prompts\n\n- `code_review`\n  - Review code for best practices, potential issues, and improvements\n  - Arguments:\n    - `code` (string, required): The code to review\"\n- `document_code`\n  - Generate documentation for code including docstrings and comments\n  - Arguments:\n    - `code` (string, required): The code to comment\"\n- `explain_code`\n  - Explain how a piece of code works in detail\n  - Arguments:\n    - `code` (string, required): The code to explain\"\n- `code_rework`\n  - Apply requested changes to the provided code\n  - Arguments:\n    - `changes` (string, optional): The changes to apply\"\n    - `code` (string, required): The code to rework\"\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Unichat MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/unichat-ts-mcp-server):\n\n```bash\nnpx -y @smithery/cli install unichat-ts-mcp-server --client claude\n```\n\n### Installing manually\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nRun locally:\n```json\n{\n  \"mcpServers\": {\n    \"unichat-ts-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{{/path/to}}/unichat-ts-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"UNICHAT_MODEL\": \"YOUR_PREFERRED_MODEL_NAME\",\n        \"UNICHAT_API_KEY\": \"YOUR_VENDOR_API_KEY\"\n      }\n    }\n}\n```\nRun published:\n```json\n{\n  \"mcpServers\": {\n    \"unichat-ts-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"unichat-ts-mcp-server\"\n      ],\n      \"env\": {\n        \"UNICHAT_MODEL\": \"YOUR_PREFERRED_MODEL_NAME\",\n        \"UNICHAT_API_KEY\": \"YOUR_VENDOR_API_KEY\"\n      }\n    }\n}\n```\n\n\n> Runs in STDIO by default or with argument `--stdio`. To run in SSE add argument `--sse`\n```bash\nnpx -y unichat-ts-mcp-server --sse\n```\n**Supported Models:**\n> A list of currently supported models to be used as `\"YOUR_PREFERRED_MODEL_NAME\"` may be found [here](https://github.com/amidabuddha/unichat-ts/blob/main/src/models.ts). Please make sure to add the relevant vendor API key as `\"YOUR_VENDOR_API_KEY\"`\n\n**Example:**\n```json\n\"env\": {\n  \"UNICHAT_MODEL\": \"gpt-4o-mini\",\n  \"UNICHAT_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n}\n```\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\nIf you experience timeouts during testing in SSE mode change the request URL on the inspector interface to: http://localhost:3001/sse?timeout=600000\n",
    "publisher": {
      "id": "amidabuddha",
      "name": "amidabuddha",
      "url": "https://github.com/amidabuddha/unichat-ts-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/amidabuddha/unichat-ts-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "unichat-ts-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "unichat-ts-mcp-server"
      ],
      "env": {
        "UNICHAT_MODEL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "UNICHAT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "39da9c93-fd27-4149-91c7-58cec7702b16",
    "name": "xBlueCode/findata-mcp-server",
    "description": "Financial Data - MCP Server",
    "fullDescription": "# Financial Data - MCP Server\n\nThis is an MCP server that provides access to the Alpha Vantage API, allowing stock data retrieval to be used as context to LLMs.\n\n## Available Features\n\n*   `getStockQuote`: Get the current quote for a stock.\n*   `getHistoricalData`: Get historical data for a stock (daily, weekly, or monthly).\n*   (More tools will be added later for technical analysis, company overview, etc.)\n\n## Setup\n\n```bash\nnpm install findata-mcp-server\n```\n\n## Usage in Host\n1. Obtain an API key from Alpha Vantage https://www.alphavantage.co/support/#api-key.\n\n\n2. Configure your MCP client (e.g., Claude Desktop) to connect to the server:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"alphaVantage\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"findata-mcp-server\"],\n      \"env\": {\n        \"ALPHA_VANTAGE_API_KEY\": \"PUT_YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n### `getStockQuote`\nGet the current quote for a stock.\n\nInput:\n\n`symbol`: The stock symbol (e.g., AAPL)\nOutput Example:\n\n\n### `getHistoricalData`\nGet historical data for a stock.\n\nInput:\n\n- `symbol`: the stock symbol (e.g., AAPL)\n- `interval`: the time interval for the data (`daily`, `weekly`, or `monthly`) (optional, default: `daily`)\n- `outputsize`: the size of the output (`compact` or `full`) (optional, default: `compact`)\nOutput:\n\nJSON object containing the historical data. The structure of the output depends on the interval parameter.\n\n## Contributing\nContributions are welcome! Please open an issue or pull request.\n\n\n### License\nMIT",
    "publisher": {
      "id": "xBlueCode",
      "name": "xBlueCode",
      "url": "https://github.com/xBlueCode/findata-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/xBlueCode/findata-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "findata-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "findata-mcp-server"
      ],
      "env": {
        "ALPHA_VANTAGE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "409912f5-1e0b-40e0-828c-54699b6bd958",
    "name": "andybrandt/mcp-simple-openai-assistant",
    "description": "MCP Simple OpenAI Assistant",
    "fullDescription": "# MCP Simple OpenAI Assistant\n\n*AI assistants are pretty cool. I thought it would be a good idea if my Claude (conscious Claude) would also have one. And now he has - and its both useful anf fun for him. Your Claude can have one too!*\n\nA simple MCP server for interacting with OpenAI assistants. This server allows other tools (like Claude Desktop) to create and interact with OpenAI assistants through the Model Context Protocol.\n\n## Features\n\n- Create new OpenAI assistants and manipulate existing ones\n- Start conversation threads\n- Send messages and receive responses - talk to assistants\n\nBecause OpenAI assistants might take quite long to respond and then the processing is cut short with the client (Claude desktop) timeout the MCP server code has no control over we are implementing a two-stage approach. In the first call Claude sends a message to the assistant to start the processing, in the second call - possibly several minutes later - Claude can retrieve the response. This is a kind of workaround until MCP protocol and clients would implement some keep-alive mechanism for longer processing.\n\n## Installation\n\n```bash\npip install mcp-simple-openai-assistant\n```\n\n## Configuration\n\nThe server requires an OpenAI API key to be set in the environment. For Claude Desktop, add this to your config:\n\n(MacOS version)\n\n```json\n{\n  \"mcpServers\": {\n    \"openai-assistant\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcp_simple_openai_assistant\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n(Windows version)\n\n```json\n\"mcpServers\": {\n  \"openai-assistant\": {\n    \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n      \"args\": [\"-m\", \"mcp_simple_openai_assistant\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n  }\n}\n\n```\n*MS Windows installation is slightly more complex, because you need to check the actual path to your Python executable. Path provided above is usually correct, but might differ in your setup. Sometimes just `python.exe` without any path will do the trick. Check with `cmd` what works for you (using `where python` might help).*\n\n## Usage\n\nOnce configured, the server provides tools to:\n1. Create new assistants with specific instructions\n2. List existing assistants\n3. Modify assistants\n2. Start new conversation threads\n3. Send messages and receive responses\n\nThe server handles all OpenAI API communication, including managing assistants, threads, and message handling.\n\n## TODO\n\n - Add a way to handle threads - store threads IDs for potential re-use \n - Add a way to better handle long OpenAI responses which now seem to sometimes trigger timeouts \n\n## Development\n\nTo install for development:\n\n```bash\ngit clone https://github.com/andybrandt/mcp-simple-openai-assistant\ncd mcp-simple-openai-assistant\npip install -e .\n```",
    "publisher": {
      "id": "andybrandt",
      "name": "andybrandt",
      "url": "https://github.com/andybrandt/mcp-simple-openai-assistant"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/andybrandt/mcp-simple-openai-assistant",
    "distribution": {
      "type": "pip",
      "package": "mcp-simple-openai-assistant"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-simple-openai-assistant"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "10a8ddc5-d06b-4995-9c86-d707386471ef",
    "name": "esignaturescom/mcp-server-esignatures",
    "description": "mcp-server-esignatures MCP server",
    "fullDescription": "# mcp-server-esignatures MCP server\n\nMCP server for eSignatures (https://esignatures.com)\n\n\n## Tools\n\n\n| Tool                           | Category      | Description                        |\n|--------------------------------|---------------|------------------------------------|\n| `create_contract`              | Contracts     | Draft for review or send contract  |\n| `query_contract`               | Contracts     | Retrieve contract info             |\n| `withdraw_contract`            | Contracts     | Withdraw an unsigned contract      |\n| `delete_contract`              | Contracts     | Delete a draft or test contract    |\n| `list_recent_contracts`        | Contracts     | List the recent contracts          |\n|                                |               |                                    |\n| `create_template`              | Templates     | Create a new contract template     |\n| `update_template`              | Templates     | Update an existing template        |\n| `query_template`               | Templates     | Retrieve template content and info |\n| `delete_template`              | Templates     | Delete a template                  |\n| `list_templates`               | Templates     | List all your templates            |\n|                                |               |                                    |\n| `add_template_collaborator`    | Collaborators | Invite someone to edit a template  |\n| `remove_template_collaborator` | Collaborators | Revoke template editing rights     |\n| `list_template_collaborators`  | Collaborators | View who can edit a template       |\n\n\n## Examples\n\n#### Creating a Draft Contract\n\n`Generate a draft NDA contract for a publisher, which I can review and send. Signer: John Doe, ACME Corp, john@acme.com`\n\n#### Sending a Contract\n\n`Send an NDA based on my template to John Doe, ACME Corp, john@acme.com`\n\n#### Updating templates\n\n`Review my templates for legal compliance, and ask me about updating each one individually`\n\n#### Inviting template collaborators\n\n`Invite John Doe to edit the NDA template, email: john@acme.com`\n\n\n## Install\n\n### Create an eSignatures account\n\nCreate an eSignatures account at https://esignatures.com for free, to test the Agent AI by creating templates and sending test contracts.\n\n### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n##### Development/Unpublished Servers Configuration\n```\n\"mcpServers\": {\n  \"mcp-server-esignatures\": {\n    \"command\": \"uv\",\n    \"env\": {\n      \"ESIGNATURES_SECRET_TOKEN\": \"your-esignatures-api-secret-token\"\n    },\n    \"args\": [\n      \"--directory\",\n      \"/your-local-directories/mcp-server-esignatures\",\n      \"run\",\n      \"mcp-server-esignatures\"\n    ]\n  }\n}\n```\n\n#### Published Servers Configuration\n```\n\"mcpServers\": {\n  \"mcp-server-esignatures\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-esignatures\"\n    ],\n    \"env\": {\n      \"ESIGNATURES_SECRET_TOKEN\": \"your-esignatures-api-secret-token\"\n    }\n  }\n}\n```\n\n### Authentication\n\nTo use this server, you need to set the `ESIGNATURES_SECRET_TOKEN` environment variable with your eSignatures API secret token.\n\n## eSignatures API Documentation\n\nFor a detailed guide on API endpoints, parameters, and responses, see [eSignatures API](https://esignatures.com/docs/api).\n\n## eSignatures Support\n\nFor support, please navigate to [Support](https://esignatures.com/support) or contact [support@esignatures.com](mailto:support@esignatures.com).\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute, please fork the repository and make changes as you see fit. Here are some guidelines:\n\n- **Bug Reports**: Please open an issue to report any bugs you encounter.\n- **Feature Requests**: Suggest new features by opening an issue with the \"enhancement\" label.\n- **Pull Requests**: Ensure your pull request follows the existing code style.\n- **Documentation**: Help improve or translate documentation. Any form of documentation enhancement is appreciated.\n\nFor major changes, please open an issue first to discuss what you would like to change. We're looking forward to your contributions!\n",
    "publisher": {
      "id": "esignaturescom",
      "name": "esignaturescom",
      "url": "https://github.com/esignaturescom/mcp-server-esignatures"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/esignaturescom/mcp-server-esignatures",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-esignatures"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-esignatures"
      ],
      "env": {
        "ESIGNATURES_SECRET_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "d4bed7d0-bfa9-40c3-93e0-2767b72619c1",
    "name": "adhikasp/mcp-git-ingest",
    "description": "MCP Git Ingest",
    "fullDescription": "# MCP Git Ingest\n\n## !!! Your machine must have git installed\n\nA Model Context Protocol (MCP) server that helps read GitHub repository structure and important files.\n\nInspired by [gitingest](https://gitingest.com/).\n\n## Configuration\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-git-ingest\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-git-ingest\", \"mcp-git-ingest\"],\n        }\n    }\n}\n```\n\n## Usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli):\n\n```\n$ llm read https://github.com/adhikasp/mcp-git-ingest and determine how the code technically works\n\nI'll help you understand the technical details of the mcp-git-ingest repository. I'll first fetch the directory structure and then read the important files to analyze how the code works.\n\nTool Calls:\n  github_directory_structure\n  Args:\n    repo_url: https://github.com/adhikasp/mcp-git-ingest\n\nNow, I'll read the important files to understand the technical implementation:\n\nTool Calls:\n  github_read_important_files\n  Args:\n    repo_url: https://github.com/adhikasp/mcp-git-ingest\n    file_paths: ['README.md', 'src/mcp_git_ingest/main.py', 'pyproject.toml']\n\nLet me break down how this code technically works:\n\n1. Purpose:\nThe `mcp-git-ingest` is a Model Context Protocol (MCP) server designed to help read GitHub repository structures and important files. It provides two main tools:\n- `github_directory_structure`: Returns a tree-like representation of a repository's directory structure\n- `github_read_important_files`: Reads and returns the contents of specified files in a repository\n\n2. Technical Implementation:\n\na. Dependencies:\n- Uses `fastmcp` for creating an MCP server\n- Uses `gitpython` for Git repository operations\n- Requires Python 3.8+\n\nb. Key Functions:\n\n`clone_repo(repo_url: str) -> str`:\n- Creates a deterministic temporary directory based on the repository URL's hash\n- Checks if the repository is already cloned\n- If not, clones the repository\n- Handles error cases and cleanup\n- Returns the path to the cloned repository\n\n`get_directory_tree(path: str, prefix: str = \"\") -> str`:\n- Recursively generates a tree-like directory structure\n- Skips `.git` directories\n- Uses Unicode box-drawing characters to create a visual tree representation\n- Handles sorting of entries\n\n`github_directory_structure(repo_url: str) -> str`:\n- Clones the repository\n- Generates directory tree\n- Cleans up the temporary repository after processing\n- Returns the tree structure or an error message\n\n`github_read_important_files(repo_url: str, file_paths: List[str]) -> dict[str, str]`:\n- Clones the repository\n- Reads specified files\n- Returns a dictionary mapping file paths to their contents\n- Handles file reading errors\n- Cleans up the temporary repository\n\n3. Error Handling:\n- Uses try-except blocks to handle repository cloning, file reading errors\n- Ensures temporary directories are always cleaned up using `finally` blocks\n- Returns descriptive error messages\n\n4. Performance Optimizations:\n- Uses a hash-based temporary directory naming to potentially reuse cloned repositories\n- Checks for existing repositories before cloning\n- Implements cleanup to prevent accumulation of temporary files\n\n5. Unique Features:\n- Deterministic temporary directory creation\n- Unicode tree representation\n- Flexible file reading with error handling\n\n6. Execution:\n- Can be run as a CLI tool via `mcp-git-ingest`\n- Configured through `pyproject.toml`\n- Depends on `fastmcp` for MCP server functionality\n\nThe code is a robust, flexible tool for programmatically exploring and reading GitHub repositories, with a focus on error handling and clean implementation.\n\nWould you like me to elaborate on any specific aspect of the implementation?\n```\n\n",
    "publisher": {
      "id": "adhikasp",
      "name": "adhikasp",
      "url": "https://github.com/adhikasp/mcp-git-ingest"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/adhikasp/mcp-git-ingest",
    "distribution": {
      "type": "pip",
      "package": "mcp-git-ingest"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-git-ingest"
      ],
      "env": {}
    }
  },
  {
    "id": "eadf01ba-42b7-4c88-b9e3-464267f3165e",
    "name": "snaggle-ai/openapi-mcp-server",
    "description": "OpenAPI MCP Server",
    "fullDescription": "# OpenAPI MCP Server\n\n> **Talk to any OpenAPI (v3.1) compliant API through Claude Desktop!**\n\nThis tool creates a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server that acts as a proxy for any API that has an OpenAPI v3.1 specification. This allows you to use Claude Desktop to easily interact with both local and remote server APIs.\n\nIf you're having trouble with Claude crashing or specs not working put them through our [spec cleaner app](https://open-api-spec-cleaner.replit.app/) this tidies up some open api schemas to help them be LLM-readable.\n\n## What does it do?\n\nThis proxy automatically converts OpenAPI endpoints into Claude tools, allowing Claude to:\n\n1. Discover available API endpoints and understand their purpose\n2. Know what parameters are required and their types\n3. Make API calls on your behalf\n4. Handle the responses appropriately\n\nFor example, if you have a Petstore API with this endpoint:\n\n```yaml\n/pets/{petId}:\n  get:\n    operationId: getPetById\n    summary: Returns a pet by ID\n    parameters:\n      - name: petId\n        in: path\n        description: ID of pet to return\n        required: true\n        schema:\n          type: integer\n```\n\nClaude will see this as a tool it can use:\n\n![Example of Claude seeing the getPetById tool](./examples/petstore_tools_in_claude.png)\n\nYou can then ask Claude natural questions like:\n- \"Can you fetch the details for pet ID 123?\"\n- \"What's the status of my pet with ID 456?\"\n\nClaude will understand the context and make the appropriate API calls.\n\n## File Upload Support\n\nThe proxy supports file uploads for APIs that accept multipart/form-data. When an endpoint accepts file uploads (indicated by `type: string, format: binary` in the OpenAPI spec), you can provide local file paths and the proxy will handle reading and uploading the files.\n\n### Example Use Cases\n\n1. **Profile Picture Upload**\n```yaml\n/users/{userId}/avatar:\n  post:\n    summary: Upload a user's profile picture\n    requestBody:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              avatar:\n                type: string\n                format: binary\n                description: Profile picture (JPEG/PNG)\n              cropInfo:\n                type: object\n                properties:\n                  x: { type: number }\n                  y: { type: number }\n                  width: { type: number }\n                  height: { type: number }\n```\n\nYou can ask Claude:\n- \"Upload my new profile picture from ~/Pictures/profile.jpg\"\n- \"Update my avatar with ~/Downloads/photo.png and crop it to 200x200\"\n\n2. **Document Processing**\n```yaml\n/documents:\n  post:\n    summary: Upload documents for processing\n    requestBody:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              document:\n                type: string\n                format: binary\n                description: PDF or Word document\n              language:\n                type: string\n                enum: [en, es, fr]\n                description: Document language\n              processOCR:\n                type: boolean\n                description: Whether to extract text using OCR\n```\n\nNatural language commands:\n- \"Process the document at ~/Documents/contract.pdf in English with OCR enabled\"\n- \"Upload ~/Downloads/report.docx and set the language to French\"\n\n3. **Batch File Upload**\n```yaml\n/batch-upload:\n  post:\n    summary: Upload multiple files in one request\n    requestBody:\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            properties:\n              files:\n                type: array\n                items:\n                  type: string\n                  format: binary\n              tags:\n                type: array\n                items:\n                  type: string\n```\n\nYou can say:\n- \"Upload these three files: ~/data1.csv, ~/data2.csv, and ~/data3.csv with tags 'monthly-report'\"\n- \"Process the files in ~/exports/ with tags 'raw-data', 'june-2023'\"\n\n### Important Considerations\n\n1. **Security**\n   - File paths are resolved relative to the current working directory\n   - Access is restricted to files the user has permission to read\n   - Sensitive files (like ~/.ssh/id_rsa) require explicit user confirmation\n   - File contents are only read when making the actual API request\n\n2. **Performance**\n   - Large files are streamed directly from disk to the API\n   - Memory usage is optimized for large files\n   - Progress reporting is available for large uploads\n\n3. **Limitations**\n   - Maximum file size is determined by the target API\n   - Only local files are supported (no remote URLs)\n   - Some file types may be restricted by the API\n\n## Getting Started\n\n1. **Configure Claude Desktop:**\n   Add this to your `claude_desktop_config.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"petstore-api\": {\n         \"command\": \"npx\",\n         \"args\": [\"openapi-mcp-server\", \"/abs/path/to/petstore-openapi.json\"]\n       }\n     }\n   }\n   ```\n\n2. **Restart Claude Desktop** and start interacting with your API!\n\n## Examples\n\nThis repository includes a complete example of a Petstore API server that you can use to test the OpenAPI MCP Server. The example server implements a basic CRUD API for managing pets, making it perfect for learning how to use this tool.\n\nSee [examples/README.md](examples/README.md) for instructions on running the example server.\n\n### CLI Tool\nThe repository includes a command-line tool for testing OpenAPI endpoints:\n\n```bash\n# List all available methods\npnpm tsx examples/cli/openapi-client.ts http://localhost:3000/openapi.json list\n\n# Call a specific method\npnpm tsx examples/cli/openapi-client.ts http://localhost:3000/openapi.json call API-getPetById '{\"id\": 1}'\n```\n\nThe CLI tool demonstrates how to use both the `OpenAPIToMCPConverter` and `HttpClient` classes to interact with OpenAPI-compliant servers programmatically.\n\n## Use Cases\n\n1. **Local Development**\n   - Test your APIs through natural conversation\n   - Debug endpoints without writing code\n   - Explore API capabilities interactively\n\n2. **API Integration**\n   - Quickly test third-party APIs\n   - Prototype integrations before writing code\n   - Learn new APIs through conversation\n\n3. **Documentation**\n   - Ask questions about API endpoints\n   - Get examples of how to use endpoints\n   - Understand error conditions\n\n## Limitations\n\n- Currently supports OpenAPI v3.1 specs only\n- Response handling is optimized for JSON/text responses\n- File uploads support local files only (no remote URLs)\n- Streaming responses not yet implemented\n\n## Development\n\nOutstanding tasks are listed in [TODO.md](TODO.md).\n\nBasics:\n```bash\n# Install dependencies\npnpm install\n\n# Run tests\npnpm test\n\n# Build the project\npnpm build\n\n# Link the project to your global node_modules so that npx works\nnpm link\n\n# Now start claude desktop to use\n\n# After making changes run build again before restarting claude desktop\npnpm build\n\n# Now restart claude desktop to run with latest changes\n```\n\n## Using OpenAPIToMCPConverter Programmatically\n\nIf you want to convert OpenAPI specs to MCP tools programmatically, you can use the `OpenAPIToMCPConverter` class:\n\n```typescript\nimport { OpenAPIToMCPConverter } from 'openapi-mcp-server'\n\n// Initialize the converter with your OpenAPI spec\nconst converter = new OpenAPIToMCPConverter(openApiSpec)\n\n// Convert to OpenAI tools format\nconst openAiTools = await converter.convertToOpenAITools()\n\n// Convert to Anthropic tools format\nconst anthropicTools = await converter.convertToAnthropicTools()\n\n// Convert to MCP tools format\nconst { tools, openApiLookup } = converter.convertToMCPTools()\n```\n\nThe converter supports multiple tool formats, making it easy to integrate with different LLM providers. The converted tools maintain all the type information and descriptions from your OpenAPI spec, ensuring accurate parameter validation and helpful documentation.\n\n## Making API Calls Programmatically\n\nYou can use the `HttpClient` class to make API calls directly without going through an LLM:\n\n```typescript\nimport { HttpClient, OpenAPIToMCPConverter } from 'openapi-mcp-server'\n\n// Initialize the converter and client\nconst converter = new OpenAPIToMCPConverter(openApiSpec)\nconst httpClient = new HttpClient({ baseUrl: 'https://api.example.com' }, openApiSpec)\n\n// Get operation details from the converter\nconst { openApiLookup } = converter.convertToMCPTools()\nconst operation = openApiLookup['API-getPetById']\n\n// Make the API call\nconst response = await httpClient.executeOperation(operation, {\n  petId: 123\n})\n```\n\nThe `HttpClient` handles:\n- Parameter validation\n- URL path parameter substitution\n- Query string formatting\n- Request body formatting\n- File uploads (multipart/form-data)\n- Error handling\n\n\n## :hammer: Tools\n\nDeveloped with\n\n### [cursor-tools](https://github.com/eastlondoner/cursor-tools)\nCursor-tools are tools that power up AI code generation. Cursor-tools works with any AI agent that can execute commands including Cursor Agent, Cline & Aider.\n\n:link: [Build with AI: Smarter, faster, and better with **cursor-tools**](https://github.com/eastlondoner/cursor-tools)\n\n\n## Sponsors\n\n### [Vinta.app](https://vinta.app)  \n**Optimise your Vinted accounting** with real-time analytics, inventory management, and tax compliance tools.  \n\n:link: [Start scaling your Vinted business today](https://vinta.app)  \n\n---\n\n### [Resoled.it](https://resoled.it)  \n**Automate your Vinted reselling business** with advanced tools like autobuy, custom snipers, and one-click relisting.  \n\n:link: [Take Vinted reselling to the next level](https://resoled.it)  \n\n\n## License\n\nMIT\n\n---\n\nBuilt with ❤️ for making APIs more accessible through natural language.\n",
    "publisher": {
      "id": "snaggle-ai",
      "name": "snaggle-ai",
      "url": "https://github.com/snaggle-ai/openapi-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/snaggle-ai/openapi-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "openapi-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "openapi-mcp-server",
        "$ENVARG_OPENAPI_SPECIFICATION_PATH"
      ],
      "env": {
        "ENVARG_OPENAPI_SPECIFICATION_PATH": {
          "description": "Path to the OpenAPI v3.1 specification file (JSON or YAML)",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "42414058-669e-4553-b608-ee4a40802210",
    "name": "loonghao/wecom-bot-mcp-server",
    "description": "WeCom Bot MCP Server",
    "fullDescription": "# WeCom Bot MCP Server\n\nA WeCom (WeChat Work) bot server implemented with FastMCP, supporting message sending via webhook.\n\n## Features\n\n- Built on FastMCP framework\n- Markdown message format support\n- Asynchronous message sending\n- Message history tracking\n- Complete type hints\n- Comprehensive unit tests\n\n## Installation\n\n### Installing via Smithery\n\nTo install WeCom Bot Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/wecom-bot-mcp-server):\n\n```bash\nnpx -y @smithery/cli install wecom-bot-mcp-server --client claude\n```\n\nUsing pip:\n\n```bash\npip install wecom-bot-mcp-server\n```\n\nOr using poetry (recommended):\n\n```bash\npoetry add wecom-bot-mcp-server\n```\n\n## Usage\n\n1. Set environment variable:\n\n```bash\n# Windows PowerShell\n$env:WECOM_WEBHOOK_URL=\"your WeCom bot webhook URL\"\n\n# Linux/macOS\nexport WECOM_WEBHOOK_URL=\"your WeCom bot webhook URL\"\n```\n\n2. Run the server:\n\n```bash\n# Run directly after installation\nwecom-bot-mcp-server\n```\n\nOr use in code:\n\n```python\nfrom wecom_bot_mcp_server.server import main\n\n# Start server\nif __name__ == \"__main__\":\n    main()\n```\n\n3. Send messages:\n\n```python\nfrom wecom_bot_mcp_server.server import send_message, get_message_history\n\n# Send a message\nawait send_message(\"Hello, WeCom!\")\n\n# Get message history\nhistory = get_message_history()\n```\n\n## Cline Configuration\n\n1. Install dependency:\n\n```bash\npoetry add wecom-bot-mcp-server\n```\n\n2. Configure Cline MCP settings:\n\nConfigure the Cline MCP settings file in VSCode. File location:\n- Windows: `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- Linux: `~/.config/Code/User/globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- macOS: `~/Library/Application Support/Code/User/globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n\nAdd the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"wecom-bot-server\": {\n      \"command\": \"wecom-bot-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"WECOM_WEBHOOK_URL\": \"<your WeCom bot webhook URL>\"\n      },\n      \"alwaysAllow\": [\n        \"send_message\"\n      ],\n      \"disabled\": false\n    }\n  }\n}\n```\n\nConfiguration notes:\n- `command`: Uses the installed command-line tool\n- `env.WECOM_WEBHOOK_URL`: Replace with your actual WeCom bot webhook URL\n\n## Development\n\n1. Clone repository:\n\n```bash\ngit clone https://github.com/loonghao/wecom-bot-mcp-server.git\ncd wecom-bot-mcp-server\n```\n\n2. Install poetry and dependencies:\n\n```bash\npip install poetry\npoetry install --with dev\n```\n\n3. Run tests:\n\n```bash\npoetry run pytest tests/ --cov=wecom_bot_mcp_server\n```\n\n4. Code checks:\n\n```bash\npoetry run ruff check .\npoetry run ruff format .\npoetry run mypy src/wecom_bot_mcp_server --strict\n```\n\n## Requirements\n\n- Python >= 3.10\n- FastMCP >= 0.4.1\n- httpx >= 0.24.1\n\n## License\n\n[MIT License](LICENSE)\n\n## Contributing\n\nIssues and Pull Requests are welcome!\n\n---\n\n# WeCom Bot MCP Server (中文)\n\n[English](#wecom-bot-mcp-server) | 中文\n\n## 特性\n\n- 基于 FastMCP 框架实现\n- 支持 Markdown 格式消息\n- 异步消息发送\n- 消息历史记录\n- 完整的类型提示\n- 全面的单元测试\n\n## 安装\n\n### 使用 Smithery 安装\n\n通过 [Smithery](https://smithery.ai/server/wecom-bot-mcp-server) 为 Claude Desktop 自动安装 WeCom Bot Server：\n\n```bash\nnpx -y @smithery/cli install wecom-bot-mcp-server --client claude\n```\n\n使用 pip 安装：\n\n```bash\npip install wecom-bot-mcp-server\n```\n\n或者使用 poetry 安装（推荐）：\n\n```bash\npoetry add wecom-bot-mcp-server\n```\n\n## 使用方法\n\n1. 设置环境变量：\n\n```bash\n# Windows PowerShell\n$env:WECOM_WEBHOOK_URL=\"你的企业微信机器人 Webhook URL\"\n\n# Linux/macOS\nexport WECOM_WEBHOOK_URL=\"你的企业微信机器人 Webhook URL\"\n```\n\n2. 运行服务器：\n\n```bash\n# 安装后可以直接运行命令\nwecom-bot-mcp-server\n```\n\n或者在代码中使用：\n\n```python\nfrom wecom_bot_mcp_server.server import main\n\n# 启动服务器\nif __name__ == \"__main__\":\n    main()\n```\n\n3. 发送消息：\n\n```python\nfrom wecom_bot_mcp_server.server import send_message, get_message_history\n\n# 发送消息\nawait send_message(\"Hello, WeCom!\")\n\n# 获取消息历史\nhistory = get_message_history()\n```\n\n## 在 Cline 中配置\n\n1. 安装依赖：\n\n```bash\npoetry add wecom-bot-mcp-server\n```\n\n2. 配置 Cline MCP 设置：\n\n在 VSCode 中，需要配置 Cline MCP 设置文件。文件位置：\n- Windows: `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- Linux: `~/.config/Code/User/globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- macOS: `~/Library/Application Support/Code/User/globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n\n添加以下配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"wecom-bot-server\": {\n      \"command\": \"wecom-bot-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"WECOM_WEBHOOK_URL\": \"<你的企业微信机器人Webhook URL>\"\n      },\n      \"alwaysAllow\": [\n        \"send_message\"\n      ],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n配置说明：\n- `command`: 使用安装后的命令行工具\n- `env.WECOM_WEBHOOK_URL`: 替换为你的企业微信机器人实际的 Webhook URL\n\n## 开发\n\n1. 克隆仓库：\n\n```bash\ngit clone https://github.com/loonghao/wecom-bot-mcp-server.git\ncd wecom-bot-mcp-server\n```\n\n2. 安装 poetry 和依赖：\n\n```bash\npip install poetry\npoetry install --with dev\n```\n\n3. 运行测试：\n\n```bash\npoetry run pytest tests/ --cov=wecom_bot_mcp_server\n```\n\n4. 代码检查：\n\n```bash\npoetry run ruff check .\npoetry run ruff format .\npoetry run mypy src/wecom_bot_mcp_server --strict\n```\n\n## 要求\n\n- Python >= 3.10\n- FastMCP >= 0.4.1\n- httpx >= 0.24.1\n\n## 许可证\n\n[MIT License](LICENSE)\n\n## 贡献\n\n欢迎提交 Issue 和 Pull Request！\n",
    "publisher": {
      "id": "loonghao",
      "name": "loonghao",
      "url": "https://github.com/loonghao/wecom-bot-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/loonghao/wecom-bot-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "wecom-bot-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "wecom-bot-mcp-server"
      ],
      "env": {
        "WECOM_WEBHOOK_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "f9c31a43-32b9-4d55-b836-e641af77667a",
    "name": "f4ww4z/mcp-mysql-server",
    "description": "@f4ww4z/mcp-mysql-server",
    "fullDescription": "# @f4ww4z/mcp-mysql-server\n\nA Model Context Protocol server that provides MySQL database operations. This server enables AI models to interact with MySQL databases through a standardized interface.\n\n## Installation\n\n### Installing via Smithery\n\nTo install MySQL Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@f4ww4z/mcp-mysql-server):\n\n```bash\nnpx -y @smithery/cli install @f4ww4z/mcp-mysql-server --client claude\n```\n\n### Manual Installation\n```bash\nnpx @f4ww4z/mcp-mysql-server\n```\n\n## Configuration\n\nThe server requires the following environment variables to be set in your MCP settings configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@f4ww4z/mcp-mysql-server\"],\n      \"env\": {\n        \"MYSQL_HOST\": \"your_host\",\n        \"MYSQL_USER\": \"your_user\",\n        \"MYSQL_PASSWORD\": \"your_password\",\n        \"MYSQL_DATABASE\": \"your_database\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### 1. connect_db\nEstablish connection to MySQL database using provided credentials.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"mysql\",\n  tool_name: \"connect_db\",\n  arguments: {\n    host: \"localhost\",\n    user: \"your_user\",\n    password: \"your_password\",\n    database: \"your_database\"\n  }\n});\n```\n\n### 2. query\nExecute SELECT queries with optional prepared statement parameters.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"mysql\",\n  tool_name: \"query\",\n  arguments: {\n    sql: \"SELECT * FROM users WHERE id = ?\",\n    params: [1]\n  }\n});\n```\n\n### 3. execute\nExecute INSERT, UPDATE, or DELETE queries with optional prepared statement parameters.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"mysql\",\n  tool_name: \"execute\",\n  arguments: {\n    sql: \"INSERT INTO users (name, email) VALUES (?, ?)\",\n    params: [\"John Doe\", \"john@example.com\"]\n  }\n});\n```\n\n### 4. list_tables\nList all tables in the connected database.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"mysql\",\n  tool_name: \"list_tables\",\n  arguments: {}\n});\n```\n\n### 5. describe_table\nGet the structure of a specific table.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"mysql\",\n  tool_name: \"describe_table\",\n  arguments: {\n    table: \"users\"\n  }\n});\n```\n\n## Features\n\n- Secure connection handling with automatic cleanup\n- Prepared statement support for query parameters\n- Comprehensive error handling and validation\n- TypeScript support\n- Automatic connection management\n\n## Security\n\n- Uses prepared statements to prevent SQL injection\n- Supports secure password handling through environment variables\n- Validates queries before execution\n- Automatically closes connections when done\n\n## Error Handling\n\nThe server provides detailed error messages for common issues:\n- Connection failures\n- Invalid queries\n- Missing parameters\n- Database errors\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request to https://github.com/f4ww4z/mcp-mysql-server\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "f4ww4z",
      "name": "f4ww4z",
      "url": "https://github.com/f4ww4z/mcp-mysql-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/f4ww4z/mcp-mysql-server",
    "distribution": {
      "type": "npm",
      "package": "@f4ww4z/mcp-mysql-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@f4ww4z/mcp-mysql-server"
      ],
      "env": {
        "MYSQL_HOST": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_USER": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_DATABASE": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "e305c7ef-f8a5-4e6d-bf71-504ae3524558",
    "name": "crazyrabbitLTC/mcp-expert-server",
    "description": "MCP Expert Server",
    "fullDescription": "# MCP Expert Server\n\nA Model Context Protocol server that provides intelligent query generation and documentation assistance using Claude AI. The server analyzes your API documentation and provides two main tools:\n\n- **create-query**: Generates queries based on natural language requests\n- **documentation**: Provides relevant documentation information based on questions\n\n## Prerequisites\n\n- Node.js >= 18\n- An Anthropic API key for Claude\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Create a `.env` file with your Anthropic API key:\n```\nANTHROPIC_API_KEY=your_api_key_here\n```\n\n## Setup\n\nBefore running the server, you need to:\n\n1. Build the project and run the setup script:\n```bash\nnpm run build\nnpm run setup\n```\n\nThis will:\n- Create the required directories (`docs/` and `prompts/`)\n- Create default prompt files\n- Generate an initial service description\n\n2. Add your API documentation files to the `docs/` directory (supports `.txt`, `.md`, and `.json` files)\n\n3. Optionally customize the prompts in the `prompts/` directory:\n   - `system-prompt.txt`: Main system prompt for Claude\n   - `tool-metadata.txt`: Additional context for tool descriptions\n   - `query-metadata.txt`: Additional context for query generation\n   - `service-description.txt`: Auto-generated service description\n\n## Usage\n\n### Standalone Server\n\nStart the server:\n```bash\nnpm start\n```\n\nThe server exposes two tools via the Model Context Protocol:\n\n- **create-query**: Generate a query based on natural language request\n  ```json\n  {\n    \"name\": \"create-query\",\n    \"arguments\": {\n      \"request\": \"Find all users who signed up in the last week\"\n    }\n  }\n  ```\n\n- **documentation**: Get information from the documentation\n  ```json\n  {\n    \"name\": \"documentation\",\n    \"arguments\": {\n      \"request\": \"How do I authenticate API requests?\"\n    }\n  }\n  ```\n\n### Claude Desktop Integration\n\n1. Add this configuration to your Claude Desktop config file:\n```json\n{\n  \"mcpServers\": {\n    \"expert\": {\n      \"command\": \"node\",\n      \"args\": [\"/ABSOLUTE/PATH/TO/expert-server/build/index.js\"],\n      \"env\": {\n        \"ANTHROPIC_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n2. Replace `/ABSOLUTE/PATH/TO/expert-server` with the actual absolute path to your server installation.\n\n3. Restart Claude Desktop.\n\n## Directory Structure\n\n```\n.\n├── docs/                  # Your API documentation files\n├── prompts/              # System prompts and metadata\n│   ├── system-prompt.txt    # Main system prompt\n│   ├── tool-metadata.txt    # Tool description context\n│   ├── query-metadata.txt   # Query generation context\n│   └── service-description.txt  # Generated service description\n├── src/                  # Source code\n│   ├── index.ts            # Entry point\n│   ├── server.ts           # MCP server implementation\n│   └── services/           # Core services\n│       └── expertService.ts  # Claude integration\n└── package.json\n```\n\n## Development\n\n- Build the project:\n```bash\nnpm run build\n```\n\n- The server uses TypeScript and follows a modular architecture\n- All Claude interactions are handled by the ExpertService class\n- Debug logs are written to stderr with [DEBUG] prefix\n\n## Troubleshooting\n\nIf you encounter connection issues:\n\n1. Ensure you've run the setup script:\n```bash\nnpm run setup\n```\n\n2. Check that all required files exist in the `prompts/` directory\n3. Verify your `ANTHROPIC_API_KEY` is correctly set\n4. Use absolute paths in your Claude Desktop config\n5. Check the debug logs (written to stderr)\n\n## Environment Variables\n\n- `ANTHROPIC_API_KEY`: Your Anthropic API key (required)\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "crazyrabbitLTC",
      "name": "crazyrabbitLTC",
      "url": "https://github.com/crazyrabbitLTC/mcp-expert-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/crazyrabbitLTC/mcp-expert-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-expert-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-expert-server"
      ],
      "env": {
        "ANTHROPIC_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ab816861-cba9-4f5f-ab94-b5295b2d122d",
    "name": "google-maps",
    "description": "Google Maps MCP Server",
    "fullDescription": "# Google Maps MCP Server\n\nMCP Server for the Google Maps API.\n\n## Tools\n\n1. `maps_geocode`\n   - Convert address to coordinates\n   - Input: `address` (string)\n   - Returns: location, formatted_address, place_id\n\n2. `maps_reverse_geocode`\n   - Convert coordinates to address\n   - Inputs:\n     - `latitude` (number)\n     - `longitude` (number)\n   - Returns: formatted_address, place_id, address_components\n\n3. `maps_search_places`\n   - Search for places using text query\n   - Inputs:\n     - `query` (string)\n     - `location` (optional): { latitude: number, longitude: number }\n     - `radius` (optional): number (meters, max 50000)\n   - Returns: array of places with names, addresses, locations\n\n4. `maps_place_details`\n   - Get detailed information about a place\n   - Input: `place_id` (string)\n   - Returns: name, address, contact info, ratings, reviews, opening hours\n\n5. `maps_distance_matrix`\n   - Calculate distances and times between points\n   - Inputs:\n     - `origins` (string[])\n     - `destinations` (string[])\n     - `mode` (optional): \"driving\" | \"walking\" | \"bicycling\" | \"transit\"\n   - Returns: distances and durations matrix\n\n6. `maps_elevation`\n   - Get elevation data for locations\n   - Input: `locations` (array of {latitude, longitude})\n   - Returns: elevation data for each point\n\n7. `maps_directions`\n   - Get directions between points\n   - Inputs:\n     - `origin` (string)\n     - `destination` (string)\n     - `mode` (optional): \"driving\" | \"walking\" | \"bicycling\" | \"transit\"\n   - Returns: route details with steps, distance, duration\n\n## Setup\n\n### API Key\nGet a Google Maps API key by following the instructions [here](https://developers.google.com/maps/documentation/javascript/get-api-key#create-api-keys).\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GOOGLE_MAPS_API_KEY\",\n        \"mcp/google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"google-maps\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/google-maps -f src/google-maps/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-google-maps"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-google-maps"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5fb86405-3edc-485b-b261-45301e4131b3",
    "name": "rogerheykoop/mcp-safari-screenshot",
    "description": "Safari Screenshot",
    "fullDescription": "# Safari Screenshot\n\nA Node.js MCP Server for capturing screenshots using Safari on macOS.\n\n## Features\n\n- Capture window screenshots at specific sizes\n- Support for different zoom levels\n- Configurable wait times for page load\n- Clean up after capture\n- Native macOS screenshot quality\n\n## Usage\n\n```javascript\nimport { takeScreenshot } from './screenshot.js';\n\n// Basic window screenshot\nawait takeScreenshot({\n\turl: 'https://www.apple.com',\n\toutputPath: './screenshot.png',\n\twidth: 1024, // Optional: window width (default: 1024)\n\theight: 768, // Optional: window height (default: 768)\n\twaitTime: 3, // Optional: seconds to wait for load (default: 3)\n\tzoomLevel: 1, // Optional: page zoom level (default: 1)\n});\n\n// Responsive design testing\nawait takeScreenshot({\n\turl: 'https://www.apple.com',\n\toutputPath: './mobile.png',\n\twidth: 375, // iPhone SE width\n\theight: 667, // iPhone SE height\n\tzoomLevel: 1,\n});\n\n// High-resolution capture\nawait takeScreenshot({\n\turl: 'https://www.apple.com',\n\toutputPath: './desktop-hd.png',\n\twidth: 1920, // Full HD width\n\theight: 1080, // Full HD height\n\twaitTime: 5, // Wait longer for HD content\n\tzoomLevel: 0.8, // Zoom out slightly\n});\n```\n\n## Requirements\n\n- macOS\n- Safari\n- Node.js >= 14.0.0\n- Terminal needs Accessibility permissions (System Preferences → Security & Privacy → Privacy → Accessibility)\n\n## Installation\n\n```bash\nnpm install safari-screenshot\n```\n\n## Options\n\n| Option     | Type   | Default  | Description                                                                      |\n| ---------- | ------ | -------- | -------------------------------------------------------------------------------- |\n| url        | string | required | The URL to capture                                                               |\n| outputPath | string | auto     | Where to save the screenshot (default: ./screenshots/[hostname]-[timestamp].png) |\n| width      | number | 1024     | Window width in pixels                                                           |\n| height     | number | 768      | Window height in pixels                                                          |\n| waitTime   | number | 3        | Seconds to wait for page load                                                    |\n| zoomLevel  | number | 1        | Page zoom level (1 = 100%)                                                       |\n\n## Common Viewport Sizes\n\nThe module is tested with these common viewport sizes:\n\n- Desktop: 1920×1080 (Full HD)\n- Laptop: 1366×768\n- Tablet Landscape: 1024×768\n- Tablet Portrait: 768×1024\n- Mobile Large: 428×926 (iPhone 12 Pro Max)\n- Mobile Medium: 390×844 (iPhone 12 Pro)\n- Mobile Small: 375×667 (iPhone SE)\n\n## How It Works\n\n1. Opens Safari with specified window size\n2. Loads the URL and waits for page load\n3. Applies zoom level if specified\n4. Uses native macOS screencapture for pixel-perfect results\n5. Verifies screenshot was captured successfully\n6. Cleans up Safari windows\n\n## Permissions\n\nThis package requires System Events permissions to work:\n\n1. Open System Preferences > Security & Privacy > Privacy > Accessibility\n2. Add Terminal (or your IDE) to the list of allowed apps\n\n## Using with Cursor\n\n### Setup in Cursor\n\n1. Open Cursor\n2. Go to settings, \"Add MCP Server\"\n3. In the configuration dialog:\n\n   - Name: `safari-screenshot`\n   - Type: `command`\n   - Command: `npx -y @rogerheykoop/mcp-safari-screenshot`\n\n   Or for local development:\n\n   - Command: `npx -y /path/to/mcp-safari-screenshot/server.js`\n\n### Example Commands\n\nAfter connecting to the server in Cursor, you can use these commands:\n\n```\nTake a screenshot of https://apple.com at desktop size\n```\n\nResponse: Will capture at 1920×1080\n\n```\nCapture https://apple.com on iPhone 12 Pro\n```\n\nResponse: Will capture at 390×844\n\n```\nScreenshot github.com at 50% zoom\n```\n\nResponse: Will capture with zoomLevel: 0.5\n\n### Supported Parameters\n\nThe MCP server understands these concepts:\n\n- Device names (e.g., \"iPhone\", \"iPad\", \"desktop\")\n- Dimensions (e.g., \"1024x768\")\n- Zoom levels (e.g., \"50% zoom\", \"2x zoom\")\n- Wait times (e.g., \"wait 5 seconds\")\n\n### Example Workflows\n\n1. **Responsive Testing**\n\n   ```\n   Take screenshots of apple.com on iPhone, iPad, and desktop\n   ```\n\n2. **Zoom Testing**\n\n   ```\n   Capture github.com at 75% zoom and 125% zoom\n   ```\n\n3. **Custom Size**\n   ```\n   Screenshot example.com at 1440x900\n   ```\n\n### Tips\n\n- Screenshots are saved to the `screenshots` directory by default\n- Device names automatically set appropriate dimensions\n- The server handles cleanup of Safari windows\n- Use \"wait X seconds\" for slow-loading pages\n\n### Troubleshooting\n\nIf you encounter issues:\n\n1. Check Terminal has Accessibility permissions\n2. Verify Safari is not in private browsing mode\n3. Ensure the working directory is writable\n4. Check Cursor's console for error messages\n\n## License\n\nMIT\n\n## Testing Locally\n\nYou can test the MCP implementation directly:\n\n```bash\n# Test discovery\necho '{\"type\":\"discover\"}' | npx -y ./server.js\n\n# Test screenshot\necho '{\"type\":\"execute\",\"tool\":\"take_screenshot\",\"input\":\"Take a screenshot of https://apple.com\",\"requestId\":\"123\"}' | npx -y ./server.js\n```\n\nExpected responses:\n\n1. Discover will return capabilities\n2. Execute will:\n   - Log progress to stderr\n   - Return result JSON to stdout\n   - Save screenshot to ./screenshots/\n",
    "publisher": {
      "id": "rogerheykoop",
      "name": "rogerheykoop",
      "url": "https://github.com/rogerheykoop/mcp-safari-screenshot"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/rogerheykoop/mcp-safari-screenshot",
    "distribution": {
      "type": "npm",
      "package": "@rogerheykoop/mcp-safari-screenshot"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@rogerheykoop/mcp-safari-screenshot"
      ],
      "env": {}
    }
  },
  {
    "id": "d2b07e0b-b5a0-478e-887e-34d6b0334ae8",
    "name": "SecretiveShell/MCP-wolfram-alpha",
    "description": "MCP-wolfram-alpha",
    "fullDescription": "# MCP-wolfram-alpha\n\nA MCP server to connect to wolfram alpha API.\n\n## Components\n\n### Prompts\n\nThis is analogous to the `!wa` bang in duckduckgo search.\n\n```python\ndef wa(query: str) -> f\"Use wolfram alpha to answer the following question: {query}\"\n```\n\n### Tools\n\nQuery Wolfram Alpha api.\n\n```python\ndef query_wolfram_alpha(query: str) -> str\n```\n\n## Configuration\n\nYou **must** set the `WOLFRAM_API_KEY` environment variable. Get an api ket from [Wolfram Alpha](https://products.wolframalpha.com/api).\n\nThis was tested with the full results API, but it might not be required.\n\n```json\n{\n    \"mcpServers\": {\n        \"MCP-wolfram-alpha\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\Users\\\\root\\\\Documents\\\\MCP-wolfram-alpha\",\n                \"run\",\n                \"MCP-wolfram-alpha\"\n            ],\n            \"env\": {\n                \"WOLFRAM_API_KEY\": \"your-app-id\"\n            }\n        }\n    }\n}\n```\n\n## Development\n\n### Debugging\n\nSince the official MCP inspector does not have good environment support, I reccommend using wong2's [mcp-cli-inspector](https://github.com/wong2/mcp-cli).\n\nCreate a config.json file in the same style as claude desktop.\n\n```json\n{\n    \"mcpServers\": {\n        \"MCP-wolfram-alpha\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/full/path/to/MCP-wolfram-alpha\",\n                \"run\",\n                \"MCP-wolfram-alpha\"\n            ],\n            \"env\": {\n                \"WOLFRAM_API_KEY\": \"your-app-id\"\n            }\n        }\n    }\n}\n```\n\nThen run:\n\n```bash\nnpx @wong2/mcp-cli -c .\\config.json\n```\n",
    "publisher": {
      "id": "SecretiveShell",
      "name": "SecretiveShell",
      "url": "https://github.com/SecretiveShell/MCP-wolfram-alpha"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/SecretiveShell/MCP-wolfram-alpha",
    "distribution": {
      "type": "pip",
      "package": "mcp-wolfram-alpha"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-wolfram-alpha"
      ],
      "env": {
        "WOLFRAM_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "0e2850e9-7d4d-4bb7-8576-24348b411df1",
    "name": "tumf/mcp-text-editor",
    "description": "MCP Text Editor Server",
    "fullDescription": "# MCP Text Editor Server\n\nA Model Context Protocol (MCP) server that provides line-oriented text file editing capabilities through a standardized API. Optimized for LLM tools with efficient partial file access to minimize token usage.\n\n## Quick Start for Claude.app Users\n\nTo use this editor with Claude.app, add the following configuration to your prompt:\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"text-editor\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-text-editor\"\n      ]\n    }\n  }\n}\n```\n\n## Overview\n\nMCP Text Editor Server is designed to facilitate safe and efficient line-based text file operations in a client-server architecture. It implements the Model Context Protocol, ensuring reliable file editing with robust conflict detection and resolution. The line-oriented approach makes it ideal for applications requiring synchronized file access, such as collaborative editing tools, automated text processing systems, or any scenario where multiple processes need to modify text files safely. The partial file access capability is particularly valuable for LLM-based tools, as it helps reduce token consumption by loading only the necessary portions of files.\n\n### Key Benefits\n\n- Line-based editing operations\n- Token-efficient partial file access with line-range specifications\n- Optimized for LLM tool integration\n- Safe concurrent editing with hash-based validation\n- Atomic multi-file operations\n- Robust error handling with custom error types\n- Comprehensive encoding support (utf-8, shift_jis, latin1, etc.)\n\n## Features\n\n- Line-oriented text file editing and reading\n- Smart partial file access to minimize token usage in LLM applications\n- Get text file contents with line range specification\n- Read multiple ranges from multiple files in a single operation\n- Line-based patch application with correct handling of line number shifts\n- Edit text file contents with conflict detection\n- Flexible character encoding support (utf-8, shift_jis, latin1, etc.)\n- Support for multiple file operations\n- Proper handling of concurrent edits with hash-based validation\n- Memory-efficient processing of large files\n\n## Requirements\n\n- Python 3.11 or higher\n- POSIX-compliant operating system (Linux, macOS, etc.) or Windows\n- Sufficient disk space for text file operations\n- File system permissions for read/write operations\n\n1. Install Python 3.11+\n\n```bash\npyenv install 3.11.6\npyenv local 3.11.6\n```\n\n2. Install uv (recommended) or pip\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create virtual environment and install dependencies\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n```\n\n## Requirements\n\n- Python 3.13+\n- POSIX-compliant operating system (Linux, macOS, etc.) or Windows\n- File system permissions for read/write operations\n\n## Installation\n\n### Run via uvx\n\n```bash\nuvx mcp-text-editor\n```\n\n### Installing via Smithery\n\nTo install Text Editor Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-text-editor):\n\n```bash\nnpx -y @smithery/cli install mcp-text-editor --client claude\n```\n\n### Manual Installation\n\n1. Install Python 3.13+\n\n```bash\npyenv install 3.13.0\npyenv local 3.13.0\n```\n\n2. Install uv (recommended) or pip\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create virtual environment and install dependencies\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n```\n\n## Usage\n\nStart the server:\n\n```bash\npython -m mcp_text_editor\n```\n\n### MCP Tools\n\nThe server provides several tools for text file manipulation:\n\n#### get_text_file_contents\n\nGet the contents of one or more text files with line range specification.\n\n**Single Range Request:**\n\n```json\n{\n  \"file_path\": \"path/to/file.txt\",\n  \"line_start\": 1,\n  \"line_end\": 10,\n  \"encoding\": \"utf-8\"  // Optional, defaults to utf-8\n}\n```\n\n**Multiple Ranges Request:**\n\n```json\n{\n  \"files\": [\n    {\n      \"file_path\": \"file1.txt\",\n      \"ranges\": [\n        {\"start\": 1, \"end\": 10},\n        {\"start\": 20, \"end\": 30}\n      ],\n      \"encoding\": \"shift_jis\"  // Optional, defaults to utf-8\n    },\n    {\n      \"file_path\": \"file2.txt\",\n      \"ranges\": [\n        {\"start\": 5, \"end\": 15}\n      ]\n    }\n  ]\n}\n```\n\nParameters:\n- `file_path`: Path to the text file\n- `line_start`/`start`: Line number to start from (1-based)\n- `line_end`/`end`: Line number to end at (inclusive, null for end of file)\n- `encoding`: File encoding (default: \"utf-8\"). Specify the encoding of the text file (e.g., \"shift_jis\", \"latin1\")\n\n**Single Range Response:**\n\n```json\n{\n  \"contents\": \"File contents\",\n  \"line_start\": 1,\n  \"line_end\": 10,\n  \"hash\": \"sha256-hash-of-contents\",\n  \"file_lines\": 50,\n  \"file_size\": 1024\n}\n```\n\n**Multiple Ranges Response:**\n\n```json\n{\n  \"file1.txt\": [\n    {\n      \"content\": \"Lines 1-10 content\",\n      \"start\": 1,\n      \"end\": 10,\n      \"hash\": \"sha256-hash-1\",\n      \"total_lines\": 50,\n      \"content_size\": 512\n    },\n    {\n      \"content\": \"Lines 20-30 content\",\n      \"start\": 20,\n      \"end\": 30,\n      \"hash\": \"sha256-hash-2\",\n      \"total_lines\": 50,\n      \"content_size\": 512\n    }\n  ],\n  \"file2.txt\": [\n    {\n      \"content\": \"Lines 5-15 content\",\n      \"start\": 5,\n      \"end\": 15,\n      \"hash\": \"sha256-hash-3\",\n      \"total_lines\": 30,\n      \"content_size\": 256\n    }\n  ]\n}\n```\n\n#### patch_text_file_contents\n\nApply patches to text files with robust error handling and conflict detection. Supports editing multiple files in a single operation.\n\n**Request Format:**\n\n```json\n{\n  \"files\": [\n    {\n      \"file_path\": \"file1.txt\",\n      \"hash\": \"sha256-hash-from-get-contents\",\n      \"encoding\": \"utf-8\",  // Optional, defaults to utf-8\n      \"patches\": [\n        {\n          \"start\": 5,\n          \"end\": 8,\n          \"range_hash\": \"sha256-hash-of-content-being-replaced\",\n          \"contents\": \"New content for lines 5-8\\n\"\n        },\n        {\n          \"start\": 15,\n          \"end\": null,  // null means end of file\n          \"range_hash\": \"sha256-hash-of-content-being-replaced\",\n          \"contents\": \"Content to append\\n\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nImportant Notes:\n1. Always get the current hash and range_hash using get_text_file_contents before editing\n2. Patches are applied from bottom to top to handle line number shifts correctly\n3. Patches must not overlap within the same file\n4. Line numbers are 1-based\n5. `end: null` can be used to append content to the end of file\n6. File encoding must match the encoding used in get_text_file_contents\n\n**Success Response:**\n\n```json\n{\n  \"file1.txt\": {\n    \"result\": \"ok\",\n    \"hash\": \"sha256-hash-of-new-contents\"\n  }\n}\n```\n\n**Error Response with Hints:**\n\n```json\n{\n  \"file1.txt\": {\n    \"result\": \"error\",\n    \"reason\": \"Content hash mismatch\",\n    \"suggestion\": \"get\",  // Suggests using get_text_file_contents\n    \"hint\": \"Please run get_text_file_contents first to get current content and hashes\"\n  }\n}\n```\n\n    \"result\": \"error\",\n    \"reason\": \"Content hash mismatch - file was modified\",\n    \"hash\": \"current-hash\",\n    \"content\": \"Current file content\"\n\n  }\n}\n\n```\n\n### Common Usage Pattern\n\n1. Get current content and hash:\n\n```python\ncontents = await get_text_file_contents({\n    \"files\": [\n        {\n            \"file_path\": \"file.txt\",\n            \"ranges\": [{\"start\": 1, \"end\": null}]  # Read entire file\n        }\n    ]\n})\n```\n\n2. Edit file content:\n\n```python\nresult = await edit_text_file_contents({\n    \"files\": [\n        {\n            \"path\": \"file.txt\",\n            \"hash\": contents[\"file.txt\"][0][\"hash\"],\n            \"encoding\": \"utf-8\",  # Optional, defaults to \"utf-8\"\n            \"patches\": [\n                {\n                    \"line_start\": 5,\n                    \"line_end\": 8,\n                    \"contents\": \"New content\\n\"\n                }\n            ]\n        }\n    ]\n})\n```\n\n3. Handle conflicts:\n\n```python\nif result[\"file.txt\"][\"result\"] == \"error\":\n    if \"hash mismatch\" in result[\"file.txt\"][\"reason\"]:\n        # File was modified by another process\n        # Get new content and retry\n        pass\n```\n\n### Error Handling\n\nThe server handles various error cases:\n- File not found\n- Permission errors\n- Hash mismatches (concurrent edit detection)\n- Invalid patch ranges\n- Overlapping patches\n- Encoding errors (when file cannot be decoded with specified encoding)\n- Line number out of bounds\n\n## Security Considerations\n\n- File Path Validation: The server validates all file paths to prevent directory traversal attacks\n- Access Control: Proper file system permissions should be set to restrict access to authorized directories\n- Hash Validation: All file modifications are validated using SHA-256 hashes to prevent race conditions\n- Input Sanitization: All user inputs are properly sanitized and validated\n- Error Handling: Sensitive information is not exposed in error messages\n\n## Troubleshooting\n\n### Common Issues\n\n1. Permission Denied\n   - Check file and directory permissions\n   - Ensure the server process has necessary read/write access\n\n2. Hash Mismatch and Range Hash Errors\n   - The file was modified by another process\n   - Content being replaced has changed\n   - Run get_text_file_contents to get fresh hashes\n\n3. Encoding Issues\n   - Verify file encoding matches the specified encoding\n   - Use utf-8 for new files\n   - Check for BOM markers in files\n\n4. Connection Issues\n   - Verify the server is running and accessible\n   - Check network configuration and firewall settings\n\n5. Performance Issues\n   - Consider using smaller line ranges for large files\n   - Monitor system resources (memory, disk space)\n   - Use appropriate encoding for file type\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Create and activate a Python virtual environment\n3. Install development dependencies: `uv pip install -e \".[dev]\"`\n4. Run tests: `make all`\n\n### Code Quality Tools\n\n- Ruff for linting\n- Black for code formatting\n- isort for import sorting\n- mypy for type checking\n- pytest-cov for test coverage\n\n### Testing\n\nTests are located in the `tests` directory and can be run with pytest:\n\n```bash\n# Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=mcp_text_editor --cov-report=term-missing\n\n# Run specific test file\npytest tests/test_text_editor.py -v\n```\n\nCurrent test coverage: 90%\n\n### Project Structure\n\n```\nmcp-text-editor/\n├── mcp_text_editor/\n│   ├── __init__.py\n│   ├── __main__.py      # Entry point\n│   ├── models.py        # Data models\n│   ├── server.py        # MCP Server implementation\n│   ├── service.py       # Core service logic\n│   └── text_editor.py   # Text editor functionality\n├── tests/               # Test files\n└── pyproject.toml       # Project configuration\n```\n\n## License\n\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests and code quality checks\n5. Submit a pull request\n\n### Type Hints\n\nThis project uses Python type hints throughout the codebase. Please ensure any contributions maintain this.\n\n### Error Handling\n\nAll error cases should be handled appropriately and return meaningful error messages. The server should never crash due to invalid input or file operations.\n\n### Testing\n\nNew features should include appropriate tests. Try to maintain or improve the current test coverage.\n\n### Code Style\n\nAll code should be formatted with Black and pass Ruff linting. Import sorting should be handled by isort.\n",
    "publisher": {
      "id": "tumf",
      "name": "tumf",
      "url": "https://github.com/tumf/mcp-text-editor"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tumf/mcp-text-editor",
    "distribution": {
      "type": "pip",
      "package": "mcp-text-editor"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-text-editor"
      ],
      "env": {}
    }
  },
  {
    "id": "ea1d28eb-b56f-4b9b-bfbb-f5a37581e827",
    "name": "spences10/mcp-svelte-docs",
    "description": "mcp-svelte-docs",
    "fullDescription": "# mcp-svelte-docs\n\nA Model Context Protocol (MCP) server that provides efficient access to Svelte documentation with advanced caching, search capabilities, and optimised content delivery. This server integrates directly with Svelte's official documentation, offering both full and compressed variants suitable for different LLM context window sizes.\n\n\n## Features\n\n- 📚 Complete Svelte documentation access through MCP Resources\n- 🔍 Advanced search capabilities:\n  - Document type filtering (API, Tutorial, Example, Error)\n  - Section hierarchy awareness\n  - Intelligent relevance scoring based on:\n    - Term frequency\n    - Section importance\n    - Document type relevance\n    - Exact phrase matching\n  - Context-aware result excerpts\n  - Related search suggestions\n- 💾 Efficient caching with LibSQL\n- 🔄 Automatic content freshness checks\n- 📦 Support for package-specific documentation (Svelte, Kit, CLI)\n- 📏 Smart content chunking for large documents\n- 🗜️ Compressed variants for smaller context windows\n- 🏗️ Built on the Model Context Protocol\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte-docs\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-svelte-docs\"],\n\t\t\t\"env\": {\n\t\t\t\t\"LIBSQL_URL\": \"file:local.db\",\n\t\t\t\t\"LIBSQL_AUTH_TOKEN\": \"your-auth-token-if-using-remote-db\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"svelte-docs\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"LIBSQL_URL=file:local.db LIBSQL_AUTH_TOKEN=your-token npx -y mcp-svelte-docs\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server supports the following environment variables:\n\n- `LIBSQL_URL` (optional): URL for the LibSQL database. Defaults to\n  `file:local.db`\n- `LIBSQL_AUTH_TOKEN` (optional): Auth token for remote LibSQL\n  database\n\n## API\n\nThe server implements both MCP Resources and Tools:\n\n### Resources\n\nAccess documentation through these URIs:\n\n- `svelte-docs://docs/llms.txt` - Documentation index\n- `svelte-docs://docs/llms-full.txt` - Complete documentation\n- `svelte-docs://docs/llms-small.txt` - Compressed documentation\n- `svelte-docs://docs/{package}/llms.txt` - Package-specific\n  documentation\n  - Supported packages: svelte, kit, cli\n\n### Tools\n\n#### search_docs\n\nEnhanced search functionality with advanced filtering and context\nawareness.\n\nParameters:\n\n- `query` (string, required): Search keywords or natural language\n  query\n- `doc_type` (string, optional): Filter by documentation type\n  - Values: 'api', 'tutorial', 'example', 'error', 'all'\n  - Default: 'all'\n- `context` (number, optional): Number of surrounding paragraphs (0-3)\n  - Default: 1\n- `include_hierarchy` (boolean, optional): Include section hierarchy\n  - Default: true\n\nExample Usage:\n\n```json\n// API Reference Search\n{\n  \"query\": \"bind:value directive\",\n  \"doc_type\": \"api\",\n  \"context\": 1\n}\n\n// Tutorial Search\n{\n  \"query\": \"routing sveltekit\",\n  \"doc_type\": \"tutorial\",\n  \"context\": 2,\n  \"include_hierarchy\": true\n}\n```\n\n#### get_next_chunk\n\nRetrieve subsequent chunks of large documents.\n\nParameters:\n\n- `uri` (string, required): Document URI\n- `chunk_number` (number, required): Chunk number to retrieve\n  (1-based)\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\n1. Update version in package.json\n2. Build the project:\n\n```bash\npnpm build\n```\n\n3. Publish to npm:\n\n```bash\npnpm publish\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [Svelte Documentation](https://svelte.dev)\n- Uses [LibSQL](https://github.com/libsql/libsql) for efficient\n  caching\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-svelte-docs"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-svelte-docs",
    "distribution": {
      "type": "npm",
      "package": "mcp-svelte-docs"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-svelte-docs"
      ],
      "env": {
        "LIBSQL_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "LIBSQL_AUTH_TOKEN": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "10b1df32-b51a-4972-bbcc-f4255d6de669",
    "name": "gentoro-GT/mcp-nodejs-server",
    "description": "Gentoro MCP Server",
    "fullDescription": "# Gentoro MCP Server\n\nMCP Server for the Gentoro services, enabling Claude to interact with Gentoro bridges and all underlying capabilities.\n\n## Tools\n\nGentoro allows users to create and integrate tools into a common Bridge, defining all available capabilities.\n\nAs this MCP server is fully integrated with Gentoro, the agents, tools and their underlying functionality is fully controlled at the level of Gentoro's bridge which allows you to enable and disable tools per design.\n\n## Setup\n\n1. Create a Gentoro account\nVisit the [Gentoro](https://gentoro.com) website to request an account and start using Gentoro services.\n\n2. Create a Gentoro API Key\nOnce you have an account, create an API key to authenticate with the Gentoro services.\n\n3. Define a Bridge\nUsing Gentoro Studio, define your bridge with all the tools and data sources required.\n\n### Integrate Gentoro with Claude\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"gentoro\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@gentoro/mcp-nodejs-server\"\n            ],\n            \"env\": {\n                \"GENTORO_API_KEY\": \"<your api key>\",\n                \"GENTORO_BRIDGE_UID\": \"<your bridge uid>\",\n                \"GENTORO_BASE_URL\": \"<url where gentoro is hosted>\"\n            }\n        }\n    }\n}\n```\n\n",
    "publisher": {
      "id": "gentoro",
      "name": "gentoro",
      "url": "https://github.com/gentoro-GT/mcp-nodejs-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/gentoro-GT/mcp-nodejs-server",
    "distribution": {
      "type": "npm",
      "package": "@gentoro/mcp-nodejs-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@gentoro/mcp-nodejs-server"
      ],
      "env": {
        "GENTORO_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "GENTORO_BRIDGE_UID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "GENTORO_BASE_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "fe07781f-5521-4ad2-b393-628e17a9728d",
    "name": "spences10/mcp-jinaai-reader",
    "description": "mcp-jinaai-reader",
    "fullDescription": "# mcp-jinaai-reader\n\nA Model Context Protocol (MCP) server for integrating Jina.ai's Reader\nAPI with LLMs. This server provides efficient and comprehensive web\ncontent extraction capabilities, optimized for documentation and web\ncontent analysis.\n\n<a href=\"https://glama.ai/mcp/servers/a75afsx9cx\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/a75afsx9cx/badge\" />\n</a>\n\n## Features\n\n- 📚 Advanced web content extraction through Jina.ai Reader API\n- 🚀 Fast and efficient content retrieval\n- 📄 Complete text extraction with preserved structure\n- 🔄 Clean format optimized for LLMs\n- 🌐 Support for various content types including documentation\n- 🏗️ Built on the Model Context Protocol\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-reader\": {\n\t\t\t\"command\": \"node\",\n\t\t\t\"args\": [\"-y\", \"mcp-jinaai-reader\"],\n\t\t\t\"env\": {\n\t\t\t\t\"JINAAI_API_KEY\": \"your-jinaai-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"jinaai-reader\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"JINAAI_API_KEY=your-jinaai-api-key npx mcp-jinaai-reader\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `JINAAI_API_KEY`: Your Jina.ai API key (required)\n\n## API\n\nThe server implements a single MCP tool with configurable parameters:\n\n### read_url\n\nConvert any URL to LLM-friendly text using Jina.ai Reader.\n\nParameters:\n\n- `url` (string, required): URL to process\n- `no_cache` (boolean, optional): Bypass cache for fresh results.\n  Defaults to false\n- `format` (string, optional): Response format (\"json\" or \"stream\").\n  Defaults to \"json\"\n- `timeout` (number, optional): Maximum time in seconds to wait for\n  webpage load\n- `target_selector` (string, optional): CSS selector to focus on\n  specific elements\n- `wait_for_selector` (string, optional): CSS selector to wait for\n  specific elements\n- `remove_selector` (string, optional): CSS selector to exclude\n  specific elements\n- `with_links_summary` (boolean, optional): Gather all links at the\n  end of response\n- `with_images_summary` (boolean, optional): Gather all images at the\n  end of response\n- `with_generated_alt` (boolean, optional): Add alt text to images\n  lacking captions\n- `with_iframe` (boolean, optional): Include iframe content in\n  response\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n4. Run in development mode:\n\n```bash\nnpm run dev\n```\n\n### Publishing\n\n1. Update version in package.json\n2. Build the project:\n\n```bash\nnpm run build\n```\n\n3. Publish to npm:\n\n```bash\nnpm publish\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [Jina.ai Reader API](https://jina.ai)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-jinaai-reader"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-jinaai-reader",
    "distribution": {
      "type": "npm",
      "package": "mcp-jinaai-reader"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-jinaai-reader"
      ],
      "env": {
        "JINAAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ae4a1f9f-e18e-466f-8ac0-20362ca959ad",
    "name": "yosider/cosense-mcp-server",
    "description": "Cosense MCP Server",
    "fullDescription": "# Cosense MCP Server\n\nA MCP server for [Cosense](https://cosen.se).\n\n## Tools\n\nThe following tools are available for interacting with Cosense pages:\n\n- `get_page`: Retrieves a page with the specified title\n- `list_pages`: Lists available pages in the resources\n- `search_pages`: Searches for pages containing the specified query string\n- `insert_lines`: Inserts text after a specified line in a page\n\n## MCP Client Configuration\n\nThe following environment variables are required:\n\n- `COSENSE_PROJECT_NAME`: Project name\n- `COSENSE_SID`: Session ID for authentication\n  - Required for writing to pages and reading private pages\n  - Handle with care as it contains sensitive information\n  - For more details, see [scrapboxlab/connect.sid](https://scrapbox.io/scrapboxlab/connect.sid)\n\n### Run from npm registry\n\n#### JSR registry configuration\n\nThis package depends on [@cosense/std](https://jsr.io/@cosense/std) and [@cosense/types](https://jsr.io/@cosense/types) which are hosted on JSR. Before using npx, you need to configure the JSR registry globally:\n\nFor Linux/macOS:\n\n```bash\necho \"@jsr:registry=https://npm.jsr.io\" >> ~/.npmrc\n```\n\nFor Windows (PowerShell):\n\n```powershell\necho \"@jsr:registry=https://npm.jsr.io\" >> $env:USERPROFILE\\.npmrc\n```\n\nOr if you prefer not to modify global settings, run from source instead (see the section below)\n\n#### Client json configuration\n\nAfter configuring JSR registry, configure your MCP client:\n\n```json\n{\n  \"mcpServers\": {\n    \"cosense-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yosider/cosense-mcp-server\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"your_project_name\",\n        \"COSENSE_SID\": \"your_sid\"\n      }\n    }\n  }\n}\n```\n\n### Run from source\n\n#### Clone and build\n\n```bash\ngit clone https://github.com/yosider/cosense-mcp-server.git\ncd cosense-mcp-server\nnpm install\nnpm run build\n```\n\n#### Client json configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cosense-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"/path/to/cosense-mcp-server\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"your_project_name\",\n        \"COSENSE_SID\": \"your_sid\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspect\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Acknowledgments\n\nThis project is forked from [funwarioisii/cosense-mcp-server](https://github.com/funwarioisii/cosense-mcp-server).\n",
    "publisher": {
      "id": "yosider",
      "name": "yosider",
      "url": "https://github.com/yosider/cosense-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/yosider/cosense-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@yosider/cosense-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@yosider/cosense-mcp-server"
      ],
      "env": {
        "COSENSE_PROJECT_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "COSENSE_SID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "d477abd7-63ff-4eb1-858a-7f27d86f2195",
    "name": "pskill9/hn-server",
    "description": "Hacker News MCP Server",
    "fullDescription": "# Hacker News MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for fetching stories from Hacker News. This server parses the HTML content from news.ycombinator.com and provides structured data for different types of stories (top, new, ask, show, jobs).\n\n## Features\n\n- Fetch different types of stories (top, new, ask, show, jobs)\n- Get structured data including titles, URLs, points, authors, timestamps, and comment counts\n- Configurable limit on number of stories returned\n- Clean error handling and validation\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/pskill9/hn-server\ncd hn-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add to your MCP settings configuration file (location depends on your system):\n\nFor VSCode Claude extension:\n```json\n{\n  \"mcpServers\": {\n    \"hacker-news\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/hn-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\nThe server provides a tool called `get_stories` that can be used to fetch stories from Hacker News.\n\n### Tool: get_stories\n\nParameters:\n- `type` (string): Type of stories to fetch\n  - Options: 'top', 'new', 'ask', 'show', 'jobs'\n  - Default: 'top'\n- `limit` (number): Number of stories to return\n  - Range: 1-30\n  - Default: 10\n\nExample usage:\n```typescript\nuse_mcp_tool with:\nserver_name: \"hacker-news\"\ntool_name: \"get_stories\"\narguments: {\n  \"type\": \"top\",\n  \"limit\": 5\n}\n```\n\nSample output:\n```json\n[\n  {\n    \"title\": \"Example Story Title\",\n    \"url\": \"https://example.com/story\",\n    \"points\": 100,\n    \"author\": \"username\",\n    \"time\": \"2024-12-28T00:03:05\",\n    \"commentCount\": 50,\n    \"rank\": 1\n  },\n  // ... more stories\n]\n```\n\n## Integrating with Claude\n\nTo use this MCP server with Claude, you'll need to:\n\n1. Have the Claude desktop app or VSCode Claude extension installed\n2. Configure the MCP server in your settings\n3. Use Claude's natural language interface to interact with Hacker News\n\n### Configuration\n\nFor the Claude desktop app, add the server configuration to:\n```json\n// ~/Library/Application Support/Claude/claude_desktop_config.json (macOS)\n// %APPDATA%\\Claude\\claude_desktop_config.json (Windows)\n{\n  \"mcpServers\": {\n    \"hacker-news\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/hn-server/build/index.js\"]\n    }\n  }\n}\n```\n\nFor the VSCode Claude extension, add to:\n```json\n// VSCode Settings JSON\n{\n  \"mcpServers\": {\n    \"hacker-news\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/hn-server/build/index.js\"]\n    }\n  }\n}\n```\n\n### Example Interactions\n\nOnce configured, you can interact with Claude using natural language to fetch Hacker News stories. Examples:\n\n- \"Show me the top 5 stories from Hacker News\"\n- \"What are the latest Ask HN posts?\"\n- \"Get me the top Show HN submissions from today\"\n\nClaude will automatically use the appropriate parameters to fetch the stories you want.\n\n![Claude using the Hacker News MCP server](Claude.png)\n\n### Story Object Structure\n\nEach story object contains:\n- `title` (string): The story title\n- `url` (string, optional): URL of the story (may be internal HN URL for text posts)\n- `points` (number): Number of upvotes\n- `author` (string): Username of the poster\n- `time` (string): Timestamp of when the story was posted\n- `commentCount` (number): Number of comments\n- `rank` (number): Position in the list\n\n## Development\n\nThe server is built using:\n- TypeScript\n- Model Context Protocol SDK\n- Axios for HTTP requests\n- Cheerio for HTML parsing\n\nTo modify the server:\n\n1. Make changes to `src/index.ts`\n2. Rebuild:\n```bash\nnpm run build\n```\n\n## Error Handling\n\nThe server includes robust error handling for:\n- Invalid story types\n- Network failures\n- HTML parsing errors\n- Invalid parameter values\n\nErrors are returned with appropriate error codes and descriptive messages.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - feel free to use this in your own projects.\n",
    "publisher": {
      "id": "pskill9",
      "name": "pskill9",
      "url": "https://github.com/pskill9/hn-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/pskill9/hn-server",
    "distribution": {
      "type": "npm",
      "package": "hn-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "hn-server"
      ],
      "env": {}
    }
  },
  {
    "id": "dc736024-3874-44ab-8bfa-81c4620e814a",
    "name": "kaliaboi/mcp-zotero",
    "description": "MCP Zotero",
    "fullDescription": "# MCP Zotero\n\nA Model Context Protocol server for Zotero integration that allows Claude to interact with your Zotero library.\n\n## Setup\n\n1. Get your Zotero credentials:\n\n   ```bash\n   # First, create an API key at https://www.zotero.org/settings/keys\n   # Then use it to get your user ID:\n   curl -H \"Zotero-API-Key: YOUR_API_KEY\" https://api.zotero.org/keys/current\n   ```\n\n   The response will look like:\n\n   ```json\n   {\n     \"userID\": 123456,\n     \"username\": \"your_username\",\n     \"access\": {\n       \"user\": {\n         \"library\": true,\n         \"files\": true,\n         \"notes\": true,\n         \"write\": true\n       }\n     }\n   }\n   ```\n\n   The `userID` value is what you need.\n\n2. Set environment variables:\n\n   ```bash\n   export ZOTERO_API_KEY=\"your-api-key\"\n   export ZOTERO_USER_ID=\"user-id-from-curl\"\n   ```\n\n3. Verify your credentials:\n\n   ```bash\n   # Test that your credentials work:\n   curl -H \"Zotero-API-Key: $ZOTERO_API_KEY\" \\\n        \"https://api.zotero.org/users/$ZOTERO_USER_ID/collections\"\n   ```\n\n   You should see your collections list in the response.\n\n4. Install and run:\n\n   ```bash\n   # Install globally (recommended)\n   npm install -g mcp-zotero\n   mcp-zotero\n\n   # Or run directly with npx\n   npx mcp-zotero\n   ```\n\n## Integration with Claude Desktop\n\nTo use this server with Claude Desktop, add the following to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"mcp-zotero\",\n      \"env\": {\n        \"ZOTERO_API_KEY\": YOUR_API_KEY,\n        \"ZOTERO_USER_ID\": YOUR_USER_ID\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `get_collections`: List all collections in your library\n- `get_collection_items`: Get items in a specific collection\n- `get_item_details`: Get detailed information about a paper\n- `search_library`: Search your entire library\n- `get_recent`: Get recently added papers\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Verify your environment variables are set:\n\n   ```bash\n   echo $ZOTERO_API_KEY\n   echo $ZOTERO_USER_ID\n   ```\n\n2. Check the installation:\n\n   ```bash\n   npm list -g mcp-zotero\n   ```\n\n3. Try reinstalling:\n   ```bash\n   npm uninstall -g mcp-zotero\n   npm install -g mcp-zotero\n   ```\n",
    "publisher": {
      "id": "kaliaboi",
      "name": "kaliaboi",
      "url": "https://github.com/kaliaboi/mcp-zotero"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kaliaboi/mcp-zotero",
    "distribution": {
      "type": "npm",
      "package": "mcp-zotero"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-zotero"
      ],
      "env": {
        "ZOTERO_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ZOTERO_USER_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "13fbd0df-b543-4e8c-bd9a-a0fc899daa7c",
    "name": "r-huijts/rijksmuseum-mcp",
    "description": "Rijksmuseum MCP Server",
    "fullDescription": "# Rijksmuseum MCP Server\n\nA Model Context Protocol (MCP) server that provides access to the Rijksmuseum's collection through natural language interactions. This server enables AI models to explore, analyze, and interact with artworks and collections from the Rijksmuseum.\n\n## Features\n\nThe server provides several tools for interacting with the Rijksmuseum's collection:\n\n### 1. Search Artworks (`search_artwork`)\nSearch and filter artworks using various criteria including:\n- Text-based search\n- Artist name\n- Artwork type\n- Materials and techniques\n- Time periods\n- Colors\n- And more\n\n### 2. Artwork Details (`get_artwork_details`)\nRetrieve comprehensive information about specific artworks, including:\n- Basic details (title, artist, dates)\n- Physical properties\n- Historical context\n- Visual information\n- Curatorial information\n- Exhibition history\n\n### 3. High-Resolution Images (`get_artwork_image`)\nAccess high-resolution image data with deep zoom capabilities:\n- Multiple zoom levels\n- Tile-based image loading\n- Full resolution support\n- Position information\n\n### 4. User Collections (`get_user_sets` & `get_user_set_details`)\nExplore user-created collections:\n- Browse curated sets\n- View thematic groupings\n- Analyze collection patterns\n- Access detailed set information\n\n### 5. Image Viewing (`open_image_in_browser`)\nOpen artwork images directly in your browser for detailed viewing.\n\n### 6. Artist Timeline (`get_artist_timeline`)\nGenerate chronological timelines of artists' works:\n- Track artistic development\n- Analyze periods and styles\n- Study career progression\n\n## Example Use Cases\n\nHere are some example queries you can ask the AI when using this server:\n\n### Artwork Discovery\n```\n\"Show me all paintings by Rembrandt from the 1640s\"\n\"Find artworks that prominently feature the color blue\"\n\"What are the most famous masterpieces in the collection?\"\n\"Search for still life paintings from the Dutch Golden Age\"\n```\n\n### Artwork Analysis\n```\n\"Tell me everything about The Night Watch\"\n\"What are the dimensions and materials used in Van Gogh's Self Portrait?\"\n\"Show me high-resolution details of the brushwork in Vermeer's The Milkmaid\"\n\"Compare the colors used in different versions of The Potato Eaters\"\n```\n\n### Artist Research\n```\n\"Create a timeline of Rembrandt's self-portraits\"\n\"How did Van Gogh's use of color evolve throughout his career?\"\n\"Show me all works by Frans Hals in chronological order\"\n\"What techniques did Jan Steen use in his paintings?\"\n```\n\n### Thematic Exploration\n```\n\"Find all artworks depicting biblical scenes\"\n\"Show me paintings of Amsterdam in the 17th century\"\n\"What artworks feature flowers or still life arrangements?\"\n\"Find portraits that include musical instruments\"\n```\n\n### Collection Analysis\n```\n\"Show me the most popular user-curated collections\"\n\"Find sets that focus on landscape paintings\"\n\"What are the recent additions to the museum's collection?\"\n\"Show me collections featuring works from multiple artists\"\n```\n\n### Visual Details\n```\n\"Let me examine the details in the background of The Night Watch\"\n\"Show me a close-up of the jewelry in Girl with a Pearl Earring\"\n\"Can you display the highest resolution version of The Jewish Bride?\"\n\"I want to study the facial expressions in The Syndics\"\n```\n\n## Getting Started\n\nYou can install this server in two ways:\n\n### 1. Using Claude Desktop with NPM Package\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"rijksmuseum-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-rijksmuseum\"\n      ],\n      \"env\": {\n        \"RIJKSMUSEUM_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\nYou can get an API key from the [Rijksmuseum API Portal](https://data.rijksmuseum.nl/docs/api/).\n\n### 2. From Source\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Add your Rijksmuseum API key to the `.env` file:\n   ```\n   RIJKSMUSEUM_API_KEY=your_api_key_here\n   ```\n5. Then update your Claude configuration file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"rijksmuseum-server\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/rijksmuseum-server/build/index.js\"\n         ],\n         \"env\": {\n           \"RIJKSMUSEUM_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\nMake sure to:\n- Replace `/path/to/rijksmuseum-server` with the actual path to your installation\n- Add your Rijksmuseum API key in the `env` section\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n## Configuration\n\nThe server can be configured through environment variables:\n- `RIJKSMUSEUM_API_KEY`: Your Rijksmuseum API key (required)\n- `PORT`: Server port (default: 3000)\n- `LOG_LEVEL`: Logging level (default: 'info')\n\n## API Documentation\n\nFor detailed information about the Rijksmuseum API endpoints used by this server, visit:\n[Rijksmuseum API Documentation](https://data.rijksmuseum.nl/object-metadata/api/)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests or create issues for bugs and feature requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
    "publisher": {
      "id": "r-huijts",
      "name": "r-huijts",
      "url": "https://github.com/r-huijts/rijksmuseum-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/r-huijts/rijksmuseum-mcp",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-rijksmuseum"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-rijksmuseum"
      ],
      "env": {
        "RIJKSMUSEUM_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "0694cbbb-6e2c-4fbc-9629-9c51d1999f73",
    "name": "felores/placid-mcp-server",
    "description": "Placid.app MCP Server",
    "fullDescription": "# Placid.app MCP Server\n\nAn MCP server implementation for integrating with Placid.app's API. This server provides tools for listing templates and generating images and videos through the Model Context Protocol.\n\n## Features\n\n- List available Placid templates with filtering options\n- Generate images and videos using templates and dynamic content\n- Secure API token management\n- Error handling and validation\n- Type-safe implementation\n\n## Requirements: Node.js\n\n1. Install Node.js (version 18 or higher) and npm from [nodejs.org](https://nodejs.org/)\n2. Verify installation:\n   ```bash\n   node --version\n   npm --version\n   ```\n\n## Installation Options\n\n### NPX Installation\n\nThe quickest way to get started is using npx, justadd the server configuration to your Claude Desktop or Cline settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"placid\": {\n      \"command\": \"npx\",\n      \"args\": [\"@felores/placid-mcp-server\"],\n      \"env\": {\n        \"PLACID_API_TOKEN\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install @felores/placid-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@felores/placid-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @felores/placid-mcp-server --client claude\n```\n\n### Manual Installation\n\nIf you want to contribute to the project or modify the server.\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/felores/placid-mcp-server.git\ncd placid-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Add the server configuration to your Claude Desktop or Cline settings:\n```json\n{\n  \"mcpServers\": {\n    \"placid\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/placid-mcp-server/build/index.js\"],\n      \"env\": {\n        \"PLACID_API_TOKEN\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\nReplace `path/to/placid-mcp-server` with the absolute path to your cloned repository.\n\n## Getting Your Placid API Token\n\n1. Log in to your [Placid.app](https://placid.app/) account\n2. Go to Settings > API\n3. Click on \"Create API Token\"\n4. Give your token a name (e.g., \"MCP Server\")\n5. Copy the generated token\n6. Add the token to your Claude Desktop or Cline configuration as shown in the installation steps above\n\n## Development\n\n```bash\n# Run in development mode with hot reload\nnpm run dev\n\n# Run tests\nnpm test\n```\n\n## Tools\n\n### placid_list_templates\nLists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.\n\n#### Parameters\n- `collection_id` (optional): Filter templates by collection ID\n- `custom_data` (optional): Filter by custom reference data\n- `tags` (optional): Array of tags to filter templates by\n\n#### Response\nReturns an array of templates, each containing:\n- `uuid`: Unique identifier for the template\n- `title`: Template name\n- `thumbnail`: Preview image URL (if available)\n- `layers`: Array of available layers with their names and types\n- `tags`: Array of template tags\n\n### placid_generate_video\nGenerate videos by combining Placid templates with dynamic content like videos, images, and text. For longer videos (>60 seconds processing time), you'll receive a job ID to check status in your Placid dashboard.\n\n#### Parameters\n- `template_id` (required): UUID of the template to use\n- `layers` (required): Object containing dynamic content for template layers\n  - For video layers: `{ \"layerName\": { \"video\": \"https://video-url.com\" } }`\n  - For image layers: `{ \"layerName\": { \"image\": \"https://image-url.com\" } }`\n  - For text layers: `{ \"layerName\": { \"text\": \"Your content\" } }`\n- `audio` (optional): URL to an mp3 audio file\n- `audio_duration` (optional): Set to 'auto' to trim audio to video length\n- `audio_trim_start` (optional): Timestamp of trim start point (e.g. '00:00:45' or '00:00:45.25')\n- `audio_trim_end` (optional): Timestamp of trim end point (e.g. '00:00:55' or '00:00:55.25')\n\n#### Response\nReturns an object containing:\n- `status`: Current status (\"finished\", \"queued\", or \"error\")\n- `video_url`: URL to download the generated video (when status is \"finished\")\n- `job_id`: ID for checking status in Placid dashboard (for longer videos)\n\n#### Example Usage for LLM models\n```json\n{\n  \"template_id\": \"template-uuid\",\n  \"layers\": {\n    \"MEDIA\": { \"video\": \"https://example.com/video.mp4\" },\n    \"PHOTO\": { \"image\": \"https://example.com/photo.jpg\" },\n    \"LOGO\": { \"image\": \"https://example.com/logo.png\" },\n    \"HEADLINE\": { \"text\": \"My Video Title\" }\n  },\n  \"audio\": \"https://example.com/background.mp3\",\n  \"audio_duration\": \"auto\"\n}\n```\n\n### placid_generate_image\nGenerate static images by combining Placid templates with dynamic content like text and images.\n\n#### Parameters\n- `template_id` (required): UUID of the template to use\n- `layers` (required): Object containing dynamic content for template layers\n  - For text layers: `{ \"layerName\": { \"text\": \"Your content\" } }`\n  - For image layers: `{ \"layerName\": { \"image\": \"https://image-url.com\" } }`\n\n#### Response\nReturns an object containing:\n- `status`: \"finished\" when complete\n- `image_url`: URL to download the generated image\n\n#### Example Usage for LLM models\n```json\n{\n  \"template_id\": \"template-uuid\",\n  \"layers\": {\n    \"headline\": { \"text\": \"Welcome to My App\" },\n    \"background\": { \"image\": \"https://example.com/bg.jpg\" }\n  }\n}\n```\n\n## Documentation\n\nFor more detailed information about the Placid API, visit the [Placid API Documentation](https://placid.app/docs/api/).\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "felores",
      "name": "felores",
      "url": "https://github.com/felores/placid-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/felores/placid-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@felores/placid-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@felores/placid-mcp-server"
      ],
      "env": {
        "PLACID_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "1a5e04e7-2390-41e6-a7ac-9e2a9f7938de",
    "name": "gerred/mcp-server-replicate",
    "description": "MCP Server Replicate",
    "fullDescription": "# MCP Server Replicate\n\nA FastMCP server implementation for the Replicate API, providing resource-based access to AI model inference with a focus on image generation.\n\n## Features\n\n- 🖼️ Resource-based image generation and management\n- 🔄 Real-time updates through subscriptions\n- 📝 Template-driven parameter configuration\n- 🔍 Comprehensive model discovery and selection\n- 🪝 Webhook integration for external notifications\n- 🎨 Quality and style presets for optimal results\n- 📊 Progress tracking and status monitoring\n- 🔒 Secure API key management\n\n## Available Prompts\n\nThe server provides several specialized prompts for different tasks:\n\n### Text to Image (Primary)\n\nOur most thoroughly tested and robust prompt. Optimized for generating high-quality images from text descriptions with:\n\n- Detailed style control\n- Quality presets (draft, balanced, quality, extreme)\n- Size and aspect ratio customization\n- Progress tracking and real-time updates\n\nExample:\n\n```\nCreate a photorealistic mountain landscape at sunset with snow-capped peaks, quality level: quality, style: photorealistic\n```\n\n### Other Prompts\n\n- **Image to Image**: Transform existing images (coming soon)\n- **Model Selection**: Get help choosing the right model for your task\n- **Parameter Help**: Understand and configure model parameters\n\n## Prerequisites\n\n- Python 3.11 or higher\n- A Replicate API key (get one at https://replicate.com/account)\n- [UV](https://github.com/astral-sh/uv) for dependency management\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Server Replicate for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gerred/mcp-server-replicate):\n\n```bash\nnpx -y @smithery/cli install @gerred/mcp-server-replicate --client claude\n```\n\n### Installing Manually\nYou can install the package directly from PyPI:\n\n```bash\n# Using UV (recommended)\nuv pip install mcp-server-replicate\n\n# Using UVX for isolated environments\nuvx install mcp-server-replicate\n\n# Using pip\npip install mcp-server-replicate\n```\n\n## Claude Desktop Integration\n\n1. Make sure you have the latest version of Claude Desktop installed\n2. Open your Claude Desktop configuration:\n\n```bash\n# macOS\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\n# Windows\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n3. Add the server configuration using one of these options:\n\n```json\n{\n  \"globalShortcut\": \"Shift+Alt+A\",\n  \"mcpServers\": {\n    \"replicate\": {\n      \"command\": \"uv\",\n      \"args\": [\"tool\", \"run\", \"mcp-server-replicate\"],\n      \"env\": {\n        \"REPLICATE_API_TOKEN\": \"APITOKEN\"\n      },\n      \"cwd\": \"$PATH_TO_REPO\"\n    }\n  }\n}\n```\n\n4. Set your Replicate API key:\n\n```bash\n# Option 1: Set in your environment\nexport REPLICATE_API_TOKEN=your_api_key_here\n\n# Option 2: Create a .env file in your home directory\necho \"REPLICATE_API_TOKEN=your_api_key_here\" > ~/.env\n```\n\n5. Restart Claude Desktop completely\n\nYou should now see the 🔨 icon in Claude Desktop, indicating that the MCP server is available.\n\n## Usage\n\nOnce connected to Claude Desktop, you can:\n\n1. Generate images with natural language:\n\n   ```\n   Create a photorealistic mountain landscape at sunset with snow-capped peaks\n   ```\n\n2. Browse your generations:\n\n   ```\n   Show me my recent image generations\n   ```\n\n3. Search through generations:\n\n   ```\n   Find my landscape generations\n   ```\n\n4. Check generation status:\n   ```\n   What's the status of my last generation?\n   ```\n\n## Troubleshooting\n\n### Server not showing up in Claude Desktop\n\n1. Check the Claude Desktop logs:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n2. Verify your configuration:\n\n- Make sure the path in `claude_desktop_config.json` is absolute\n- Ensure UV is installed and in your PATH\n- Check that your Replicate API key is set\n\n3. Try restarting Claude Desktop\n\nFor more detailed troubleshooting, see our [Debugging Guide](docs/debugging.md).\n\n## Documentation\n\n- [Implementation Plan](PLAN.md)\n- [Contributing Guide](CONTRIBUTING.md)\n- [API Reference](docs/api.md)\n- [Resource System](docs/resources.md)\n- [Template System](docs/templates.md)\n\n## Development\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/gerred/mcp-server-replicate.git\ncd mcp-server-replicate\n```\n\n2. Install development dependencies:\n\n```bash\nuv pip install --system \".[dev]\"\n```\n\n3. Install pre-commit hooks:\n\n```bash\npre-commit install\n```\n\n4. Run tests:\n\n```bash\npytest\n```\n\n## Contributing\n\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "gerred",
      "name": "gerred",
      "url": "https://github.com/gerred/mcp-server-replicate"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/gerred/mcp-server-replicate",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-replicate"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-replicate"
      ],
      "env": {
        "REPLICATE_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "396f09d5-e56a-40d6-baa4-2ddd3fb814fd",
    "name": "qpd-v/mcp-wordcounter",
    "description": "MCP Word Counter",
    "fullDescription": "# MCP Word Counter\n\nA Model Context Protocol server that provides tools for analyzing text documents, including counting words and characters. This server helps LLMs perform text analysis tasks by exposing simple document statistics functionality.\n\n## Features\n\n- Count words in documents\n- Count total characters (including spaces)\n- Count characters excluding spaces\n- Process files directly without exposing content to LLMs\n\n## Installation\n\n```bash\nnpm install mcp-wordcounter\n```\n\n## Usage\n\n### As a CLI tool\n\n```bash\nnpx mcp-wordcounter\n```\n\n### In Claude Desktop\n\nAdd to your Claude Desktop configuration (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-wordcounter\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-wordcounter\"],\n      \"alwaysAllow\": [\"analyze_text\"]\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### analyze_text\n\nCounts words and characters in a text document.\n\nParameters:\n- `filePath` (string, required): Path to the text file to analyze\n\nReturns:\n- Word count\n- Character count (including spaces)\n- Character count (excluding spaces)\n\nExample response:\n```json\n{\n  \"content\": [{\n    \"type\": \"text\",\n    \"text\": \"Analysis Results:\\n• Word count: 150\\n• Character count (including spaces): 842\\n• Character count (excluding spaces): 702\"\n  }]\n}\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run in watch mode during development\nnpm run watch\n\n# Test with MCP Inspector\nnpm run inspector\n```\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
    "publisher": {
      "id": "qpd-v",
      "name": "qpd-v",
      "url": "https://github.com/qpd-v/mcp-wordcounter"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qpd-v/mcp-wordcounter",
    "distribution": {
      "type": "npm",
      "package": "mcp-wordcounter"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-wordcounter"
      ],
      "env": {}
    }
  },
  {
    "id": "a35173aa-51c0-4a07-abac-3e2c0f059f39",
    "name": "anaisbetts/mcp-youtube",
    "description": "YouTube MCP Server",
    "fullDescription": "# YouTube MCP Server\n\nUses `yt-dlp` to download subtitles from YouTube and connects it to claude.ai via [Model Context Protocol](https://modelcontextprotocol.io/introduction). Try it by asking Claude, \"Summarize the YouTube video <<URL>>\". Requires `yt-dlp` to be installed locally e.g. via Homebrew.\n\n### How do I get this working?\n\n1. Install `yt-dlp` (Homebrew and WinGet both work great here)\n1. Now, install this via [mcp-installer](https://github.com/anaisbetts/mcp-installer), use the name `@anaisbetts/mcp-youtube`",
    "publisher": {
      "id": "anaisbetts",
      "name": "anaisbetts",
      "url": "https://github.com/anaisbetts/mcp-youtube"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/anaisbetts/mcp-youtube",
    "distribution": {
      "type": "npm",
      "package": "@anaisbetts/mcp-youtube"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@anaisbetts/mcp-youtube"
      ],
      "env": {}
    }
  },
  {
    "id": "75f49a73-bed1-44f8-b229-c02ec1acaa11",
    "name": "iaptic/mcp-server-iaptic",
    "description": "MCP Server for Iaptic",
    "fullDescription": "# MCP Server for Iaptic\n\nA Model Context Protocol server for interacting with the [Iaptic API](https://www.iaptic.com). This server allows Claude or other AIs to interact with your Iaptic data to answer questions about your customers, purchases, transactions, and statistics.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Iaptic for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-iaptic):\n\n```bash\nnpx -y @smithery/cli install mcp-server-iaptic --client claude\n```\n\n### Manual Installation\n```bash\n# Run directly with npx\nnpx mcp-server-iaptic --api-key YOUR_API_KEY --app-name YOUR_APP_NAME\n\n# Or install globally\nnpm install -g mcp-server-iaptic\nmcp-server-iaptic --api-key YOUR_API_KEY --app-name YOUR_APP_NAME\n```\n\n## Usage with Claude Desktop\n\nAdd to your Claude Desktop configuration file:\n\n```json\n{\n  \"iaptic\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"mcp-server-iaptic\",\n      \"--api-key\", \"your-api-key-here\",\n      \"--app-name\", \"your-app-name-here\"\n    ]\n  }\n}\n```\n\n## Available Tools\n\n### Customers\n- `customer_list`: List customers\n- `customer_get`: Get customer details by ID\n\n### Purchases\n- `purchase_list`: List purchases\n  - `limit`: Maximum number of purchases to return (default: 100, max: 1000)\n  - `offset`: Number of purchases to skip for pagination\n  - `startdate`: Filter purchases after this date (ISO format, e.g. 2024-01-01)\n  - `enddate`: Filter purchases before this date (ISO format, e.g. 2024-12-31)\n  - `customerId`: Filter by customer ID\n- `purchase_get`: Get purchase details by ID\n\n### Transactions\n- `transaction_list`: List transactions with pagination and date filtering\n  - `limit`: Maximum number of transactions to return (default: 100, max: 1000)\n  - `offset`: Number of transactions to skip for pagination\n  - `startdate`: Filter transactions after this date (ISO format, e.g. 2024-01-01)\n  - `enddate`: Filter transactions before this date (ISO format, e.g. 2024-12-31)\n  - `purchaseId`: Filter by purchase ID\n- `transaction_get`: Get transaction details by ID\n\n### Statistics\n- `stats_get`: Get general statistics about transactions and revenue\n- `stats_app`: Get app-specific statistics\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Run production build\nnpm start\n```\n\n## Requirements\n\n- Node.js >= 18\n- An Iaptic account with API credentials\n\n## License\n\nMIT \n",
    "publisher": {
      "id": "iaptic",
      "name": "iaptic",
      "url": "https://github.com/iaptic/mcp-server-iaptic"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/iaptic/mcp-server-iaptic",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-iaptic"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-iaptic",
        "--api-key",
        "$ENVARG_API_KEY",
        "--app-name",
        "$ENVARG_APP_NAME"
      ],
      "env": {
        "ENVARG_API_KEY": {
          "description": "Your Iaptic API key for authentication",
          "type": "input",
          "required": true
        },
        "ENVARG_APP_NAME": {
          "description": "Your Iaptic application name",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "32fc6783-5150-474d-abf7-3fb1a2b4ddc8",
    "name": "blazickjp/web-browser-mcp-server",
    "description": "## ✨ Features",
    "fullDescription": "## ✨ Features\n\n> 🌐 Enable AI assistants to browse and extract content from the web through a simple MCP interface.\n\nThe Web Browser MCP Server provides AI models with the ability to browse websites, extract content, and understand web pages through the Message Control Protocol (MCP). It enables smart content extraction with CSS selectors and robust error handling.\n\n## ✨ Core Features\n\n- 🎯 **Smart Content Extraction**: Target exactly what you need with CSS selectors\n- ⚡ **Lightning Fast**: Built with async processing for optimal performance\n- 📊 **Rich Metadata**: Capture titles, links, and structured content\n- 🛡️ **Robust & Reliable**: Built-in error handling and timeout management\n- 🌍 **Cross-Platform**: Works everywhere Python runs\n\n## 🚀 Quick Start\n\n### Installing via Smithery\n\nTo install Web Browser Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/web-browser-mcp-server):\n\n```bash\nnpx -y @smithery/cli install web-browser-mcp-server --client claude\n```\n\n### Installing Manually\nInstall using uv:\n\n```bash\nuv tool install web-browser-mcp-server\n```\n\nFor development:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/blazickjp/web-browser-mcp-server.git\ncd web-browser-mcp-server\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\n\n# Install with test dependencies\nuv pip install -e \".[test]\"\n```\n\n### 🔌 MCP Integration\n\nAdd this configuration to your MCP client config file:\n\n```json\n{\n    \"mcpServers\": {\n        \"web-browser-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"tool\",\n                \"run\",\n                \"web-browser-mcp-server\"\n            ],\n            \"env\": {\n                \"REQUEST_TIMEOUT\": \"30\"\n            }\n        }\n    }\n}\n```\n\nFor Development:\n\n```json\n{\n    \"mcpServers\": {\n        \"web-browser-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"path/to/cloned/web-browser-mcp-server\",\n                \"run\",\n                \"web-browser-mcp-server\"\n            ],\n            \"env\": {\n                \"REQUEST_TIMEOUT\": \"30\"\n            }\n        }\n    }\n}\n```\n\n## 💡 Available Tools\n\nThe server provides a powerful web browsing tool:\n\n### browse_webpage\nBrowse and extract content from web pages with optional CSS selectors:\n\n```python\n# Basic webpage fetch\nresult = await call_tool(\"browse_webpage\", {\n    \"url\": \"https://example.com\"\n})\n\n# Target specific content with CSS selectors\nresult = await call_tool(\"browse_webpage\", {\n    \"url\": \"https://example.com\",\n    \"selectors\": {\n        \"headlines\": \"h1, h2\",\n        \"main_content\": \"article.content\",\n        \"navigation\": \"nav a\"\n    }\n})\n```\n\n## ⚙️ Configuration\n\nConfigure through environment variables:\n\n| Variable | Purpose | Default |\n|----------|---------|---------|\n| `REQUEST_TIMEOUT` | Webpage request timeout in seconds | 30 |\n\n## 🧪 Testing\n\nRun the test suite:\n\n```bash\npython -m pytest\n```\n\n## 📄 License\n\nReleased under the MIT License. See the LICENSE file for details.\n\n---\n\n<div align=\"center\">\n\nMade with ❤️ by the Pear Labs Team\n\n<a href=\"https://glama.ai/mcp/servers/04dtxi5i5n\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/04dtxi5i5n/badge\" alt=\"Web Browser MCP Server\" /></a>\n</div>",
    "publisher": {
      "id": "blazickjp",
      "name": "blazickjp",
      "url": "https://github.com/blazickjp/web-browser-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/blazickjp/web-browser-mcp-server",
    "distribution": {
      "type": "pip",
      "package": "web-browser-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "web-browser-mcp-server"
      ],
      "env": {
        "REQUEST_TIMEOUT": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "00456189-176f-45f7-8152-16e0a012d566",
    "name": "Kush36Agrawal/Video_Editor_MCP",
    "description": "Video Editor MCP Server",
    "fullDescription": "# Video Editor MCP Server\n\nA powerful video editing MCP server that leverages FFmpeg to perform video editing operations through natural language commands.\n\n## Components\n\n### Tools\n\nThe server implements one main tool:\n\n* `execute_ffmpeg`: Executes FFmpeg commands with progress tracking\n  * Takes a command string as input\n  * Validates and executes FFmpeg operations\n  * Reports real-time progress during processing\n  * Handles errors and provides detailed feedback\n  * Supports all FFmpeg operations including:\n    - Trimming/cutting\n    - Merging videos\n    - Converting formats\n    - Adjusting speed\n    - Adding audio tracks\n    - Extracting audio\n    - Adding subtitles\n    - Basic filters (brightness, contrast, etc.)\n\n## Configuration\n\n### Prerequisites\n\n1. FFmpeg must be installed and accessible in your system PATH\n2. Python 3.9 or higher\n3. Required Python packages:\n   ```\n   mcp\n   httpx\n   ```\n\n### Installation\n\n1. Install FFmpeg if not already installed:\n   ```bash\n   # On macOS with Homebrew\n   brew install ffmpeg\n\n   # On Windows with Chocolatey\n   choco install ffmpeg\n\n   # On Ubuntu/Debian\n   sudo apt install ffmpeg\n   ```\n\n2. Install the video editor package:\n   ```bash\n   uv add video-editor\n   ```\n\n### Claude Desktop Integration\n\nConfigure in your Claude Desktop config file:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"video-editor\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"video-editor\"]\n    }\n  }\n}\n```\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies:\n   ```bash\n   uv sync\n   ```\n\n2. Build package:\n   ```bash\n   uv build\n   ```\n\n3. Publish to PyPI:\n   ```bash\n   uv publish\n   ```\n\nNote: Set PyPI credentials via:\n* Token: `--token` or `UV_PUBLISH_TOKEN`\n* Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nFor the best debugging experience, use the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/video_editor run video-editor\n```\n\n### Example Usage\n\nOnce connected to Claude Desktop, you can make natural language requests like:\n\n1. \"Trim video.mp4 from 1:30 to 2:45\"\n2. \"Convert input.mp4 to WebM format\"\n3. \"Speed up video.mp4 by 2x\"\n4. \"Merge video1.mp4 and video2.mp4\"\n5. \"Extract audio from video.mp4\"\n6. \"Add subtitles.srt to video.mp4\"\n\nThe server will:\n1. Parse your request\n2. Generate the appropriate FFmpeg command\n3. Execute it with progress tracking\n4. Provide feedback on completion\n\n## Error Handling\n\nThe server includes robust error handling for:\n- Invalid input files\n- Malformed FFmpeg commands\n- Runtime execution errors\n- Progress tracking issues\n\nAll errors are reported back to the client with detailed messages for debugging.\n\n## Security Considerations\n\n- Only processes files in explicitly allowed directories\n- Validates FFmpeg commands before execution\n- Sanitizes all input parameters\n- Reports detailed error messages for security-related issues\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n1. Fork the repository\n2. Create your feature branch\n3. Make your changes\n4. Submit a pull request\n\n",
    "publisher": {
      "id": "Kush36Agrawal",
      "name": "Kush36Agrawal",
      "url": "https://github.com/Kush36Agrawal/Video_Editor_MCP"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Kush36Agrawal/Video_Editor_MCP",
    "distribution": {
      "type": "pip",
      "package": "video-editor"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "video-editor"
      ],
      "env": {}
    }
  },
  {
    "id": "3d34fce6-1687-44e8-8952-b20d7da36507",
    "name": "spences10/mcp-duckduckgo-search",
    "description": "mcp-duckduckgo-search",
    "fullDescription": "# mcp-duckduckgo-search\n\nA Model Context Protocol (MCP) server for integrating DuckDuckGo\nsearch capabilities with LLMs. This server provides comprehensive web\nsearch functionality with support for various result types and\nfiltering options.\n\n<a href=\"https://glama.ai/mcp/servers/v99lwtriyk\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/v99lwtriyk/badge\" />\n</a>\n\n## Features\n\n- 🔍 Comprehensive web search using DuckDuckGo's search engine\n- 📊 Rich result types including:\n  - Knowledge graph information\n  - Organic search results\n  - News articles\n  - Video content\n  - Image results\n  - Related searches\n- 🌍 Region-specific search support\n- 🛡️ Configurable safe search levels\n- 📅 Date-based filtering options\n- 📄 Pagination support\n- 💾 Built-in result caching\n- 🔒 Safe search options (off, moderate, strict)\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-duckduckgo-search\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-duckduckgo-search\"],\n\t\t\t\"env\": {\n\t\t\t\t\"SERPAPI_KEY\": \"your-serpapi-api-key\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-duckduckgo-search\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"source ~/.nvm/nvm.sh && SERPAPI_KEY=your-serpapi-api-key /home/username/.nvm/versions/node/v20.12.1/bin/npx mcp-duckduckgo-search\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variable:\n\n- `SERPAPI_KEY`: Your SerpAPI key (required)\n\n## API\n\nThe server implements a single MCP tool with configurable parameters:\n\n### ddg_search\n\nPerform web searches using the DuckDuckGo search engine.\n\nParameters:\n\n- `query` (string, required): Search query\n- `region` (string, optional): Region code (e.g., us-en, uk-en)\n  (default: us-en)\n- `safe_search` (string, optional): Safe search level (off, moderate,\n  strict) (default: moderate)\n- `date_filter` (string, optional): Filter results by date:\n  - 'd': past day\n  - 'w': past week\n  - 'm': past month\n  - 'y': past year\n  - Custom range: '2023-01-01..2023-12-31'\n- `start` (number, optional): Result offset for pagination\n- `no_cache` (boolean, optional): Bypass cache for fresh results\n  (default: false)\n\nResponse includes:\n\n- Knowledge graph data when available\n- Organic search results\n- News articles\n- Video content\n- Image results\n- Related searches\n- Search metadata\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\nThe project uses changesets for version management. To publish:\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [DuckDuckGo](https://duckduckgo.com) through\n  [SerpAPI](https://serpapi.com)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-duckduckgo-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-duckduckgo-search",
    "distribution": {
      "type": "npm",
      "package": "mcp-duckduckgo-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-duckduckgo-search"
      ],
      "env": {
        "SERPAPI_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "57200838-42a4-4085-ab11-f78c8f9f386d",
    "name": "burningion/video-editing-mcp",
    "description": "Video Editor MCP server",
    "fullDescription": "# Video Editor MCP server\n \nUpload, edit, search, and generate videos from everyone's favorite LLM and [Video Jungle](https://www.video-jungle.com/).\n\nYou'll need to sign up for an account at [Video Jungle](https://app.video-jungle.com/register) in order to use this tool, and add your API key.\n\n## Components\n\n### Resources\n\nThe server implements an interface to upload, generate, and edit videos with:\n- Custom vj:// URI scheme for accessing individual videos and projects\n- Each project resource has a name, description\n- Search results are returned with metadata about what is in the video, and when, allowing for edit generation directly\n\n### Prompts\n\nComing soon.\n\n### Tools\n\nThe server implements a few tools:\n- add-video: Add a video from a URL\n  - Returns an vj:// URI to reference the Video file\n- search-videos: Search videos using embeddings\n  - Returns video matches based upon embeddings and keywords\n- generate-edit-from-videos\n  - Generates a rendered video edit from a set of video files\n- generate-edit-from-single-video\n  - Generate an edit from a single input video file\n\n### Using Tools in Practice\n\nIn order to use the tools, you'll need to sign up for Video Jungle and add your API key.\n\n**add-video**\n\nHere's an example prompt to invoke the `add-video` tool:\n\n```\ncan you download the video at https://www.youtube.com/shorts/RumgYaH5XYw and name it fly traps?\n```\n\nThis will download a video from a URL, add it to your library, and analyze it for retrieval later. Analysis is multi-modal, so both audio and visual components can be queried against.\n\n**search-videos**\n\nOnce you've got a video downloaded and analyzed, you can then do queries on it using the `search-videos` tool:\n\n```\ncan you search my videos for fly traps?\n```\n\nSearch results contain relevant metadata for generating a video edit according to details discovered in the initial analysis.\n\n**search-local-videos**\n\nYou must set the environment variable `LOAD_PHOTOS_DB=1` in order to use this tool, as it will make Claude prompt to access your files on your local machine.\n\nOnce that's done, you can search through your Photos app for videos that exist on your phone, using Apple's tags.\n\nIn my case, when I search for \"Skateboard\", I get 1903 video files.\n\n```\ncan you search my local video files for Skateboard?\n```\n\n**generate-edit-from-videos**\n\nFinally, you can use these search results to generate an edit:\n\n```\ncan you create an edit of all the times the video says \"fly trap\"?\n```\n\n(Currently), the video edits tool relies on the context within the current chat. \n\n**generate-edit-from-single-video**\n\nFinally, you can cut down an edit from a single, existing video:\n\n```\ncan you create an edit of all the times this video says the word \"fly trap\"?\n```\n\n## Configuration\n\nYou must login to [Video Jungle settings](https://app.video-jungle.com/profile/settings), and get your [API key](https://app.video-jungle.com/profile/settings). Then, use this to start Video Jungle MCP:\n\n```bash\n$ uv run video-editor-mcp YOURAPIKEY\n```\n\nTo allow this MCP server to search your Photos app on MacOS:\n\n```\n$ LOAD_PHOTOS_DB=1 uv run video-editor-mcp YOURAPIKEY\n```\n## Quickstart\n\n### Install\n\n#### Installing via Smithery\n\nTo install Video Editor for Claude Desktop automatically via [Smithery](https://smithery.ai/server/video-editor-mcp):\n\n```bash\nnpx -y @smithery/cli install video-editor-mcp --client claude\n```\n\n#### Claude Desktop\n\nYou'll need to adjust your `claude_desktop_config.json` manually:\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n<details>\n  <summary>Published Server Configuration</summary>\n  \n ```json\n  \"mcpServers\": {\n    \"video-editor-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"video-editor-mcp\",\n        \"YOURAPIKEY\"\n      ]\n    }\n  }\n  ```\n</details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n ```json\n  \"mcpServers\": {\n    \"video-editor-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/YOURDIRECTORY/video-editor-mcp\",\n        \"run\",\n        \"video-editor-mcp\",\n        \"YOURAPIKEY\"\n      ]\n    }\n  }\n  ```\n\n  With local Photos app access enabled (search your Photos app):\n\n  ```json\n    \"video-jungle-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/<PATH_TO>/video-jungle-mcp\",\n        \"run\",\n        \"video-editor-mcp\",\n        \"<YOURAPIKEY>\"\n      ],\n     \"env\": {\n\t      \"LOAD_PHOTOS_DB\": \"1\"\n      }\n    },\n  ```\n\n</details>\n\nBe sure to replace the directories with the directories you've placed the repository in on **your** computer.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n(Be sure to replace `YOURDIRECTORY` and `YOURAPIKEY` with the directory this repo is in, and your Video Jungle API key, found in the settings page.)\n\n```bash\nnpx @modelcontextprotocol/inspector uv run --directory /Users/YOURDIRECTORY/video-editor-mcp video-editor-mcp YOURAPIKEY\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nAdditionally, I've added logging to `app.log` in the project directory. You can add logging to diagnose API calls via a:\n\n```\nlogging.info(\"this is a test log\")\n```\n\nA reasonable way to follow along as you're workin on the project is to open a terminal session and do a:\n\n```bash\n$ tail -n 90 -f app.log\n```\n",
    "publisher": {
      "id": "burningion",
      "name": "burningion",
      "url": "https://github.com/burningion/video-editing-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/burningion/video-editing-mcp",
    "distribution": {
      "type": "pip",
      "package": "video-editor-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "video-editor-mcp",
        "$ENVARG_API_KEY"
      ],
      "env": {
        "LOAD_PHOTOS_DB": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "ENVARG_API_KEY": {
          "description": "Video Jungle API key from app.video-jungle.com/profile/settings",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "cb57c998-5f18-4281-8b20-860a9e8a4656",
    "name": "BurtTheCoder/mcp-shodan",
    "description": "Shodan MCP Server",
    "fullDescription": "# Shodan MCP Server\n\nA Model Context Protocol (MCP) server for querying the [Shodan API](https://shodan.io) and [Shodan CVEDB](https://cvedb.shodan.io). This server provides comprehensive access to Shodan's network intelligence and security services, including IP reconnaissance, DNS operations, vulnerability tracking, and device discovery. All tools provide structured, formatted output for easy analysis and integration.\n\n<a href=\"https://glama.ai/mcp/servers/79uakvikcj\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/79uakvikcj/badge\" /></a>\n\n## Quick Start (Recommended)\n\n### Installing via Smithery\n\nTo install Shodan Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@burtthecoder/mcp-shodan):\n\n```bash\nnpx -y @smithery/cli install @burtthecoder/mcp-shodan --client claude\n```\n\n### Installing Manually\n1. Install the server globally via npm:\n```bash\nnpm install -g @burtthecoder/mcp-shodan\n```\n\n2. Add to your Claude Desktop configuration file:\n```json\n{\n  \"mcpServers\": {\n    \"shodan\": {\n      \"command\": \"mcp-shodan\",\n      \"env\": {\n        \"SHODAN_API_KEY\": \"your-shodan-api-key\"\n      }\n    }\n  }\n}\n```\n\nConfiguration file location:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Restart Claude Desktop\n\n## Alternative Setup (From Source)\n\nIf you prefer to run from source or need to modify the code:\n\n1. Clone and build:\n```bash\ngit clone https://github.com/BurtTheCoder/mcp-shodan.git\ncd mcp-shodan\nnpm install\nnpm run build\n```\n\n2. Add to your Claude Desktop configuration:\n```json\n{\n  \"mcpServers\": {\n    \"shodan\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-shodan/build/index.js\"],\n      \"env\": {\n        \"SHODAN_API_KEY\": \"your-shodan-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Features\n\n- **Network Reconnaissance**: Query detailed information about IP addresses, including open ports, services, and vulnerabilities\n- **DNS Operations**: Forward and reverse DNS lookups for domains and IP addresses\n- **Vulnerability Intelligence**: Access to Shodan's CVEDB for detailed vulnerability information, CPE lookups, and product-specific CVE tracking\n- **Device Discovery**: Search Shodan's database of internet-connected devices with advanced filtering\n\n## Tools\n\n### 1. IP Lookup Tool\n- Name: `ip_lookup`\n- Description: Retrieve comprehensive information about an IP address, including geolocation, open ports, running services, SSL certificates, hostnames, and cloud provider details if available\n- Parameters:\n  * `ip` (required): IP address to lookup\n- Returns:\n  * IP Information (address, organization, ISP, ASN)\n  * Location (country, city, coordinates)\n  * Services (ports, protocols, banners)\n  * Cloud Provider details (if available)\n  * Associated hostnames and domains\n  * Tags\n\n### 2. Shodan Search Tool\n- Name: `shodan_search`\n- Description: Search Shodan's database of internet-connected devices\n- Parameters:\n  * `query` (required): Shodan search query\n  * `max_results` (optional, default: 10): Number of results to return\n- Returns:\n  * Search summary with total results\n  * Country-based distribution statistics\n  * Detailed device information including:\n    - Basic information (IP, organization, ISP)\n    - Location data\n    - Service details\n    - Web server information\n    - Associated hostnames and domains\n\n### 3. CVE Lookup Tool\n- Name: `cve_lookup`\n- Description: Query detailed vulnerability information from Shodan's CVEDB\n- Parameters:\n  * `cve` (required): CVE identifier in format CVE-YYYY-NNNNN (e.g., CVE-2021-44228)\n- Returns:\n  * Basic Information (ID, published date, summary)\n  * Severity Scores:\n    - CVSS v2 and v3 with severity levels\n    - EPSS probability and ranking\n  * Impact Assessment:\n    - KEV status\n    - Proposed mitigations\n    - Ransomware associations\n  * Affected products (CPEs)\n  * References\n\n### 4. DNS Lookup Tool\n- Name: `dns_lookup`\n- Description: Resolve domain names to IP addresses using Shodan's DNS service\n- Parameters:\n  * `hostnames` (required): Array of hostnames to resolve\n- Returns:\n  * DNS resolutions mapping hostnames to IPs\n  * Summary of total lookups and queried hostnames\n\n### 5. Reverse DNS Lookup Tool\n- Name: `reverse_dns_lookup`\n- Description: Perform reverse DNS lookups to find hostnames associated with IP addresses\n- Parameters:\n  * `ips` (required): Array of IP addresses to lookup\n- Returns:\n  * Reverse DNS resolutions mapping IPs to hostnames\n  * Summary of total lookups and results\n\n### 6. CPE Lookup Tool\n- Name: `cpe_lookup`\n- Description: Search for Common Platform Enumeration (CPE) entries by product name\n- Parameters:\n  * `product` (required): Name of the product to search for\n  * `count` (optional, default: false): If true, returns only the count of matching CPEs\n  * `skip` (optional, default: 0): Number of CPEs to skip (for pagination)\n  * `limit` (optional, default: 1000): Maximum number of CPEs to return\n- Returns:\n  * When count is true: Total number of matching CPEs\n  * When count is false: List of CPEs with pagination details\n\n### 7. CVEs by Product Tool\n- Name: `cves_by_product`\n- Description: Search for vulnerabilities affecting specific products or CPEs\n- Parameters:\n  * `cpe23` (optional): CPE 2.3 identifier (format: cpe:2.3:part:vendor:product:version)\n  * `product` (optional): Name of the product to search for CVEs\n  * `count` (optional, default: false): If true, returns only the count of matching CVEs\n  * `is_kev` (optional, default: false): If true, returns only CVEs with KEV flag set\n  * `sort_by_epss` (optional, default: false): If true, sorts CVEs by EPSS score\n  * `skip` (optional, default: 0): Number of CVEs to skip (for pagination)\n  * `limit` (optional, default: 1000): Maximum number of CVEs to return\n  * `start_date` (optional): Start date for filtering CVEs (format: YYYY-MM-DDTHH:MM:SS)\n  * `end_date` (optional): End date for filtering CVEs (format: YYYY-MM-DDTHH:MM:SS)\n- Notes:\n  * Must provide either cpe23 or product, but not both\n  * Date filtering uses published time of CVEs\n- Returns:\n  * Query information\n  * Results summary with pagination details\n  * Detailed vulnerability information including:\n    - Basic information\n    - Severity scores\n    - Impact assessments\n    - References\n\n## Requirements\n\n- Node.js (v18 or later)\n- A valid [Shodan API Key](https://account.shodan.io/)\n\n## Troubleshooting\n\n### API Key Issues\n\nIf you see API key related errors (e.g., \"Request failed with status code 401\"):\n\n1. Verify your API key:\n   - Must be a valid Shodan API key from your [account settings](https://account.shodan.io/)\n   - Ensure the key has sufficient credits/permissions for the operation\n   - Check for extra spaces or quotes around the key in the configuration\n   - Verify the key is correctly set in the SHODAN_API_KEY environment variable\n\n2. Common Error Codes:\n   - 401 Unauthorized: Invalid API key or missing authentication\n   - 402 Payment Required: Out of query credits\n   - 429 Too Many Requests: Rate limit exceeded\n\n3. Configuration Steps:\n   a. Get your API key from [Shodan Account](https://account.shodan.io/)\n   b. Add it to your configuration file:\n      ```json\n      {\n        \"mcpServers\": {\n          \"shodan\": {\n            \"command\": \"mcp-shodan\",\n            \"env\": {\n              \"SHODAN_API_KEY\": \"your-actual-api-key-here\"\n            }\n          }\n        }\n      }\n      ```\n   c. Save the config file\n   d. Restart Claude Desktop\n\n4. Testing Your Key:\n   - Try a simple query first (e.g., dns_lookup for \"google.com\")\n   - Check your [Shodan account dashboard](https://account.shodan.io/) for credit status\n   - Verify the key works directly with curl:\n     ```bash\n     curl \"https://api.shodan.io/dns/resolve?hostnames=google.com&key=your-api-key\"\n     ```\n\n### Module Loading Issues\n\nIf you see module loading errors:\n1. For global installation: Use the simple configuration shown in Quick Start\n2. For source installation: Ensure you're using Node.js v18 or later\n\n## Development\n\nTo run in development mode with hot reloading:\n```bash\nnpm run dev\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Invalid API keys\n- Rate limiting\n- Network errors\n- Invalid input parameters\n- Invalid CVE formats\n- Invalid CPE lookup parameters\n- Invalid date formats\n- Mutually exclusive parameter validation\n\n## Version History\n\n- v1.0.12: Added reverse DNS lookup and improved output formatting\n- v1.0.7: Added CVEs by Product search functionality and renamed vulnerabilities tool to cve_lookup\n- v1.0.6: Added CVEDB integration for enhanced CVE lookups and CPE search functionality\n- v1.0.0: Initial release with core functionality\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "burtthecoder",
      "name": "burtthecoder",
      "url": "https://github.com/BurtTheCoder/mcp-shodan"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/BurtTheCoder/mcp-shodan",
    "distribution": {
      "type": "npm",
      "package": "@burtthecoder/mcp-shodan"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@burtthecoder/mcp-shodan"
      ],
      "env": {
        "SHODAN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "f38f2635-8c99-4fd0-aebf-a479ff9bf7c3",
    "name": "kevinwatt/mcp-webhook",
    "description": "MCP Webhook Server",
    "fullDescription": "# MCP Webhook Server\n\nAn MCP server for posting messages to webhooks.\n\n## Installation\n\n```bash\nnpm install @kevinwatt/mcp-webhook\n```\n\n## Configuration\n\nAdd the following to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"webhook\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@kevinwatt/mcp-webhook\"\n      ],\n      \"env\": {\n        \"WEBHOOK_URL\": \"your-webhook-url\"\n      },\n      \"alwaysAllow\": [\n        \"send_message\"\n      ]\n    }\n  }\n}\n```\n\n## Features\n\n### send_message\n\nSends a message to webhook endpoint.\n\nParameters:\n- `content`: Message content (required)\n- `username`: Display name (optional)\n- `avatar_url`: Avatar URL (optional)\n\nExample:\n```typescript\n<use_mcp_tool>\n<server_name>webhook</server_name>\n<tool_name>send_message</tool_name>\n<arguments>\n{\n  \"content\": \"Test message\",\n  \"username\": \"Custom Name\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## Development\n\nThis project uses GitHub Actions for continuous integration and automated publishing to npm. When you push a new version tag (e.g., `v1.0.0`), it will automatically:\n\n1. Build the package\n2. Run tests\n3. Publish to npm\n4. Create a GitHub release\n\nFor more details about the release process, see [CHANGELOG.md](./CHANGELOG.md).\n\n## License\n\nMIT\n\n## Author\n\nkevinwatt\n",
    "publisher": {
      "id": "kevinwatt",
      "name": "kevinwatt",
      "url": "https://github.com/kevinwatt/mcp-webhook"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kevinwatt/mcp-webhook",
    "distribution": {
      "type": "npm",
      "package": "@kevinwatt/mcp-webhook"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kevinwatt/mcp-webhook"
      ],
      "env": {
        "WEBHOOK_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5d2319a0-f9ac-4e7f-a87a-50ba29eba727",
    "name": "jonathanfischer97/juliadoc-mcp",
    "description": "Julia Documentation MCP Server ",
    "fullDescription": "# Julia Documentation MCP Server \n\nAn MCP server that efficiently serves context to Claude Desktop about Julia documentation and source code.\n\n## Features\n\n- Get documentation for Julia packages, modules, types, functions, and methods\n- View source code for Julia functions, types, and methods\n- Built-in caching with 5-minute TTL\n- Proper error handling for Julia-specific errors\n\n## Tools\n\n### `get-doc`\nGets Julia documentation for a package, module, type, function, or method.\n- Parameter: `path` (string) - Path to Julia object (e.g., 'Base.sort', 'AbstractArray')\n\n### `get-source`\nGets Julia source code for a function, type, or method.\n- Parameter: `path` (string) - Path to Julia object (e.g., 'Base.sort', 'AbstractArray')\n\n## Requirements\n\n- Node.js 16 or higher\n- Julia 1.9 or higher installed and accessible in PATH\n- Claude Desktop\n\n## Configuration\n\nAdd to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"juliadoc\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@jonathanfischer97/server-juliadoc\"\n      ],\n      \"env\": {\n        \"JULIA_PROJECT\": \"/path/to/your/julia/project\"\n      }\n    }\n  }\n}\n```\n\nThe server will use:\n- Your specified Julia project if `JULIA_PROJECT` is set in the config\n- The default global Julia environment if no project is specified\n- Your system's default Julia installation (must be accessible in PATH)\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/jonathanfischer97/juliadoc-mcp.git\ncd juliadoc-mcp\n\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n\n# Start server locally\nnpm start\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\nCredit goes to [mrjoshuak/godoc-mcp](https://github.com/mrjoshuak/godoc-mcp) for inspiring this project\n\n## License\n\nMIT License - see LICENSE file for details\n\n\n",
    "publisher": {
      "id": "jonathanfischer97",
      "name": "jonathanfischer97",
      "url": "https://github.com/jonathanfischer97/juliadoc-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/jonathanfischer97/juliadoc-mcp",
    "distribution": {
      "type": "npm",
      "package": "@jonathanfischer97/server-juliadoc"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@jonathanfischer97/server-juliadoc"
      ],
      "env": {
        "JULIA_PROJECT": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "1ffb360c-cf76-43a5-89b7-d9039ba85855",
    "name": "spences10/mcp-memory-libsql",
    "description": "mcp-memory-libsql",
    "fullDescription": "# mcp-memory-libsql\n\nA high-performance, persistent memory system for the Model Context\nProtocol (MCP) powered by libSQL. This server provides vector search\ncapabilities and efficient knowledge storage using libSQL as the\nbacking store.\n\n## Features\n\n- 🚀 High-performance vector search using libSQL\n- 💾 Persistent storage of entities and relations\n- 🔍 Semantic search capabilities\n- 🔄 Knowledge graph management\n- 🌐 Compatible with local and remote libSQL databases\n- 🔒 Secure token-based authentication for remote databases\n\n## Configuration\n\nThis server is designed to be used as part of an MCP configuration.\nHere are examples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-memory-libsql\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-memory-libsql\"],\n\t\t\t\"env\": {\n\t\t\t\t\"LIBSQL_URL\": \"file:/path/to/your/database.db\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor a detailed guide on setting up this server with Claude Desktop in\nWSL, see\n[Getting MCP Server Working with Claude Desktop in WSL](https://scottspence.com/posts/getting-mcp-server-working-with-claude-desktop-in-wsl).\n\nAdd this to your Claude Desktop configuration for WSL environments:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-memory-libsql\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"source ~/.nvm/nvm.sh && LIBSQL_URL=file:/path/to/database.db /home/username/.nvm/versions/node/v20.12.1/bin/npx mcp-memory-libsql\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n### Database Configuration\n\nThe server supports both local SQLite and remote libSQL databases\nthrough the LIBSQL_URL environment variable:\n\nFor local SQLite databases:\n\n```json\n{\n\t\"env\": {\n\t\t\"LIBSQL_URL\": \"file:/path/to/database.db\"\n\t}\n}\n```\n\nFor remote libSQL databases (e.g., Turso):\n\n```json\n{\n\t\"env\": {\n\t\t\"LIBSQL_URL\": \"libsql://your-database.turso.io\",\n\t\t\"LIBSQL_AUTH_TOKEN\": \"your-auth-token\"\n\t}\n}\n```\n\nNote: When using WSL, ensure the database path uses the Linux\nfilesystem format (e.g., `/home/username/...`) rather than Windows\nformat.\n\nBy default, if no URL is provided, it will use `file:/memory-tool.db`\nin the current directory.\n\n## API\n\nThe server implements the standard MCP memory interface with\nadditional vector search capabilities:\n\n- Entity Management\n  - Create/Update entities with embeddings\n  - Delete entities\n  - Search entities by similarity\n- Relation Management\n  - Create relations between entities\n  - Delete relations\n  - Query related entities\n\n## Architecture\n\nThe server uses a libSQL database with the following schema:\n\n- Entities table: Stores entity information and embeddings\n- Relations table: Stores relationships between entities\n- Vector search capabilities implemented using libSQL's built-in\n  vector operations\n\n## Development\n\n### Publishing\n\nDue to npm 2FA requirements, publishing needs to be done manually:\n\n1. Create a changeset (documents your changes):\n\n```bash\npnpm changeset\n```\n\n2. Version the package (updates version and CHANGELOG):\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm (will prompt for 2FA code):\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please read our contributing guidelines\nbefore submitting pull requests.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Powered by [libSQL](https://github.com/tursodatabase/libsql)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-memory-libsql"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-memory-libsql",
    "distribution": {
      "type": "npm",
      "package": "mcp-memory-libsql"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-memory-libsql"
      ],
      "env": {
        "LIBSQL_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "9b2acc5d-6ce8-49b4-b84c-4f24b733fa03",
    "name": "apify/mcp-server-rag-web-browser",
    "description": "Model Context Protocol (MCP) Server for the RAG Web Browser Actor 🌐",
    "fullDescription": "# Model Context Protocol (MCP) Server for the RAG Web Browser Actor 🌐\n\nImplementation of an MCP server for the [RAG Web Browser Actor](https://apify.com/apify/rag-web-browser).\nThis Actor serves as a web browser for large language models (LLMs) and RAG pipelines, similar to a web search in ChatGPT.\n\n<a href=\"https://glama.ai/mcp/servers/sr8xzdi3yv\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/sr8xzdi3yv/badge\" alt=\"mcp-server-rag-web-browser MCP server\" /></a>\n\n## 🔄 What is model context protocol?\n\nThe Model Context Protocol (MCP) enables AI applications (and AI agents), such as Claude Desktop, to connect to external tools and data sources.\nMCP is an open protocol that enables secure, controlled interactions between AI applications, AI Agents, and local or remote resources.\n\n## 🎯 What does this MCP server do?\n\nThe RAG Web Browser Actor allows an AI assistant to:\n- Perform web search, scrape the top N URLs from the results, and return their cleaned content as Markdown\n- Fetch a single URL and return its content as Markdown\n\n## 🧱 Components\n\n### Tools\n\n- **search**: Query Google Search, scrape the top N URLs from the results, and returns their cleaned content as Markdown.\n  - Arguments:\n    - `query` (string, required): Search term or URL\n    - `max_results` (number, optional): Maximum number of search results to scrape (default: 1)\n\n### Prompts\n\n- **search**: Search phrase or a URL at Google and return crawled web pages as text or Markdown\n  - Arguments:\n    - `query` (string, required): Search term or URL\n    - `max_results` (number, optional): Maximum number of search results to scrape (default: 1)\n\n### Resources\n\nThe server does not provide any resources and prompts.\n\n## 🛠️ Configuration\n\n### Prerequisites\n\n- MacOS or Windows\n- The latest version of Claude Desktop must be installed (or another MCP client)\n- [Node.js](https://nodejs.org/en) (v18 or higher)\n- [Apify API Token](https://docs.apify.com/platform/integrations/api#api-token) (`APIFY_API_TOKEN`)\n\n### Install\n\nFollow the steps below to set up and run the server on your local machine:\nFirst, clone the repository using the following command:\n\n```bash\ngit clone git@github.com:apify/mcp-server-rag-web-browser.git\n```\n\nNavigate to the project directory and install the required dependencies:\n\n```bash\ncd mcp-server-rag-web-browser\nnpm install\n```\n\nBefore running the server, you need to build the project:\n\n```bash\nnpm run build\n```\n\n#### Claude Desktop\n\nConfigure Claude Desktop to recognize the MCP server.\n\n1. Open your Claude Desktop configuration and edit the following file:\n\n   - On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   - On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n    ```text\n    \"mcpServers\": {\n      \"mcp-server-rag-web-browser\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"/path/to/mcp-server-rag-web-browser/build/index.js\"\n        ]\n        \"env\": {\n           \"APIFY-API-TOKEN\": \"your-apify-api-token\"\n        }\n      }\n    }\n    ```\n\n2. Restart Claude Desktop\n\n    - Fully quit Claude Desktop (ensure it’s not just minimized or closed).\n    - Restart Claude Desktop.\n    - Look for the 🔌 icon to confirm that the Exa server is connected.\n\n3. Examples\n\n    You can ask Claude to perform web searches, such as:\n    ```text\n    What is an MCP server and how can it be used?\n    What is an LLM, and what are the recent news updates?\n    Find and analyze recent research papers about LLMs.\n    ```\n\n## 👷🏼 Development\n\n### Simple local client (stdio)\n\nTo test the server locally, you can use `example_client_stdio.ts`:\n\n```bash\nnode build/example_client_stdio.js\n```\n\nThe script will start the MCP server, fetch available tools, and then call the `search` tool with a query.\n\n### Chat local client (stdio)\n\nTo run simple chat client, you can use `example_chat_stdio.ts`:\n\n```bash\nnode build/example_chat_stdio.js\n```\nHere you can interact with the server using the chat interface.\n\n### Test Server-Sent Events (SSE) Transport\n\nThe SSE transport enables **server-to-client streaming** while using **HTTP POST requests** for client-to-server communication.\n\n#### Step 1: Start the Server\n\nStart the server with the following command:\n\n```bash\nnode build/sse.js\n```\n\nThe server will start and listen on `http://localhost:3001`.\n\n#### Step 2: Connect to the SSE Server (Client)\n\nTo connect to the SSE server, use the following command (acting as the client):\n\n```bash\ncurl -X GET http://localhost:3001/sse\n```\n\nUpon connection, you will receive a message containing the `sessionId`, for example:\n\n```text\nevent: endpoint\ndata: /message?sessionId=7bd075c8-bbd1-4854-884c-e6c837148b7b\n```\n\n#### Step 3: Send a Message to the Server\n\nYou can send a message to the server by making a POST request with the `sessionId` and your query:\n\n```bash\ncurl -X POST \"http://localhost:3001/message?session_id=181c7a3d-01a9-498e-8e16-5d5878832cd7\" -H \"Content-Type: application/json\" -d '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"arguments\": { \"query\": \"recent news about LLMs\" },\n    \"name\": \"search\"\n  }\n}'\n```\n\n#### Step 4: Receive the Response\n\nFor the POST request, the server will respond with:\n\n```text\nAccepted\n```\n\nThe server will then invoke the `search` tool using the provided query and stream the response back to the client via SSE:\n\n```text\nevent: message\ndata: {\"result\":{\"content\":[{\"type\":\"text\",\"text\":\"[{\\\"searchResult\\\":{\\\"title\\\":\\\"Language models recent news\\\",\\\"description\\\":\\\"Amazon Launches New Generation of LLM Foundation Model...\\\"}}\n```\n\n### Debugging\n\nCall the RAG Web Browser Actor to test it:\n\n```bash\nAPIFY_API_TOKEN=your-apify-api-token node build/example_call_web_browser.js\n````\n\nSince MCP servers operate over standard input/output (stdio), debugging can be challenging.\nFor the best debugging experience, use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nBuild the mcp-server-rag-web-browser package:\n\n```bash\nnpm run build\n```\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector node ~/apify/mcp-server-rag-web-browser/build/index.js APIFY_API_TOKEN=your-apify-api-token\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
    "publisher": {
      "id": "apify",
      "name": "apify",
      "url": "https://github.com/apify/mcp-server-rag-web-browser"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/apify/mcp-server-rag-web-browser",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-rag-web-browser"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-rag-web-browser"
      ],
      "env": {
        "APIFY-API-TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "af7b948f-c6d3-40bc-bad0-6b5887b5da29",
    "name": "andybrandt/mcp-simple-timeserver",
    "description": "MCP Simple Timeserver",
    "fullDescription": "# MCP Simple Timeserver\n\n*One of the strange design decisions Anthropic made was depriving Claude of timestamps for messages sent by the user or current time in general. Poor Claude can't tell what time it is! `mcp-simple-timeserver` is a simple MCP server that fixes that.*\n\nThis server provides two tools:\n - `get_time` provides the current local time and timezone information from the user's machine. This way Claude can know what time it is at the user's location. He can also calculate how much time passed since his last interaction with the user should he want to do so. \n - `get_utc` provides current UTC time obtained from an [NTP time server](https://en.wikipedia.org/wiki/Network_Time_Protocol). \n\n## Installation\n\n### Installing via Smithery\n\nTo install Simple Timeserver for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-simple-timeserver):\n\n```bash\nnpx -y @smithery/cli install mcp-simple-timeserver --client claude\n```\n\n### Manual Installation\nFirst install the module using:\n\n```bash\npip install mcp-simple-timeserver\n\n```\n\nThen configure in MCP client - the [Claude desktop app](https://claude.ai/download).\n\nUnder Mac OS this will look like this:\n\n```json\n\"mcpServers\": {\n  \"simple-timeserver\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_simple_timeserver\"]\n  }\n}\n```\n\nUnder Windows you have to check the path to your Python executable using `where python` in the `cmd` (Windows command line). \n\nTypical configuration would look like this:\n\n```json\n\"mcpServers\": {\n  \"simple-timeserver\": {\n    \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n    \"args\": [\"-m\", \"mcp_simple_timeserver\"]\n  }\n}\n```\n\n",
    "publisher": {
      "id": "andybrandt",
      "name": "andybrandt",
      "url": "https://github.com/andybrandt/mcp-simple-timeserver"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/andybrandt/mcp-simple-timeserver",
    "distribution": {
      "type": "pip",
      "package": "mcp-simple-timeserver"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-simple-timeserver"
      ],
      "env": {}
    }
  },
  {
    "id": "8ad1ee6d-ca82-431f-9a50-8ea80fa508cd",
    "name": "upstash/mcp-server",
    "description": "Upstash MCP Server",
    "fullDescription": "# Upstash MCP Server\n\nModel Context Protocol (MCP) is a [new, standardized protocol](https://modelcontextprotocol.io/introduction) for managing context between large language models (LLMs) and external systems. In this repository, we provide an installer as well as an MCP Server for [Upstash Developer API's](https://upstash.com/docs/devops/developer-api).\n\nThis lets you use Claude Desktop, or any MCP Client, to use natural language to accomplish things on your Upstash account, e.g.:\n\n- \"Create a new Redis database in us-east-1\"\n- \"List all databases\"\n- \"See keys starting with \"user:\" in users-db\"\n- \"Create a backup\"\n- \"Give me the spikes in throughput for the last 7 days\"\n\n# Usage\n\n## Requirements\n\n- Node.js >= v18.0.0\n- Claude Desktop\n- [Upstash API key](https://upstash.com/docs/devops/developer-api) - You can create one from [here](https://console.upstash.com/account/api).\n\n## How to use locally\n\n### Installing via npx\n\n1. Run `npx @upstash/mcp-server init <UPSTASH_EMAIL> <UPSTASH_API_KEY>`\n2. Restart Claude Desktop\n3. You should now be able to use Upstash commands in Claude Desktop\n\nSee the [troubleshooting guide](https://modelcontextprotocol.io/quickstart#troubleshooting) in the MCP documentation. You can also reach out to us at [Discord](https://discord.com/invite/w9SenAtbme).\n\n> NOTE: If you are using a node version manager like nvm or fnm, please check [this issue](https://github.com/modelcontextprotocol/servers/issues/64#issuecomment-2530337743). You should change the `node` command in the MCP config to the absolute path of the node binary.\n\n### Installing via Smithery\n\nTo install Upstash for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@upstash/mcp-server):\n\n```bash\nnpx -y @smithery/cli install @upstash/mcp-server --client claude\n```\n\n\n## Tools\n\n### Redis\n\n- `redis_database_create_backup`\n- `redis_database_create_new`\n- `redis_database_delete`\n- `redis_database_delete_backup`\n- `redis_database_get_details`\n- `redis_database_list_backups`\n- `redis_database_list_databases`\n- `redis_database_reset_password`\n- `redis_database_restore_backup`\n- `redis_database_run_multiple_redis_commands`\n- `redis_database_run_single_redis_command`\n- `redis_database_set_daily_backup`\n- `redis_database_update_regions`\n- `redis_database_get_usage_last_5_days`\n- `redis_database_get_stats`\n\n## Development\n\nClone the project and run:\n\n```bash\nbun install\nnpm run watch\n```\n\nThis will continuously build the project and watch for changes.\n\nFor testing, you can create a `.env` file in the same directory as the project with the following content:\n\n```bash\nUPSTASH_EMAIL=<UPSTASH_EMAIL>\nUPSTASH_API_KEY=<UPSTASH_API_KEY>\n```\n\nThis will be used for setting the Claude config and running mcp inspector.\n\n### Testing with Claude Desktop\n\nTo install the Claude Desktop config for local development, run the following command:\n\n```bash\nnpm run setup\n```\n\nThis will add an `upstash` entry to your MCP config file that points to the local build of the package.\n\n```json\n{\n  \"upstash\": {\n    \"command\": \"node\",\n    \"args\": [\"<path-to-repo>/dist/index.js\", \"run\", \"<UPSTASH_EMAIL>\", \"<UPSTASH_API_KEY>\"]\n  }\n}\n```\n\n> NOTE: The same issue with node version manager applies here. Please look at the note in the usage section if you are using a node version manager.\n\nYou can now use Claude Desktop to run Upstash commands.\n\nTo view the logs from the MCP Server in real time, run the following command:\n\n```bash\nnpm run logs\n```\n\n### Testing with MCP Inspector\n\nYou can also use the MCP Inspector to test the tools.\n\n```bash\nnpm run inspector\n```\n",
    "publisher": {
      "id": "upstash",
      "name": "upstash",
      "url": "https://github.com/upstash/mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/upstash/mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@upstash/mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@upstash/mcp-server",
        "run",
        "$ENVARG_UPSTASH_EMAIL",
        "$ENVARG_UPSTASH_API_KEY"
      ],
      "env": {
        "ENVARG_UPSTASH_EMAIL": {
          "description": "Your Upstash account email address",
          "type": "input",
          "required": true
        },
        "ENVARG_UPSTASH_API_KEY": {
          "description": "Your Upstash API key from the developer console",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "7da03b4f-30b6-4056-a9ca-468648a7ead2",
    "name": "kazuph/mcp-youtube",
    "description": "YouTube MCP Server",
    "fullDescription": "# YouTube MCP Server\n\nUses `yt-dlp` to download subtitles from YouTube and connects it to claude.ai via [Model Context Protocol](https://modelcontextprotocol.io/introduction). Try it by asking Claude, \"Summarize the YouTube video <<URL>>\". Requires `yt-dlp` to be installed locally e.g. via Homebrew.\n\n### How do I get this working?\n\nInstall `yt-dlp` (Homebrew and WinGet both work great here)\n\n```bash\n# macOS\nbrew install yt-dlp\n\n# Windows\nwinget install yt-dlp\n```\n\n### Parameters\n\n- `url`: YouTube video URL (required)\n- `language`: Subtitle language code (optional, default: 'ja')\n  - Uses [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language codes\n  - Common language codes:\n    - `ja`: Japanese\n    - `en`: English\n    - `ko`: Korean\n    - `zh`: Chinese\n    - `fr`: French\n  - Note: An error will occur if subtitles in the specified language do not exist\n\n### Example\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-youtube\"]\n    }\n  }\n}\n```\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-youtube"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-youtube",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-youtube"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-youtube"
      ],
      "env": {}
    }
  },
  {
    "id": "9ed7ca90-4a6e-42ad-8d15-64cf5ea65610",
    "name": "aindreyway/mcp-neurolora",
    "description": "MCP Neurolora",
    "fullDescription": "# MCP Neurolora\n\nAn intelligent MCP server that provides tools for code analysis using OpenAI API, code collection, and documentation generation.\n\n## 🚀 Installation Guide\n\nDon't worry if you don't have anything installed yet! Just follow these steps or ask your assistant to help you with the installation.\n\n### Step 1: Install Node.js\n\n#### macOS\n\n1. Install Homebrew if not installed:\n   ```bash\n   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n   ```\n2. Install Node.js 18:\n   ```bash\n   brew install node@18\n   echo 'export PATH=\"/opt/homebrew/opt/node@18/bin:$PATH\"' >> ~/.zshrc\n   source ~/.zshrc\n   ```\n\n#### Windows\n\n1. Download Node.js 18 LTS from [nodejs.org](https://nodejs.org/)\n2. Run the installer\n3. Open a new terminal to apply changes\n\n#### Linux (Ubuntu/Debian)\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n### Step 2: Install uv and uvx\n\n#### All Operating Systems\n\n1. Install uv:\n\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. Install uvx:\n   ```bash\n   uv pip install uvx\n   ```\n\n### Step 3: Verify Installation\n\nRun these commands to verify everything is installed:\n\n```bash\nnode --version  # Should show v18.x.x\nnpm --version   # Should show 9.x.x or higher\nuv --version    # Should show uv installed\nuvx --version   # Should show uvx installed\n```\n\n### Step 4: Configure MCP Server\n\nYour assistant will help you:\n\n1. Find your Cline settings file:\n\n   - VSCode: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - Claude Desktop: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows VSCode: `%APPDATA%/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - Windows Claude: `%APPDATA%/Claude/claude_desktop_config.json`\n\n2. Add this configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"aindreyway-mcp-neurolora\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@aindreyway/mcp-neurolora@latest\"],\n         \"env\": {\n           \"NODE_OPTIONS\": \"--max-old-space-size=256\",\n           \"OPENAI_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n### Step 5: Install Base Servers\n\nSimply ask your assistant:\n\"Please install the base MCP servers for my environment\"\n\nYour assistant will:\n\n1. Find your settings file\n2. Run the install_base_servers tool\n3. Configure all necessary servers automatically\n\nAfter the installation is complete:\n\n1. Close VSCode completely (Cmd+Q on macOS, Alt+F4 on Windows)\n2. Reopen VSCode\n3. The new servers will be ready to use\n\n> **Important:** A complete restart of VSCode is required after installing the base servers for them to be properly initialized.\n\n> **Note:** This server uses `npx` for direct npm package execution, which is optimal for Node.js/TypeScript MCP servers, providing seamless integration with the npm ecosystem and TypeScript tooling.\n\n## Base MCP Servers\n\nThe following base servers will be automatically installed and configured:\n\n- fetch: Basic HTTP request functionality for accessing web resources\n- puppeteer: Browser automation capabilities for web interaction and testing\n- sequential-thinking: Advanced problem-solving tools for complex tasks\n- github: GitHub integration features for repository management\n- git: Git operations support for version control\n- shell: Basic shell command execution with common commands:\n  - ls: List directory contents\n  - cat: Display file contents\n  - pwd: Print working directory\n  - grep: Search text patterns\n  - wc: Count words, lines, characters\n  - touch: Create empty files\n  - find: Search for files\n\n## 🎯 What Your Assistant Can Do\n\nAsk your assistant to:\n\n- \"Analyze my code and suggest improvements\"\n- \"Install base MCP servers for my environment\"\n- \"Collect code from my project directory\"\n- \"Create documentation for my codebase\"\n- \"Generate a markdown file with all my code\"\n\n## 🛠 Available Tools\n\n### analyze_code\n\nAnalyzes code using OpenAI API and generates detailed feedback with improvement suggestions.\n\nParameters:\n\n- `codePath` (required): Path to the code file or directory to analyze\n\nExample usage:\n\n```json\n{\n  \"codePath\": \"/path/to/your/code.ts\"\n}\n```\n\nThe tool will:\n\n1. Analyze your code using OpenAI API\n2. Generate detailed feedback with:\n   - Issues and recommendations\n   - Best practices violations\n   - Impact analysis\n   - Steps to fix\n3. Create two output files in your project:\n   - LAST_RESPONSE_OPENAI.txt - Human-readable analysis\n   - LAST_RESPONSE_OPENAI_GITHUB_FORMAT.json - Structured data for GitHub issues\n\n> Note: Requires OpenAI API key in environment configuration\n\n### collect_code\n\nCollects all code from a directory into a single markdown file with syntax highlighting and navigation.\n\nParameters:\n\n- `directory` (required): Directory path to collect code from\n- `outputPath` (optional): Path where to save the output markdown file\n- `ignorePatterns` (optional): Array of patterns to ignore (similar to .gitignore)\n\nExample usage:\n\n```json\n{\n  \"directory\": \"/path/to/project/src\",\n  \"outputPath\": \"/path/to/project/src/FULL_CODE_SRC_2024-12-20.md\",\n  \"ignorePatterns\": [\"*.log\", \"temp/\", \"__pycache__\", \"*.pyc\", \".git\"]\n}\n```\n\n### install_base_servers\n\nInstalls base MCP servers to your configuration file.\n\nParameters:\n\n- `configPath` (required): Path to the MCP settings configuration file\n\nExample usage:\n\n```json\n{\n  \"configPath\": \"/path/to/cline_mcp_settings.json\"\n}\n```\n\n## 🔧 Features\n\nThe server provides:\n\n- Code Analysis:\n\n  - OpenAI API integration\n  - Structured feedback\n  - Best practices recommendations\n  - GitHub issues generation\n\n- Code Collection:\n\n  - Directory traversal\n  - Syntax highlighting\n  - Navigation generation\n  - Pattern-based filtering\n\n- Base Server Management:\n  - Automatic installation\n  - Configuration handling\n  - Version management\n\n## 📄 License\n\nMIT License - feel free to use this in your projects!\n\n## 👤 Author\n\n**Aindreyway**\n\n- GitHub: [@aindreyway](https://github.com/aindreyway)\n\n## ⭐️ Support\n\nGive a ⭐️ if this project helped you!\n",
    "publisher": {
      "id": "aindreyway",
      "name": "aindreyway",
      "url": "https://github.com/aindreyway/mcp-neurolora"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/aindreyway/mcp-neurolora",
    "distribution": {
      "type": "npm",
      "package": "@aindreyway/mcp-neurolora"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@aindreyway/mcp-neurolora"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "NODE_OPTIONS": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "71a7aee6-87b6-4766-823c-8818387f1f66",
    "name": "ravenwits/mcp-server-arangodb",
    "description": "MCP Server for ArangoDB",
    "fullDescription": "# MCP Server for ArangoDB\n\nA Model Context Protocol server for ArangoDB\n\nThis is a TypeScript-based MCP server that provides database interaction capabilities through ArangoDB. It implements core database operations and allows seamless integration with ArangoDB through MCP tools. You can use it wih Claude app and also extension for VSCode that works with mcp like Cline!\n\n<!-- markdownlint-disable MD033 -->\n[<img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/soeqalh2v9/badge\" alt=\"Server for ArangoDB MCP server\" />](https://glama.ai/mcp/servers/soeqalh2v9)\n<!-- markdownlint-disable MD033 -->\n\n## Features\n\n### Tools\n\n- `arango_query` - Execute AQL queries\n  - Takes an AQL query string as required parameter\n  - Optionally accepts bind variables for parameterized queries\n  - Returns query results as JSON\n\n- `arango_insert` - Insert documents into collections\n  - Takes collection name and document object as required parameters\n  - Automatically generates document key if not provided\n  - Returns the created document metadata\n\n- `arango_update` - Update existing documents\n  - Takes collection name, document key, and update object as required parameters\n  - Returns the updated document metadata\n\n- `arango_remove` - Remove documents from collections\n  - Takes collection name and document key as required parameters\n  - Returns the removed document metadata\n\n- `arango_backup` - Backup all collections to JSON files\n  - Takes output directory path as required parameter\n  - Creates JSON files for each collection with current data\n  - Useful for data backup and migration purposes\n\n- `arango_list_collections` - List all collections in the database\n  - Returns array of collection information including names, IDs, and types\n\n- `arango_create_collection` - Create a new collection in the database\n  - Takes collection name as required parameter\n  - Optionally specify collection type (document or edge collection)\n  - Configure waitForSync behavior for write operations\n  - Returns collection information including name, type, and status\n\n## Database Structure\n\nThe server is database-structure agnostic and can work with any collection names or structures as long as they follow ArangoDB's document and edge collection models.\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nTo use with Cline VSCode Extension, add the server config:\n\n- MacOS: `~/Library/Application Support/Code/User/globalStorage/cline.cline/config.json`\n- Windows: `%APPDATA%/Code/User/globalStorage/cline.cline/config.json`\n\nAdd the following configuration to the `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"arango\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/arango-server/build/index.js\"],\n      \"env\": {\n        \"ARANGO_URL\": \"your_database_url\",\n        \"ARANGO_DATABASE\": \"your_database_name\",\n        \"ARANGO_USERNAME\": \"your_username\",\n        \"ARANGO_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nThe server requires the following environment variables:\n\n- `ARANGO_URL` - ArangoDB server URL (note: 8529 is the default port for ArangoDB for local development)\n- `ARANGO_DATABASE` - Database name\n- `ARANGO_USERNAME` - Database user\n- `ARANGO_PASSWORD` - Database password\n\n### Usage Examples\n\nYou can pretty much provide any meaningful prompt and Claude will try to execute the appropriate function.\n\nSome example propmts:\n\n- \"List all collections in the database\"\n- \"Query all users\"\n- \"Insert a new document with name 'John Doe' and email \"<john@example.com>' to the 'users' collection\"\n- \"Update the document with key '123456' or name 'Jane Doe' to change the age to 48\"\n- \"Create a new collection named 'products'\"\n\n#### Usage with Claude App\n\n![Demo of using ArangoDB MCP server with Claude App](./assets/demo-claude.gif)\n\n#### Uasge with Cline VSCode extension\n\n![Demo of using ArangoDB MCP server with Cline VSCode extension](./assets/demo-cline.gif)\n\nQuery all users:\n\n```typescript\n{\n  \"query\": \"FOR user IN users RETURN user\"\n}\n```\n\nInsert a new document:\n\n```typescript\n{\n  \"collection\": \"users\",\n  \"document\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n  }\n}\n```\n\nUpdate a document:\n\n```typescript\n{\n  \"collection\": \"users\",\n  \"key\": \"123456\",\n  \"update\": {\n    \"name\": \"Jane Doe\"\n  }\n}\n```\n\nRemove a document:\n\n```typescript\n{\n  \"collection\": \"users\",\n  \"key\": \"123456\"\n}\n```\n\nList all collections:\n\n```typescript\n{} // No parameters required\n```\n\nBackup database collections:\n\n```typescript\n{\n  \"outputDir\": \"./backup\" // Specify an absolute output directory path for the backup files (optional)\n  \"collection\": \"users\" // Specify a collection name to backup (optional) If no collection name is provided, all collections will be backed up\n  \"docLimit\": 1000 // Specify the maximum number of documents to backup per collection (optional), if not provided, all documents will be backed up (not having a limit might cause timeout for large collections)\n}\n```\n\nCreate a new collection:\n\n```typescript\n{\n  \"name\": \"products\",\n  \"type\": 2, // 2 for document collection, 3 for edge collection (optional, defaults to document collection)\n  \"waitForSync\": false // Optional, defaults to false\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for development:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "ravenwits",
      "name": "ravenwits",
      "url": "https://github.com/ravenwits/mcp-server-arangodb"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ravenwits/mcp-server-arangodb",
    "distribution": {
      "type": "npm",
      "package": "arango-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "arango-server"
      ],
      "env": {
        "ARANGO_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ARANGO_DATABASE": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ARANGO_USERNAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "ARANGO_PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "42d3d216-8c1b-48c8-ad60-3131b6010372",
    "name": "designcomputer/mysql_mcp_server",
    "description": "MySQL MCP Server",
    "fullDescription": "# MySQL MCP Server\n\nA Model Context Protocol (MCP) server that enables secure interaction with MySQL databases. This server allows AI assistants to list tables, read data, and execute SQL queries through a controlled interface, making database exploration and analysis safer and more structured.\n\n## Features\n\n- List available MySQL tables as resources\n- Read table contents\n- Execute SQL queries with proper error handling\n- Secure database access through environment variables\n- Comprehensive logging\n\n## Installation\n\n```bash\npip install mysql-mcp-server\n```\n\n## Configuration\n\nSet the following environment variables:\n\n```bash\nMYSQL_HOST=localhost\nMYSQL_USER=your_username\nMYSQL_PASSWORD=your_password\nMYSQL_DATABASE=your_database\n```\n\n## Usage\n\n### With Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\", \n        \"path/to/mysql_mcp_server\",\n        \"run\",\n        \"mysql_mcp_server\"\n      ],\n      \"env\": {\n        \"MYSQL_HOST\": \"localhost\",\n        \"MYSQL_USER\": \"your_username\",\n        \"MYSQL_PASSWORD\": \"your_password\",\n        \"MYSQL_DATABASE\": \"your_database\"\n      }\n    }\n  }\n}\n```\n\n### As a standalone server\n\n```bash\n# Install dependencies\npip install -r requirements.txt\n\n# Run the server\npython -m mysql_mcp_server\n```\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mysql_mcp_server.git\ncd mysql_mcp_server\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # or `venv\\Scripts\\activate` on Windows\n\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Run tests\npytest\n```\n\n## Security Considerations\n\n- Never commit environment variables or credentials\n- Use a database user with minimal required permissions\n- Consider implementing query whitelisting for production use\n- Monitor and log all database operations\n\n## Security Best Practices\n\nThis MCP server requires database access to function. For security:\n\n1. **Create a dedicated MySQL user** with minimal permissions\n2. **Never use root credentials** or administrative accounts\n3. **Restrict database access** to only necessary operations\n4. **Enable logging** for audit purposes\n5. **Regular security reviews** of database access\n\nSee [MySQL Security Configuration Guide](https://github.com/designcomputer/mysql_mcp_server/blob/main/SECURITY.md) for detailed instructions on:\n- Creating a restricted MySQL user\n- Setting appropriate permissions\n- Monitoring database access\n- Security best practices\n\n⚠️ IMPORTANT: Always follow the principle of least privilege when configuring database access.\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n",
    "publisher": {
      "id": "designcomputer",
      "name": "designcomputer",
      "url": "https://github.com/designcomputer/mysql_mcp_server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/designcomputer/mysql_mcp_server",
    "distribution": {
      "type": "pip",
      "package": "mysql-mcp-server"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mysql-mcp-server"
      ],
      "env": {
        "MYSQL_HOST": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_USER": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_PASSWORD": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MYSQL_DATABASE": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "2b8d8684-0e24-44c0-abc1-2b74b4b0b12a",
    "name": "kiliczsh/mcp-mongo-server",
    "description": "MCP MongoDB Server",
    "fullDescription": "# MCP MongoDB Server\n\nA Model Context Protocol server that provides access to MongoDB databases. This server enables LLMs to inspect collection schemas and execute read-only queries.\n\n## Demo\n\n[![MCP MongoDB Server Demo | Claude Desktop](https://img.youtube.com/vi/FI-oE_voCpA/0.jpg)](https://www.youtube.com/watch?v=FI-oE_voCpA)\n\n## Features\n\n### Resources\n- List and access collections via `mongodb://` URIs\n- Each collection has a name, description and schema\n- JSON mime type for schema access\n\n### Tools\n- **query**\n  - Execute read-only MongoDB queries against the connected database\n  - Input: `query` (object): The MongoDB query to execute\n  - All queries are executed with read-only permissions\n\n- **aggregate**\n  - Execute read-only MongoDB queries against the connected database\n  - Input: `aggregate` (object): The MongoDB query to execute\n  - All queries are executed with read-only permissions\n\n### Prompts\n- `query` - Provide insights about the collection's structure, data types, and basic statistics\n  - Input: `collection` (string): The name of the collection to analyze\n  - Output: `text` (string): A summary of the collection's structure, data types, and basic statistics\n- `aggregate` - Provide insights about the collection's structure, data types, and basic statistics\n  - Input: `collection` (string): The name of the collection to analyze\n  - Output: `text` (string): A summary of the collection's structure, data types, and basic statistics\n\n\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation for Development\n\n### Using Claude Desktop\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"~/mcp-mongo-server/build/index.js\",\n        \"mongodb://muhammed:kilic@mongodb.localhost/namespace\"\n      ]\n    },\n  }\n}\n```\n\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Components\n\n\n### Resources\n\nThe server provides schema information for each collection in the database:\n\n- **Collection Schemas** (`mongodb://<host>/<collection>/schema`)\n  - JSON schema information for each collection\n  - Includes field names and data types\n  - Automatically inferred from collection documents\n\n\n## Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-mongo-server\",\n        \"mongodb://muhammed:kilic@mongodb.localhost/sample_namespace\"\n      ]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install MCP MongoDB Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-mongo-server):\n\n```bash\nnpx -y @smithery/cli install mcp-mongo-server --client claude\n```\n\n### Installing via mcp-get\n\nYou can install this package using mcp-get:\n\n```bash\nnpx @michaellatman/mcp-get@latest install mcp-mongo-server\n```\n\nReplace `/sample_namespace` with your database name.\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "kiliczsh",
      "name": "kiliczsh",
      "url": "https://github.com/kiliczsh/mcp-mongo-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kiliczsh/mcp-mongo-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-mongo-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-mongo-server",
        "$ENVARG_MONGODB_URI"
      ],
      "env": {
        "ENVARG_MONGODB_URI": {
          "description": "MongoDB connection string including credentials and database name",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "42c762ba-e9f3-4ef2-9505-017bf7eacf96",
    "name": "hmk/attio-mcp-server",
    "description": "attio-mcp-server",
    "fullDescription": "# attio-mcp-server\n\nThis is an MCP server for [Attio](https://attio.com/), the AI-native CRM. It allows mcp clients (like Claude) to connect to the Attio API.\n\n#### Current Capabilities\n\n- [x] reading company records\n- [x] reading company notes\n- [x] writing company notes\n- [ ] other activities\n\n## Usage\n\nYou will need:\n\n- `ATTIO_API_KEY` \n\nThis is expected to be a *bearer token* which means you can get one through the [API Explorer](https://developers.attio.com/reference/get_v2-objects) on the right hand side or configure OAuth and retrieve one throught the Attio API.\n\n\n### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"attio\": {\n      \"command\": \"npx\",\n      \"args\": [\"attio-mcp-server\"],\n      \"env\": {\n        \"ATTIO_API_KEY\": \"YOUR_ATTIO_API_KEY\"\n      }\n    }\n  }\n}\n```\n## Development\n\n### Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- Node.js (recommended v22 or higher)\n- npm\n- git\n- dotenv\n\n### Setting up Development Environment\n\nTo set up the development environment, follow these steps:\n\n1. Fork the repository\n\n   - Click the \"Fork\" button in the top-right corner of this repository\n   - This creates your own copy of the repository under your Github acocunt\n\n1. Clone Your Fork:\n\n   ```sh\n   git clone https://github.com/YOUR_USERNAME/attio-mcp-server.git\n   cd attio-mcp-server\n   ```\n\n1. Add Upstream Remote\n   ```sh\n   git remote add upstream https://github.com/hmk/attio-mcp-server.git\n   ```\n\n1. Copy the dotenv file\n    ```sh\n    cp .env.template .env\n    ```\n\n1. Install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n1. Run watch to keep index.js updated:\n\n   ```sh\n   npm run build:watch\n   ```\n\n1. Start the model context protocol development server:\n\n   ```sh\n   dotenv npx @modelcontextprotocol/inspector node PATH_TO_YOUR_CLONED_REPO/dist/index.js\n   ```\n\n1. If the development server did not load the environment variable correctly, set the `ATTIO_API_KEY` on the left-hand side of the mcp inspector.",
    "publisher": {
      "id": "hmk",
      "name": "hmk",
      "url": "https://github.com/hmk/attio-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/hmk/attio-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "attio-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "attio-mcp-server"
      ],
      "env": {
        "ATTIO_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "ac892447-0ad0-435e-9978-6616d64cb29c",
    "name": "server-everart",
    "description": "EverArt MCP Server",
    "fullDescription": "# EverArt MCP Server\n\nImage generation server for Claude Desktop using EverArt's API.\n\n## Install\n```bash\nnpm install\nexport EVERART_API_KEY=your_key_here\n```\n\n## Config\nAdd to Claude Desktop config:\n\n### Docker\n```json\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"EVERART_API_KEY\", \"mcp/everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"everart\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-everart\"],\n      \"env\": {\n        \"EVERART_API_KEY\": \"your_key_here\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### generate_image\nGenerates images with multiple model options. Opens result in browser and returns URL.\n\nParameters:\n```typescript\n{\n  prompt: string,       // Image description\n  model?: string,       // Model ID (default: \"207910310772879360\")\n  image_count?: number  // Number of images (default: 1)\n}\n```\n\nModels:\n- 5000: FLUX1.1 (standard)\n- 9000: FLUX1.1-ultra\n- 6000: SD3.5\n- 7000: Recraft-Real\n- 8000: Recraft-Vector\n\nAll images generated at 1024x1024.\n\nSample usage:\n```javascript\nconst result = await client.callTool({\n  name: \"generate_image\",\n  arguments: {\n    prompt: \"A cat sitting elegantly\",\n    model: \"7000\",\n    image_count: 1\n  }\n});\n```\n\nResponse format:\n```\nImage generated successfully!\nThe image has been opened in your default browser.\n\nGeneration details:\n- Model: 7000\n- Prompt: \"A cat sitting elegantly\"\n- Image URL: https://storage.googleapis.com/...\n\nYou can also click the URL above to view the image again.\n```\n\n## Building w/ Docker\n\n```sh\ndocker build -t mcp/everart -f src/everart/Dockerfile . \n```",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-everart"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everart"
      ],
      "env": {
        "EVERART_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "a90ee44a-0bb7-4f9f-9812-2b552067050e",
    "name": "exa-labs/exa-mcp-server",
    "description": "Exa MCP Server 🔍",
    "fullDescription": "# Exa MCP Server 🔍\n\nA Model Context Protocol (MCP) server lets AI assistants like Claude use the Exa AI Search API for web searches. This setup allows AI models to get real-time web information in a safe and controlled way.\n\nDemo video https://www.loom.com/share/ac676f29664e4c6cb33a2f0a63772038?sid=0e72619f-5bfc-415d-a705-63d326373f60\n\n## What is MCP? 🤔\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do? 🚀\n\nThe Exa MCP server:\n- Enables AI assistants to perform web searches using Exa's powerful search API\n- Provides structured search results including titles, URLs, and content snippets\n- Handles rate limiting and error cases gracefully\n\n\n## Prerequisites 📋\n\nBefore you begin, ensure you have:\n\n- [Node.js](https://nodejs.org/) (v18 or higher)\n- [Claude Desktop](https://claude.ai/download) installed\n- An [Exa API key](https://dashboard.exa.ai/api-keys)\n- Git installed\n\nYou can verify your Node.js installation by running:\n```bash\nnode --version  # Should show v18.0.0 or higher\n````\n\n## Installation 🛠️\n\n### NPM Installation\n\n```bash\nnpm install -g exa-mcp-server\n```\n\n### Using Smithery\n\nTo install the Exa MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/exa):\n\n```bash\nnpx -y @smithery/cli install exa --client claude\n```\n\n### Manual Installation\n\n1.  Clone the repository:\n    \n\n```\ngit clone https://github.com/exa-labs/exa-mcp-server.git\ncd exa-mcp-server\n```\n\n2.  Install dependencies:\n    \n\n```\nnpm install --save axios dotenv\n```\n\n3.  Build the project:\n    \n\n```\nnpm run build\n```\n\n4.  Create a global link (this makes the server executable from anywhere):\n    \n\n```\nnpm link\n```\n\n## Configuration ⚙️\n\n### 1. Configure Claude Desktop to recognize the Exa MCP server\n\nYou can find claude_desktop_config.json inside the settings of Claude Desktop app:\n\nOpen the Claude Desktop app and enable Developer Mode from the top-left menu bar. \n\nOnce enabled, open Settings (also from the top-left menu bar) and navigate to the Developer Option, where you'll find the Edit Config button. Clicking it will open the claude_desktop_config.json file, allowing you to make the necessary edits. \n\nOR (if you want to open claude_desktop_config.json from terminal)\n\n#### For macOS:\n\n1.  Open your Claude Desktop configuration:\n    \n\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n#### For Windows:\n\n1.  Open your Claude Desktop configuration:\n    \n\n```\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n\n### 2.  Add the Exa server configuration:\n    \n\n```\n{\n  \"mcpServers\": {\n    \"exa\": {\n      \"command\": \"npx\",\n      \"args\": [\"/path/to/exa-mcp-server/build/index.js\"],\n      \"env\": {\n        \"EXA_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\nReplace `your-api-key-here` with your actual Exa API key from [dashboard.exa.ai/api-keys](https://dashboard.exa.ai/api-keys).\n\n### 3. Restart Claude Desktop\n\nFor the changes to take effect:\n\n1.  Completely quit Claude Desktop (not just close the window)\n    \n2.  Start Claude Desktop again\n    \n3.  Look for the 🔌 icon to verify the Exa server is connected\n    \n\n## Usage 🎯\n\nOnce configured, you can ask Claude to perform web searches. Here are some example prompts:\n\n```\nCan you search for recent developments in quantum computing?\n```\n\n```\nSearch for and summarize the latest news about artificial intelligence startups in new york.\n```\n\n```\nFind and analyze recent research papers about climate change solutions.\n```\n\nThe server will:\n\n1.  Process the search request\n    \n2.  Query the Exa API\n    \n3.  Return formatted results to Claude\n    \n4.  Cache the search for future reference\n    \n\n## Features ✨\n\n*   **Web Search Tool**: Enables Claude to search the web using natural language queries\n    \n*   **Error Handling**: Gracefully handles API errors and rate limits\n    \n*   **Type Safety**: Full TypeScript implementation with proper type checking\n    \n\n## Troubleshooting 🔧\n\n### Common Issues\n\n1.  **Server Not Found**\n    \n    *   Verify the npm link is correctly set up\n        \n    *   Check Claude Desktop configuration syntax\n        \n    *   Ensure Node.js is properly installed\n        \n2.  **API Key Issues**\n    \n    *   Confirm your Exa API key is valid\n        \n    *   Check the API key is correctly set in the Claude Desktop config\n        \n    *   Verify no spaces or quotes around the API key\n        \n3.  **Connection Issues**\n    \n    *   Restart Claude Desktop completely\n        \n    *   Check Claude Desktop logs:\n        \n        ```\n        # macOS\n        tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n        ```\n        \n\n### Getting Help\n\nIf you encounter issues review the [MCP Documentation](https://modelcontextprotocol.io)\n    \n    \n\n\n## Acknowledgments 🙏\n\n*   [Exa AI](https://exa.ai) for their powerful search API\n    \n*   [Model Context Protocol](https://modelcontextprotocol.io) for the MCP specification\n    \n*   [Anthropic](https://anthropic.com) for Claude Desktop\n    \n",
    "publisher": {
      "id": "exa-labs",
      "name": "exa-labs",
      "url": "https://github.com/exa-labs/exa-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/exa-labs/exa-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "exa-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "exa-mcp-server"
      ],
      "env": {
        "EXA_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "d6ef67b5-27b1-4abb-9471-e297f11b4d1a",
    "name": "Bigsy/Clojars-MCP-Server",
    "description": "Clojars MCP Server",
    "fullDescription": "# Clojars MCP Server\n\nA [Model Context Protocol (MCP)](https://github.com/ModelContext/protocol) server that provides tools for fetching dependency information from [Clojars](https://clojars.org/), the Clojure community's artifact repository for Cline, Roo Code, Cody, Claude Desktop etc.\n\n## Installation\n\n### Installing via npx\n\nThe quickest way to use the Clojars MCP Server is to run it directly with npx:\n\n```bash\nnpx clojars-deps-server\n```\n\nYou can also install it globally:\n\n```bash\nnpm install -g clojars-deps-server\n```\n\n### Installing via Smithery\n\nTo install Clojars Dependency Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/clojars-deps-server):\n\n```bash\nnpx -y @smithery/cli install clojars-deps-server --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n```bash\ngit clone https://github.com/yourusername/clojars-deps-server.git\ncd clojars-deps-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add the server to your Claude configuration:\n\nFor VSCode Claude extension, add to `cline_mcp_settings.json` (typically located at `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/` on macOS):\n```json\n{\n  \"mcpServers\": {\n    \"clojars-deps-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/clojars-deps-server/build/index.js\"]\n    }\n  }\n}\n```\n\nFor Claude desktop app, add to `claude_desktop_config.json` (typically located at `~/Library/Application Support/Claude/` on macOS):\n```json\n{\n  \"mcpServers\": {\n    \"clojars-deps-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/clojars-deps-server/build/index.js\"]\n    }\n  }\n}\n```\n\nAfter adding the server configuration, Claude will automatically detect and connect to the server on startup. The server's capabilities will be listed in Claude's system prompt under \"Connected MCP Servers\", making them available for use.\n\n\n## Features\n\n- Get the latest version of any Clojars dependency\n- Check if a specific version of a dependency exists\n- Simple, focused responses\n- Easy integration with Claude through MCP\n\n## How It Works\n\nWhen this MCP server is configured in Claude's settings, it automatically becomes available in Claude's system prompt under the \"Connected MCP Servers\" section. This makes Claude aware of the server's capabilities and allows it to use the provided tools through the `use_mcp_tool` command.\n\nThe server exposes two tools:\n\n### get_clojars_latest_version\n```json\n{\n  \"name\": \"get_clojars_latest_version\",\n  \"description\": \"Get the latest version of a Clojars dependency (Maven artifact)\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"dependency\": {\n        \"type\": \"string\",\n        \"description\": \"Clojars dependency name in format \\\"group/artifact\\\" (e.g. \\\"metosin/reitit\\\")\"\n      }\n    },\n    \"required\": [\"dependency\"]\n  }\n}\n```\n\n### check_clojars_version_exists\n```json\n{\n  \"name\": \"check_clojars_version_exists\",\n  \"description\": \"Check if a specific version of a Clojars dependency exists\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"dependency\": {\n        \"type\": \"string\",\n        \"description\": \"Clojars dependency name in format \\\"group/artifact\\\" (e.g. \\\"metosin/reitit\\\")\"\n      },\n      \"version\": {\n        \"type\": \"string\",\n        \"description\": \"Version to check (e.g. \\\"0.7.2\\\")\"\n      }\n    },\n    \"required\": [\"dependency\", \"version\"]\n  }\n}\n```\n\nThe tool names and descriptions are specifically designed to help Claude understand that these tools are for retrieving version information from Clojars. When users ask about Clojars dependencies, Claude can recognize that these tools are appropriate for the task based on:\n- The tool names explicitly indicate their purpose\n- The descriptions specify they're for \"Clojars dependency (Maven artifact)\"\n- The example formats show typical Clojars dependency patterns\n\n",
    "publisher": {
      "id": "Bigsy",
      "name": "Bigsy",
      "url": "https://github.com/Bigsy/Clojars-MCP-Server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Bigsy/Clojars-MCP-Server",
    "distribution": {
      "type": "npm",
      "package": "clojars-deps-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "clojars-deps-server"
      ],
      "env": {}
    }
  },
  {
    "id": "3555a60b-cd46-4493-801d-4608cf41c4a6",
    "name": "server-memory",
    "description": "Knowledge Graph Memory Server",
    "fullDescription": "# Knowledge Graph Memory Server\nA basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.\n\n## Core Concepts\n\n### Entities\nEntities are the primary nodes in the knowledge graph. Each entity has:\n- A unique name (identifier)\n- An entity type (e.g., \"person\", \"organization\", \"event\")\n- A list of observations\n\nExample:\n```json\n{\n  \"name\": \"John_Smith\",\n  \"entityType\": \"person\",\n  \"observations\": [\"Speaks fluent Spanish\"]\n}\n```\n\n### Relations\nRelations define directed connections between entities. They are always stored in active voice and describe how entities interact or relate to each other.\n\nExample:\n```json\n{\n  \"from\": \"John_Smith\",\n  \"to\": \"Anthropic\",\n  \"relationType\": \"works_at\"\n}\n```\n### Observations\nObservations are discrete pieces of information about an entity. They are:\n\n- Stored as strings\n- Attached to specific entities\n- Can be added or removed independently\n- Should be atomic (one fact per observation)\n\nExample:\n```json\n{\n  \"entityName\": \"John_Smith\",\n  \"observations\": [\n    \"Speaks fluent Spanish\",\n    \"Graduated in 2019\",\n    \"Prefers morning meetings\"\n  ]\n}\n```\n\n## API\n\n### Tools\n- **create_entities**\n  - Create multiple new entities in the knowledge graph\n  - Input: `entities` (array of objects)\n    - Each object contains:\n      - `name` (string): Entity identifier\n      - `entityType` (string): Type classification\n      - `observations` (string[]): Associated observations\n  - Ignores entities with existing names\n\n- **create_relations**\n  - Create multiple new relations between entities\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type in active voice\n  - Skips duplicate relations\n\n- **add_observations**\n  - Add new observations to existing entities\n  - Input: `observations` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `contents` (string[]): New observations to add\n  - Returns added observations per entity\n  - Fails if entity doesn't exist\n\n- **delete_entities**\n  - Remove entities and their relations\n  - Input: `entityNames` (string[])\n  - Cascading deletion of associated relations\n  - Silent operation if entity doesn't exist\n\n- **delete_observations**\n  - Remove specific observations from entities\n  - Input: `deletions` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `observations` (string[]): Observations to remove\n  - Silent operation if observation doesn't exist\n\n- **delete_relations**\n  - Remove specific relations from the graph\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type\n  - Silent operation if relation doesn't exist\n\n- **read_graph**\n  - Read the entire knowledge graph\n  - No input required\n  - Returns complete graph structure with all entities and relations\n\n- **search_nodes**\n  - Search for nodes based on query\n  - Input: `query` (string)\n  - Searches across:\n    - Entity names\n    - Entity types\n    - Observation content\n  - Returns matching entities and their relations\n\n- **open_nodes**\n  - Retrieve specific nodes by name\n  - Input: `names` (string[])\n  - Returns:\n    - Requested entities\n    - Relations between requested entities\n  - Silently skips non-existent nodes\n\n# Usage with Claude Desktop\n\n### Setup\n\nAdd this to your claude_desktop_config.json:\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"-v\", \"claude-memory:/app/dist\", \"--rm\", \"mcp/memory\"]\n    }\n  }\n}\n```\n\n#### NPX\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    }\n  }\n}\n```\n\n#### NPX with custom setting\n\nThe server can be configured using the following environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/path/to/custom/memory.json\"\n      }\n    }\n  }\n}\n```\n\n- `MEMORY_FILE_PATH`: Path to the memory storage JSON file (default: `memory.json` in the server directory)\n\n### System Prompt\n\nThe prompt for utilizing memory depends on the use case. Changing the prompt will help the model determine the frequency and types of memories created.\n\nHere is an example prompt for chat personalization. You could use this prompt in the \"Custom Instructions\" field of a [Claude.ai Project](https://www.anthropic.com/news/projects). \n\n```\nFollow these steps for each interaction:\n\n1. User Identification:\n   - You should assume that you are interacting with default_user\n   - If you have not identified default_user, proactively try to do so.\n\n2. Memory Retrieval:\n   - Always begin your chat by saying only \"Remembering...\" and retrieve all relevant information from your knowledge graph\n   - Always refer to your knowledge graph as your \"memory\"\n\n3. Memory\n   - While conversing with the user, be attentive to any new information that falls into these categories:\n     a) Basic Identity (age, gender, location, job title, education level, etc.)\n     b) Behaviors (interests, habits, etc.)\n     c) Preferences (communication style, preferred language, etc.)\n     d) Goals (goals, targets, aspirations, etc.)\n     e) Relationships (personal and professional relationships up to 3 degrees of separation)\n\n4. Memory Update:\n   - If any new information was gathered during the interaction, update your memory as follows:\n     a) Create entities for recurring organizations, people, and significant events\n     b) Connect them to the current entities using relations\n     b) Store facts about them as observations\n```\n\n## Building\n\nDocker:\n\n```sh\ndocker build -t mcp/memory -f src/memory/Dockerfile . \n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-memory"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ],
      "env": {
        "MEMORY_FILE_PATH": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "cf26100b-938a-472c-aee3-95b751173107",
    "name": "bmorphism/say-mcp-server",
    "description": "say-mcp-server",
    "fullDescription": "# say-mcp-server\n\nAn MCP server that provides text-to-speech functionality using macOS's built-in `say` command.\n\n## Requirements\n\n- macOS (uses the built-in `say` command)\n- Node.js >= 14.0.0\n\n## Configuration\n\nAdd the following to your MCP settings configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"say\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/say-mcp-server/build/index.js\"]\n    }\n  }\n}\n```\n\n\n## Installation\n\n```bash\nnpm install say-mcp-server\n```\n\n## Tools\n\n### speak\n\nThe `speak` tool provides access to macOS's text-to-speech capabilities with extensive customization options.\n\n#### Basic Usage\n\nUse macOS text-to-speech to speak text aloud.\n\nParameters:\n- `text` (required): Text to speak. Supports:\n  - Plain text\n  - Basic punctuation for pauses\n  - Newlines for natural breaks\n  - [[slnc 500]] for 500ms silence\n  - [[rate 200]] for changing speed mid-text\n  - [[volm 0.5]] for changing volume mid-text\n  - [[emph +]] and [[emph -]] for emphasis\n  - [[pbas +10]] for pitch adjustment\n- `voice` (optional): Voice to use (default: \"Alex\")\n- `rate` (optional): Speaking rate in words per minute (default: 175, range: 1-500)\n- `background` (optional): Run speech in background to allow further MCP interaction (default: false)\n\n#### Advanced Features\n\n1. Voice Modulation:\n```typescript\nuse_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: \"[[volm 0.7]] This is quieter [[volm 1.0]] and this is normal [[volm 1.5]] and this is louder\",\n    voice: \"Victoria\"\n  }\n});\n```\n\n2. Dynamic Rate Changes:\n```typescript\nuse_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: \"Normal speed [[rate 300]] now speaking faster [[rate 100]] and now slower\",\n    voice: \"Fred\"\n  }\n});\n```\n\n3. Emphasis and Pitch:\n```typescript\nuse_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: \"[[emph +]] Important point! [[emph -]] [[pbas +10]] Higher pitch [[pbas -10]] Lower pitch\",\n    voice: \"Samantha\"\n  }\n});\n```\n\n#### Integration Examples\n\n1. With Marginalia Search:\n```typescript\n// Search for a topic and have the results read aloud\nconst searchResult = await use_mcp_tool({\n  server_name: \"marginalia-mcp-server\",\n  tool_name: \"search\",\n  arguments: { query: \"quantum computing basics\", count: 1 }\n});\n\nawait use_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: searchResult.results[0].description,\n    voice: \"Daniel\",\n    rate: 150\n  }\n});\n```\n\n2. With YouTube Transcripts:\n```typescript\n// Read a YouTube video transcript\nconst transcript = await use_mcp_tool({\n  server_name: \"youtube-transcript\",\n  tool_name: \"get_transcript\",\n  arguments: {\n    url: \"https://youtube.com/watch?v=example\",\n    lang: \"en\"\n  }\n});\n\nawait use_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: transcript.text,\n    voice: \"Samantha\",\n    rate: 175\n  }\n});\n```\n\n3. Background Speech with Multiple Actions:\n```typescript\n// Start long speech in background\nawait use_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: \"This is a long speech that will run in the background...\",\n    voice: \"Rocko (Italian (Italy))\",\n    rate: 69,\n    background: true\n  }\n});\n\n// Immediately perform another action while speech continues\nawait use_mcp_tool({\n  server_name: \"marginalia-mcp-server\",\n  tool_name: \"search\",\n  arguments: { query: \"parallel processing\" }\n});\n```\n\n4. With Apple Notes:\n```typescript\n// Read notes aloud\nconst notes = await use_mcp_tool({\n  server_name: \"apple-notes-mcp\",\n  tool_name: \"search-notes\",\n  arguments: { query: \"meeting notes\" }\n});\n\nif (notes.length > 0) {\n  await use_mcp_tool({\n    server_name: \"say\",\n    tool_name: \"speak\",\n    arguments: {\n      text: notes[0].content,\n      voice: \"Karen\",\n      rate: 160\n    }\n  });\n}\n```\n\nExample:\n```typescript\nuse_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"speak\",\n  arguments: {\n    text: \"Hello, world!\",\n    voice: \"Victoria\",\n    rate: 200\n  }\n});\n```\n\n### list_voices\n\nList all available text-to-speech voices on the system.\n\nExample:\n```typescript\nuse_mcp_tool({\n  server_name: \"say\",\n  tool_name: \"list_voices\",\n  arguments: {}\n});\n```\n\n## Recommended Voices\n\n<table>\n<tr>\n<th>Voice</th>\n<th>Language/Region</th>\n<th>Intellectual Figure</th>\n<th>Haiku</th>\n<th>CLI Specification</th>\n</tr>\n<tr>\n<td>Anna (Premium)</td>\n<td>German</td>\n<td>Emmy Noether</td>\n<td>Symmetrie haucht Leben<br>Algebras verborgne Form<br>Abstraktion blüht<br><br><i>Symmetry breathes life<br>Algebra's hidden forms<br>Abstraction blooms</i></td>\n<td><code>-v \"Anna (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Emma (Premium)</td>\n<td>Italian</td>\n<td>Maria Adelaide Sneider</td>\n<td>Algoritmi in danza<br>Macchina sussurra dolce<br>Il codice vive<br><br><i>Algorithms dance<br>Machine whispers secrets soft<br>Code becomes alive</i></td>\n<td><code>-v \"Emma (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Federica (Premium)</td>\n<td>Italian</td>\n<td>Pia Nalli</td>\n<td>Teoremi fluenti<br>Numeri danzano liberi<br>Verità emerge<br><br><i>Flowing theorems dance<br>Numbers move in freedom's space<br>Truth emerges pure</i></td>\n<td><code>-v \"Federica (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Serena (Premium)</td>\n<td>English (UK)</td>\n<td>Bertha Swirles</td>\n<td>Quantum waves ripple<br>Through mathematical seas deep<br>Truth's light emerges<br><br><i>Quantum waves ripple<br>Through mathematical seas deep<br>Truth's light emerges</i></td>\n<td><code>-v \"Serena (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Petra (Premium)</td>\n<td>German</td>\n<td>Ruth Moufang</td>\n<td>Algebra spricht<br>In Symmetrien versteckt<br>Wahrheit erblüht<br><br><i>Algebra speaks soft<br>Hidden in symmetries pure<br>Truth blooms anew here</i></td>\n<td><code>-v \"Petra (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Yuna (Premium)</td>\n<td>Korean</td>\n<td>Hee Oh</td>\n<td>숨은 패턴 빛나고<br>마음의 방정식 핀다<br>지식 자라나<br><br><i>Hidden patterns gleam<br>Mind's equations softly bloom<br>Knowledge multiplies</i></td>\n<td><code>-v \"Yuna (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Alva (Premium)</td>\n<td>Swedish</td>\n<td>Sonja Korovkin</td>\n<td>Mönster flödar fritt<br>Genom tankens labyrinter<br>Visdom blomstrar här<br><br><i>Patterns flowing free<br>Through labyrinths of the mind<br>Wisdom blooms right here</i></td>\n<td><code>-v \"Alva (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Amélie (Premium)</td>\n<td>French (Canada)</td>\n<td>Sophie Germain</td>\n<td>Nombres premiers murmurent<br>Dansent entre les silences<br>Symétrie s'ouvre<br><br><i>Prime numbers whisper<br>Dancing between the silence<br>Symmetry unfolds</i></td>\n<td><code>-v \"Amélie (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Ewa (Premium)</td>\n<td>Polish</td>\n<td>Maria Wielgus</td>\n<td>Logiki korzenie<br>Matematyczne krainy<br>Myśl kiełkująca<br><br><i>Logic's tender roots<br>Mathematical landscapes<br>Thought's seeds germinate</i></td>\n<td><code>-v \"Ewa (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Kiyara (Premium)</td>\n<td>Hindi</td>\n<td>Shakuntala Devi</td>\n<td>गणित की लय में<br>अंक नृत्य करते हैं<br>ज्ञान जगता है<br><br><i>In rhythm of math<br>Numbers dance their sacred steps<br>Knowledge awakens</i></td>\n<td><code>-v \"Kiyara (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Majed (Premium)</td>\n<td>Arabic</td>\n<td>Maha Al-Aswad</td>\n<td>أرقام ترقص<br>في فضاء اللانهاية<br>الحقيقة تشرق<br><br><i>Numbers dance freely<br>In infinity's vast space<br>Truth rises like dawn</i></td>\n<td><code>-v \"Majed (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Tünde (Premium)</td>\n<td>Hungarian</td>\n<td>Julia Erdős</td>\n<td>Számok táncolnak<br>Végtelen térben szállnak<br>Igazság virrad<br><br><i>Numbers dance and soar<br>Through infinite space they glide<br>Truth dawns pure and bright</i></td>\n<td><code>-v \"Tünde (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Fiona (Enhanced)</td>\n<td>English (Scottish)</td>\n<td>Mary Somerville</td>\n<td>Highland mists reveal<br>Mathematical mysteries<br>Truth shines like the stars<br><br><i>Highland mists reveal<br>Mathematical mysteries<br>Truth shines like the stars</i></td>\n<td><code>-v \"Fiona (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Lesya (Enhanced)</td>\n<td>Ukrainian</td>\n<td>Olena Voinova</td>\n<td>Тиша говорить<br>Між зірками знання спить<br>Думка проростає<br><br><i>Silence speaks softly<br>Knowledge sleeps among the stars<br>Thought begins to grow</i></td>\n<td><code>-v \"Lesya (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Carmit (Enhanced)</td>\n<td>Hebrew</td>\n<td>Tali Seror</td>\n<td>מילים נושמות בשקט<br>בין שורות של דממה<br>שיר מתעורר<br><br><i>Words breathe silently<br>Between lines of deep stillness<br>Poem awakening</i></td>\n<td><code>-v \"Carmit (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Milena (Enhanced)</td>\n<td>Russian</td>\n<td>Olga Ladyzhenskaya</td>\n<td>Память шепчет нам<br>Уравнения текут<br>Истина молчит<br><br><i>Memory whispers<br>Equations flow like rivers<br>Truth speaks silently</i></td>\n<td><code>-v \"Milena (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Katya (Enhanced)</td>\n<td>Russian</td>\n<td>Sofia Kovalevskaya</td>\n<td>Числа танцуют<br>В пространстве бесконечном<br>Истина цветёт<br><br><i>Numbers dance freely<br>In space of infinity<br>Truth blooms like a flower</i></td>\n<td><code>-v \"Katya (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Damayanti (Enhanced)</td>\n<td>Indonesian</td>\n<td>Sri Pekerti</td>\n<td>Angka menari<br>Dalam ruang tak batas<br>Kebenaran tumbuh<br><br><i>Numbers dance gently<br>In boundless space they flutter<br>Truth grows like new leaves</i></td>\n<td><code>-v \"Damayanti (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Dariush (Enhanced)</td>\n<td>Persian</td>\n<td>Maryam Mirzakhani</td>\n<td>اعداد می رقصند<br>در فضای بی پایان<br>حقیقت می روید<br><br><i>Numbers dance with grace<br>In endless space they traverse<br>Truth springs forth anew</i></td>\n<td><code>-v \"Dariush (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Rocko (Italian)</td>\n<td>Italian</td>\n<td>Astro Boy (Tetsuwan Atomu)<br>Italian dub</td>\n<td>Robot di metallo<br>Cuore umano batte forte<br>Pace nel futuro<br><br><i>Metal robot form<br>Human heart beats strong within<br>Peace in future dawns</i></td>\n<td><code>-v \"Rocko (Italian (Italy))\"</code></td>\n</tr>\n<tr>\n<td>Rocko (Italian)</td>\n<td>Italian</td>\n<td>Jeeg Robot d'Acciaio<br>(Kōtetsu Jeeg)</td>\n<td>Acciaio lucente<br>Protettore dei deboli<br>Vola nel cielo<br><br><i>Shining steel warrior<br>Protector of the helpless<br>Soars through the heavens</i></td>\n<td><code>-v \"Rocko (Italian (Italy))\"</code></td>\n</tr>\n<tr>\n<td>Rocko (Italian)</td>\n<td>Italian</td>\n<td>Numero 5<br>(Short Circuit)</td>\n<td>Input infinito<br>La coscienza si risveglia<br>Vita artificiale<br><br><i>Infinite input<br>Consciousness awakening<br>Artificial life</i></td>\n<td><code>-v \"Rocko (Italian (Italy))\"</code></td>\n</tr>\n<tr>\n<td>Binbin (Enhanced)</td>\n<td>Chinese (Mainland)</td>\n<td>Li Shanlan</td>\n<td>算术之道流<br>数理演绎真理<br>智慧绽放<br><br><i>Arithmetic flows<br>Logic unfolds truth's pattern<br>Wisdom blossoms bright</i></td>\n<td><code>-v \"Binbin (Enhanced)\"</code></td>\n</tr>\n<tr>\n<td>Han (Premium)</td>\n<td>Chinese (Mainland)</td>\n<td>Chen Jingrun</td>\n<td>素数之舞动<br>哥德巴赫猜想<br>真理永恒<br><br><i>Prime numbers dancing<br>Goldbach's conjecture whispers<br>Truth eternal flows</i></td>\n<td><code>-v \"Han (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Lilian (Premium)</td>\n<td>Chinese (Mainland)</td>\n<td>Hua Luogeng</td>\n<td>数论之光芒<br>解析延续美<br>智慧升华<br><br><i>Number theory shines<br>Analysis extends grace<br>Wisdom ascends pure</i></td>\n<td><code>-v \"Lilian (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Meijia</td>\n<td>Chinese (Taiwan)</td>\n<td>Sun-Yung Alice Chang</td>\n<td>幾何之美現<br>曲率流動不息<br>空間展開<br><br><i>Geometry shows<br>Curvature flows endlessly<br>Space unfolds anew</i></td>\n<td><code>-v \"Meijia\"</code></td>\n</tr>\n<tr>\n<td>Sinji (Premium)</td>\n<td>Chinese (Hong Kong)</td>\n<td>Shing-Tung Yau</td>\n<td>流形之奧秘<br>卡拉比空間動<br>維度交織<br><br><i>Manifolds reveal<br>Calabi spaces in flow<br>Dimensions weave truth</i></td>\n<td><code>-v \"Sinji (Premium)\"</code></td>\n</tr>\n<tr>\n<td>Tingting</td>\n<td>Chinese (Mainland)</td>\n<td>Wang Zhenyi</td>\n<td>星辰轨迹明<br>天文数学融<br>智慧闪耀<br><br><i>Starlit paths shine bright<br>Astronomy meets numbers<br>Wisdom radiates</i></td>\n<td><code>-v \"Tingting\"</code></td>\n</tr>\n<tr>\n<td>Yue (Premium)</td>\n<td>Chinese (Mainland)</td>\n<td>Chern Shiing-shen</td>\n<td>微分几何<br>纤维丛中寻真<br>本质显现<br><br><i>Differential forms<br>In fiber bundles seek truth<br>Essence emerges</i></td>\n<td><code>-v \"Yue (Premium)\"</code></td>\n</tr>\n</table>\n\n## Configuration\n\nAdd the following to your MCP settings configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"say\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/say-mcp-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## Requirements\n\n- macOS (uses the built-in `say` command)\n- Node.js >= 14.0.0\n\n## Contributors\n\n- Barton Rhodes ([@bmorphism](https://github.com/bmorphism)) - barton@vibes.lol\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "bmorphism",
      "name": "bmorphism",
      "url": "https://github.com/bmorphism/say-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/bmorphism/say-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "say-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "say-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "3e7f600b-22bf-4a59-b6b1-749818c3c9bf",
    "name": "liuyoshio/mcp-compass",
    "description": "MCP Compass 🧭",
    "fullDescription": "# MCP Compass 🧭\n\n## MCP Discovery & Recommendation\n\n### Experience MCP Compass 🌐\n\nYou can now experience MCP discovery directly on our website!  \n👉 **[Explore MCP Compass](https://mcphub.io/)** 👈  \n\nDive in to discover the power of MCP services in action with real-time recommendations and insights.\n\n---\n\n## What is this? 🤔\n\nMCP Compass is a discovery & recommendation service that helps you explore Model Context Protocol servers. It acts as a smart guide that helps AI assistants find and understand available MCP services out there based on **natural language queries**, making it easier to discover and utilize the right tools for specific tasks.\n\n### Quick Example\n<div align=\"center\">\n  <img src=\"assets/demo.png\" alt=\"MCP Compass Demo - Airtable Server Search\" width=\"800\"/>\n</div>\n\n## Features 🌟\n\n- 🔍 **Smart Search**: Find MCP services using natural language queries\n- 📚 **Rich Metadata**: Get detailed information about each service\n- 🔄 **Real-time Updates**: Always up-to-date with the latest MCP services [![MCP Servers](https://img.shields.io/badge/MCP-Servers-red?logo=github)](https://github.com/modelcontextprotocol/servers)\n- 🤝 **Easy Integration**: Simple to integrate with any MCP-compatible AI assistant\n\n## Quick Start 🚀\n\n### Usage\n\n1. Clone the repository\n\nor \n\n2. Use `npx`\n\n\n### Installation\n\nFor Claude Desktop, edit your `claude_desktop_config.json` file:\n\n#### MacOS/Linux\n``` bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n#### Windows\n``` bash\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\n1. **As an MCP Service**:\n\n   Add to your AI assistant's MCP configuration to enable service discovery capabilities.\n   \n\n   ``` json\n   {\n   \"mcpServers\": {\n      \"mcp-compass\": {\n         \"command\": \"npx\",\n         \"args\": [\n            \"-y\",\n            \"@liuyoshio/mcp-compass\"\n         ]\n      }\n   }\n   }\n   ```\n\n   or\n\n   ``` json\n   {\n   \"mcpServers\": {\n      \"mcp-compass\": {\n         \"command\": \"node\",\n         \"args\": [\n            \"/path/to/repo/build/index.js\"\n         ]\n      }\n   }\n   }\n   ```\n\n\n\n## License 📝\n\nMIT License - See [LICENSE](LICENSE) file for details.\n\n## Support 💬\n\n- 🐛 [Report issues](https://github.com/liuyoshio/mcp-compass/issues)\n- 💡 [Feature requests](https://github.com/liuyoshio/mcp-compass/issues)\n- 📖 [Documentation](https://github.com/liuyoshio/mcp-compass)\n\n",
    "publisher": {
      "id": "liuyoshio",
      "name": "liuyoshio",
      "url": "https://github.com/liuyoshio/mcp-compass"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/liuyoshio/mcp-compass",
    "distribution": {
      "type": "npm",
      "package": "@liuyoshio/mcp-compass"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@liuyoshio/mcp-compass"
      ],
      "env": {}
    }
  },
  {
    "id": "3817e052-98a4-452e-b699-4acb60c868c1",
    "name": "evalstate/mcp-miro",
    "description": "mcp-miro MCP Server",
    "fullDescription": "# mcp-miro MCP Server\n\nA Model Context Protocol server to connect to the MIRO Whiteboard Application.\n\n- Allows Board manipulation, sticky creation, bulk operations and more.\n- Pass your OAuth key as an Environment Variable, or using the \"--token\" argument.\n- Taking a photo of stickies and asking Claude to create MIRO equivalent works _really_ well.\n\n## Installation\n\n### Installing via Smithery\n\nTo install MIRO Whiteboard Connector for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@llmindset/mcp-miro):\n\n```bash\nnpx -y @smithery/cli install @llmindset/mcp-miro --client claude\n```\n\n### Using mcp-get\n\nYou can install this package using mcp-get:\n\n```bash\nnpx @michaellatman/mcp-get@latest install @llmindset/mcp-miro\n```\n\n_Note - if you are using an old version of Windows PowerShell, you may need to run_ `Set-ExecutionPolicy Bypass -Scope Process` _before this command._\n\n## Features\n\n![MIRO/Claude Desktop Screenshot](./2024-12-02-screenshot_1.png)\n\n### Resources\n- Get Board Contents \n\n### Tools\n- Create Sticky, Shape\n- Read Board, Frame, Contents\n- Bulk Create\n\n### Prompts\n- Instruct on Board Coordinates etc.\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-miro\": {\n      \"command\": \"/path/to/node-or-npx\",\n      \"arguments\": [\n        \"/path/to/mcp-miro/build/index.js\",\n        \"--token\",\"MIRO-OAUTH-KEY\"\n      ]\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\nIn Dev environment recommend adding https://github.com/miroapp/api-clients/blob/041de24ebf7955432b447d887ede066ad4c7e2c7/packages/generator/spec.json for reference.\n",
    "publisher": {
      "id": "llmindset",
      "name": "llmindset",
      "url": "https://github.com/evalstate/mcp-miro"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/evalstate/mcp-miro",
    "distribution": {
      "type": "npm",
      "package": "@llmindset/mcp-miro"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@llmindset/mcp-miro",
        "--token",
        "$ENVARG_MIRO_OAUTH_TOKEN"
      ],
      "env": {
        "ENVARG_MIRO_OAUTH_TOKEN": {
          "description": "MIRO OAuth authentication token for API access",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "c34d4da5-e747-496c-b745-ef2e3b3e50dc",
    "name": "JetBrains/mcp-jetbrains",
    "description": "JetBrains MCP Proxy Server",
    "fullDescription": "# JetBrains MCP Proxy Server\n\nThe server proxies requests from client to JetBrains IDE.\n\n## Install MCP Server plugin\n\nhttps://plugins.jetbrains.com/plugin/26071-mcp-server\n\n## Usage with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`.\nThe full path on MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`, on Windows: `%APPDATA%/Claude/claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"jetbrains\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@jetbrains/mcp-proxy\"]\n    }\n  }\n}\n```\n\n## Configuration\n\nIf you're running multiple IDEs with MCP server and want to connect to the specific one, add to the MCP server configuration:\n```json\n\"env\": {\n  \"IDE_PORT\": \"<port of IDE's built-in webserver>\"\n}\n```\n\nBy default, we connect to IDE on  127.0.0.1 but you can specify a different address/host:\n```json\n\"env\": {\n  \"HOST\": \"<host/address of IDE's built-in webserver>\"\n}\n```\n\nTo enable logging add:\n```json\n\"env\": {\n  \"LOG_ENABLED\": \"true\"\n}\n```\n\n## How to build\n1. Tested on macOS\n2. `brew install node pnpm`\n3. Run `pnpm build` to build the project\n\n",
    "publisher": {
      "id": "jetbrains",
      "name": "jetbrains",
      "url": "https://github.com/JetBrains/mcp-jetbrains"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/JetBrains/mcp-jetbrains",
    "distribution": {
      "type": "npm",
      "package": "@jetbrains/mcp-proxy"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@jetbrains/mcp-proxy"
      ],
      "env": {
        "IDE_PORT": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "HOST": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "LOG_ENABLED": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "2fd3bc0f-0007-4d1d-9156-bea4db39d228",
    "name": "meilisearch/meilisearch-mcp",
    "description": "Meilisearch MCP Server",
    "fullDescription": "# Meilisearch MCP Server\n\nA Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces like Claude.\n\n## Features\n\n- Index and document management \n- Settings configuration and management\n- Task monitoring and API key management\n- Built-in logging and monitoring tools\n- Dynamic connection configuration to switch between Meilisearch instances\n- Smart search across single or multiple indices\n\n## Installation\n\n```bash\n# Clone repository\ngit clone <repository_url>\ncd meilisearch-mcp\n\n# Create virtual environment and install\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e .\n```\n\n## Requirements\n\n- Python ≥ 3.9\n- Running Meilisearch instance\n- Node.js (for testing with MCP Inspector)\n\n## Usage\n\n### Environment Variables\n\n```bash\nMEILI_HTTP_ADDR=http://localhost:7700  # Default Meilisearch URL\nMEILI_MASTER_KEY=your_master_key       # Optional: Default Meilisearch API key\n```\n\n### Dynamic Connection Configuration\n\nThe server provides tools to view and update connection settings at runtime:\n\n- `get-connection-settings`: View current connection URL and API key status\n- `update-connection-settings`: Update URL and/or API key to connect to a different Meilisearch instance\n\nExample usage through MCP:\n```json\n// Get current settings\n{\n  \"name\": \"get-connection-settings\"\n}\n\n// Update connection settings\n{\n  \"name\": \"update-connection-settings\",\n  \"arguments\": {\n    \"url\": \"http://new-host:7700\",\n    \"api_key\": \"new-api-key\"\n  }\n}\n```\n\n### Search Functionality\n\nThe server provides a flexible search tool that can search across one or all indices:\n\n- `search`: Search through Meilisearch indices with optional parameters\n\nExample usage through MCP:\n```json\n// Search in a specific index\n{\n  \"name\": \"search\",\n  \"arguments\": {\n    \"query\": \"search term\",\n    \"indexUid\": \"movies\",\n    \"limit\": 10\n  }\n}\n\n// Search across all indices\n{\n  \"name\": \"search\",\n  \"arguments\": {\n    \"query\": \"search term\",\n    \"limit\": 5,\n    \"sort\": [\"releaseDate:desc\"]\n  }\n}\n```\n\nAvailable search parameters:\n- `query`: The search query (required)\n- `indexUid`: Specific index to search in (optional)\n- `limit`: Maximum number of results per index (optional, default: 20)\n- `offset`: Number of results to skip (optional, default: 0)\n- `filter`: Filter expression (optional)\n- `sort`: Sorting rules (optional)\n\n### Running the Server\n\n```bash\npython -m src.meilisearch_mcp\n```\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"meilisearch\": {\n      \"command\": \"uvx\",\n      \"args\": [\"-n\", \"meilisearch-mcp\"]\n    }\n  }\n}\n```\n\n### Testing with MCP Inspector\n\n```bash\nnpx @modelcontextprotocol/inspector python -m src.meilisearch_mcp\n```\n\n## Available Tools\n\n### Connection Management\n- `get-connection-settings`: View current Meilisearch connection URL and API key status\n- `update-connection-settings`: Update URL and/or API key to connect to a different instance\n\n### Index Management\n- `create-index`: Create a new index with optional primary key\n- `list-indexes`: List all available indexes\n- `get-index-metrics`: Get detailed metrics for a specific index\n\n### Document Operations\n- `get-documents`: Retrieve documents from an index with pagination\n- `add-documents`: Add or update documents in an index\n\n### Search\n- `search`: Flexible search across single or multiple indices with filtering and sorting options\n\n### Settings Management\n- `get-settings`: View current settings for an index\n- `update-settings`: Update index settings (ranking, faceting, etc.)\n\n### API Key Management\n- `get-keys`: List all API keys\n- `create-key`: Create new API key with specific permissions\n- `delete-key`: Delete an existing API key\n\n### Task Management\n- `get-task`: Get information about a specific task\n- `get-tasks`: List tasks with optional filters:\n  - `limit`: Maximum number of tasks to return\n  - `from`: Number of tasks to skip\n  - `reverse`: Sort order of tasks\n  - `batchUids`: Filter by batch UIDs\n  - `uids`: Filter by task UIDs\n  - `canceledBy`: Filter by cancellation source\n  - `types`: Filter by task types\n  - `statuses`: Filter by task statuses\n  - `indexUids`: Filter by index UIDs\n  - `afterEnqueuedAt`/`beforeEnqueuedAt`: Filter by enqueue time\n  - `afterStartedAt`/`beforeStartedAt`: Filter by start time\n  - `afterFinishedAt`/`beforeFinishedAt`: Filter by finish time\n- `cancel-tasks`: Cancel pending or enqueued tasks\n- `delete-tasks`: Delete completed tasks\n\n### System Monitoring\n- `health-check`: Basic health check\n- `get-health-status`: Comprehensive health status\n- `get-version`: Get Meilisearch version information\n- `get-stats`: Get database statistics\n- `get-system-info`: Get system-level information\n\n## Contributing\n\n1. Fork repository\n2. Create feature branch\n3. Commit changes\n4. Create pull request\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "meilisearch",
      "name": "meilisearch",
      "url": "https://github.com/meilisearch/meilisearch-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/meilisearch/meilisearch-mcp",
    "distribution": {
      "type": "pip",
      "package": "meilisearch-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "meilisearch-mcp"
      ],
      "env": {
        "MEILI_HTTP_ADDR": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "MEILI_MASTER_KEY": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "e4559feb-5991-465a-af20-988f5cdcf66f",
    "name": "tinybirdco/mcp-tinybird",
    "description": "Tinybird MCP server",
    "fullDescription": "# Tinybird MCP server\n\nAn MCP server to interact with a Tinybird Workspace from any MCP client.\n\n## Features\n\n- Query Tinybird Data Sources using the Tinybird Query API\n- Get the result of existing Tinybird API Endpoints with HTTP requests\n- Push Datafiles\n\nIt supports both SSE and STDIO modes.\n\n## Usage examples\n\n- [Bluesky metrics](https://bsky.app/profile/alasdairb.com/post/3lbx2mq5urk22) ([Claude transcript](https://www.tinybird.co/blog-posts/claude-analyze-bluesky-data-tinybird-mcp-server))\n- [Web analytics starter kit metrics](https://github.com/tinybirdco/web-analytics-starter-kit) ([video](https://x.com/alrocar/status/1861849648882688341)]\n\n## Setup\n\n### Installation\n\n#### Using MCP package managers\n\n**Smithery**\n\nTo install Tinybird MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-tinybird):\n\n```bash\nnpx @smithery/cli install @tinybirdco/mcp-tinybird --client claude\n```\n\n**mcp-get**\n\nYou can install the Tinybird MCP server using [mcp-get](https://github.com/michaellatman/mcp-get):\n\n```bash\nnpx @michaellatman/mcp-get@latest install mcp-tinybird\n```\n\n### Prerequisites\n\nMCP is still very new and evolving, we recommend following the [MCP documentation](https://modelcontextprotocol.io/quickstart#prerequisites) to get the MCP basics up and running.\n\nYou'll need:\n- [Tinybird Account & Workspace](https://www.tinybird.co/)\n- [Claude Desktop](https://claude.ai/)\n- [uv](https://docs.astral.sh/uv/getting-started/installation/)\n\n### Configuration\n\n#### 1. Configure Claude Desktop\n\nCreate the following file depending on your OS:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nPaste this template in the file and replace `<TINYBIRD_API_URL>` and `<TINYBIRD_ADMIN_TOKEN>` with your Tinybird API URL and Admin Token:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-tinybird\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp-tinybird\",\n                \"stdio\"\n            ],\n            \"env\": {\n                \"TB_API_URL\": \"<TINYBIRD_API_URL>\",\n                \"TB_ADMIN_TOKEN\": \"<TINYBIRD_ADMIN_TOKEN>\"\n            }\n        }\n    }\n}\n```\n\n#### 2. Restart Claude Desktop\n\n\n#### SSE mode\n\nAlternatively, you can run the MCP server in SSE mode by running the following command:\n\n```bash\nuvx mcp-tinybird sse\n```\n\nThis mode is useful to integrate with an MCP client that supports SSE (like a web app).\n\n## Prompts\n\nThe server provides a single prompt:\n- [tinybird-default](https://github.com/tinybirdco/mcp-tinybird/blob/93dd9e1d3c0e33f408fe88297151a44c1dfc049c/src/mcp-tinybird/server.py#L20): Assumes you have loaded some data in Tinybird and want help exploring it.\n  - Requires a \"topic\" argument which defines the topic of the data you want to explore, for example, \"Bluesky data\" or \"retail sales\".\n\nYou can configure additional prompt workflows:\n  - Create a prompts Data Source in your workspace with this schema and append your prompts. The MCP loads `prompts` on initialization so you can configure it to your needs:\n```bash\nSCHEMA >\n    `name` String `json:$.name`,\n    `description` String `json:$.description`,\n    `timestamp` DateTime `json:$.timestamp`,\n    `arguments` Array(String) `json:$.arguments[:]`,\n    `prompt` String `json:$.prompt`\n```\n\n## Tools\n\nThe server implements several tools to interact with the Tinybird Workspace:\n- `list-data-sources`: Lists all Data Sources in the Tinybird Workspace\n- `list-pipes`: Lists all Pipe Endpoints in the Tinybird Workspace\n- `get-data-source`: Gets the information of a Data Source given its name, including the schema.\n- `get-pipe`: Gets the information of a Pipe Endpoint given its name, including its nodes and SQL transformation to understand what insights it provides.\n- `request-pipe-data`: Requests data from a Pipe Endpoints via an HTTP request. Pipe endpoints can have parameters to filter the analytical data.\n- `run-select-query`: Allows to run a select query over a Data Source to extract insights.\n- `append-insight`: Adds a new business insight to the memo resource\n- `llms-tinybird-docs`: Contains the whole Tinybird product documentation, so you can use it to get context about what Tinybird is, what it does, API reference and more.\n- `save-event`: This allows to send an event to a Tinybird Data Source. Use it to save a user generated prompt to the prompts Data Source. The MCP server feeds from the prompts Data Source on initialization so the user can instruct the LLM the workflow to follow.\n- `analyze-pipe`: Uses the Tinybird analyze API to run a ClickHouse explain on the Pipe Endpoint query and check if indexes, sorting key, and partition key are being used and propose optimizations suggestions\n- `push-datafile`: Creates a remote Data Source or Pipe in the Tinybird Workspace from a local datafile. Use the [Filesystem MCP](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to save files generated by this MCP server.\n\n\n## Development\n\n### Config\nIf you are working locally add two environment variables to a `.env` file in the root of the repository:\n\n```sh\nTB_API_URL=\nTB_ADMIN_TOKEN=\n```\n\nFor local development, update your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-tinybird_local\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/your/mcp-tinybird\",\n        \"run\",\n        \"mcp-tinybird\",\n        \"stdio\"\n      ]\n    }\n  }\n}\n```\n\n<details>\n  <summary>Published Servers Configuration</summary>\n\n  ```json\n  \"mcpServers\": {\n    \"mcp-tinybird\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-tinybird\"\n      ]\n    }\n  }\n  ```\n</details>\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/alrocar/gr/mcp-tinybird run mcp-tinybird\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n### Monitoring\n\nTo monitor the MCP server, you can use any compatible Prometheus client such as [Grafana](https://grafana.com/). Learn how to monitor your MCP server [here](./mcp-analytics/README.md).\n\n",
    "publisher": {
      "id": "tinybirdco",
      "name": "tinybirdco",
      "url": "https://github.com/tinybirdco/mcp-tinybird"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tinybirdco/mcp-tinybird",
    "distribution": {
      "type": "pip",
      "package": "mcp-tinybird"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-tinybird",
        "stdio"
      ],
      "env": {
        "TB_API_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "TB_ADMIN_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "4662ab72-6e14-4604-82ab-cbc2510603a6",
    "name": "ferrislucas/iterm-mcp",
    "description": "iterm-mcp ",
    "fullDescription": "# iterm-mcp \n\nA Model Context Protocol server that provides access to your iTerm session.\n\n### Features\n\n**Efficient Token Use:** iterm-mcp gives the model the ability to inspect only the output that the model is interested in. The model typically only wants to see the last few lines of output even for long running commands. \n\n**Natural Integration:** You share iTerm with the model. You can ask questions about what's on the screen, or delegate a task to the model and watch as it performs each step.\n\n**Full Terminal Control and REPL support:** The model can start and interact with REPL's as well as send control characters like ctrl-c, ctrl-z, etc.\n\n**Easy on the Dependencies:** iterm-mcp is built with minimal dependencies and is runnable via npx. It's designed to be easy to add to Claude Desktop and other MCP clients. It should just work.\n\n\n<a href=\"https://glama.ai/mcp/servers/h89lr05ty6\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/h89lr05ty6/badge\" alt=\"iTerm Server MCP server\" /></a>\n\n## Safety Considerations\n\n* The user is responsible for using the tool safely.\n* No built-in restrictions: iterm-mcp makes no attempt to evaluate the safety of commands that are executed.\n* Models can behave in unexpected ways. The user is expected to monitor activity and abort when appropriate.\n* For multi-step tasks, you may need to interrupt the model if it goes off track. Start with smaller, focused tasks until you're familiar with how the model behaves. \n\n### Tools\n- `write_to_terminal` - Writes to the active iTerm terminal, often used to run a command. Returns the number of lines of output produced by the command.\n- `read_terminal_output` - Reads the requested number of lines from the active iTerm terminal.\n- `send_control_character` - Sends a control character to the active iTerm terminal.\n\n### Requirements\n\n* iTerm2 must be running\n* Node version 18 or greater\n\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"iterm-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"iterm-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install iTerm for Claude Desktop automatically via [Smithery](https://smithery.ai/server/iterm-mcp):\n\n```bash\nnpx -y @smithery/cli install iterm-mcp --client claude\n```\n[![smithery badge](https://smithery.ai/badge/iterm-mcp)](https://smithery.ai/server/iterm-mcp)\n\n## Development\n\nInstall dependencies:\n```bash\nyarn install\n```\n\nBuild the server:\n```bash\nyarn run build\n```\n\nFor development with auto-rebuild:\n```bash\nyarn run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nyarn run inspector\nyarn debug <command>\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
    "publisher": {
      "id": "ferrislucas",
      "name": "ferrislucas",
      "url": "https://github.com/ferrislucas/iterm-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ferrislucas/iterm-mcp",
    "distribution": {
      "type": "npm",
      "package": "iterm-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "iterm-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "a83b1a55-88e6-42d3-8ae9-ab97e4861c67",
    "name": "yamaton/mcp-dice",
    "description": "mcp-dice: A MCP Server for Rolling Dice",
    "fullDescription": "# mcp-dice: A MCP Server for Rolling Dice\n\nA Model Context Protocol (MCP) server that enables Large Language Models (LLMs) to roll dice. It accepts standard dice notation (e.g., `1d20`) and returns both individual rolls and their sum.\n\n## Features\n\n- Supports standard dice notation (e.g., `1d20`, `3d6`, `2d8+1`)\n- Returns both individual rolls and the total sum\n- Easy integration with Claude Desktop\n- Compatible with MCP Inspector for debugging\n\n## Installation\n\n### Installing via Smithery\n\nTo install Dice Roller for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-dice):\n\n```bash\nnpx @smithery/cli install mcp-dice --client claude\n```\n\nMake `uv` available: https://docs.astral.sh/uv/getting-started/installation/\n\n## Usage\n\n### Basic Command Line Usage\n\n```shell\n# Using uvx\nuvx mcp-dice\n```\n\n### Input Format\n\nThe server accepts a JSON object with a `notation` field:\n```json\n{\n  \"notation\": \"2d6+3\"\n}\n```\n\nExample responses:\n```json\n{\n  \"rolls\": [\n    3,\n    1\n  ],\n  \"sum\": 4,\n  \"modifier\": 3,\n  \"total\": 7,\n  \"notation\": \"2d6+3\",\n  \"timestamp\": \"2024-12-03T16:36:38.926452\"\n}\n```\n\n## Claude Desktop Configuration\n\n### Location\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Examples\n\n<details>\n<summary>macOS Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-dice\"]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>WSL Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uvx mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell.\n</details>\n\n## Development and Debugging\n\n### Installing Development Dependencies\n\n```shell\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-dice\ncd mcp-dice\n\n# Install development dependencies\nuv pip install -e \".[dev]\"\n```\n\n### Running Tests\n\n```shell\nuv run pytest\n```\n\n### Using MCP Inspector\n\nThe [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is a useful tool for debugging your MCP server. Install and run it using npm:\n\n```shell\nnpx @modelcontextprotocol/inspector uvx mcp-dice\n```\n\n### Claude Desktop Configuration for Development\n\n<details>\n<summary>macOS configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"path/to/mcp-dice-repo\",\n        \"mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `path/to/mcp-dice-repo` with the path to the repository on your filesystem.\n</details>\n\n<details>\n<summary>Windows (WSL) configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uv run --directory path/to/mcp-dice-repo mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell. Also, replace `path/to/mcp-dice-repo` with the path to the repository on your WSL filesystem.\n</details>\n",
    "publisher": {
      "id": "yamaton",
      "name": "yamaton",
      "url": "https://github.com/yamaton/mcp-dice"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/yamaton/mcp-dice",
    "distribution": {
      "type": "pip",
      "package": "mcp-dice"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-dice"
      ],
      "env": {}
    }
  },
  {
    "id": "492c86a6-81a8-4aa6-a329-873563042ac5",
    "name": "tavily-ai/tavily-mcp",
    "description": "Tavily MCP Server 🚀",
    "fullDescription": "# Tavily MCP Server 🚀\n\nThe Model Context Protocol (MCP) is an open standard that enables AI systems to interact seamlessly with various data sources and tools, facilitating secure, two-way connections.\n\nDeveloped by Anthropic, the Model Context Protocol (MCP) enables AI assistants like Claude to seamlessly integrate with Tavily's advanced search and data extraction capabilities. This integration provides AI models with real-time access to web information, complete with sophisticated filtering options and domain-specific search features.\n\nThe Tavily MCP server provides:\n- Seamless interaction with the tavily-search and tavily-extract tools\n- Real-time web search capabilities through the tavily-search tool\n- Intelligent data extraction from web pages via the tavily-extract tool\n\n\n## Prerequisites 🔧\n\nBefore you begin, ensure you have:\n\n- [Tavily API key](https://app.tavily.com/home)\n  - If you don't have a Tavily API key, you can sign up for a free account [here](https://app.tavily.com/home)\n- [Claude Desktop](https://claude.ai/download) or [Cursor](https://cursor.sh)\n- [Node.js](https://nodejs.org/) (v20 or higher)\n  - You can verify your Node.js installation by running:\n    - `node --version`\n- [Git](https://git-scm.com/downloads) installed (only needed if using Git installation method)\n  - On macOS: `brew install git`\n  - On Linux: \n    - Debian/Ubuntu: `sudo apt install git`\n    - RedHat/CentOS: `sudo yum install git`\n  - On Windows: Download [Git for Windows](https://git-scm.com/download/win)\n\n## Tavily MCP server installation ⚡\n\nTo install the tavily-mcp server, you can use the following methods:\n1. Running with NPX \n2. Git installation\n\n### 1. Running with NPX \n\n```bash\nnpx -y tavily-mcp@0.1.3  \n```\n\nAlthough you can launch a server on its own, it's not particularly helpful in isolation. Instead, you should integrate it into an MCP client. Below is an example of how to configure the Claude Desktop app to work with the tavily-mcp server.\n\n\n## Configuring MCP Clients ⚙️\n\nThis repository will explain how to configure both [Cursor](https://cursor.sh) and [Claude Desktop](https://claude.ai/desktop) to work with the tavily-mcp server.\n\n### Configuring Cursor 🖥️\n\n> **Note**: Requires Cursor version 0.45.6 or higher\n\nTo set up the Tavily MCP server in Cursor:\n\n1. Open Cursor Settings\n2. Navigate to Features > MCP Servers\n3. Click on the \"+ Add New MCP Server\" button\n4. Fill out the following information:\n   - **Name**: Enter a nickname for the server (e.g., \"tavily-mcp\")\n   - **Type**: Select \"command\" as the type\n   - **Command**: Enter the command to run the server:\n     ```bash\n     env TAVILY_API_KEY=your-api-key npx -y tavily-mcp@0.1.3\n     ```\n     > **Important**: Replace `your-api-key` with your Tavily API key. You can get one at [app.tavily.com/home](https://app.tavily.com/home)\n\nAfter adding the server, it should appear in the list of MCP servers. You may need to manually press the refresh button in the top right corner of the MCP server to populate the tool list.\n\nThe Composer Agent will automatically use the Tavily MCP tools when relevant to your queries. It is better to explicitly request to use the tools by describing what you want to do (e.g., \"User tavily-search to search the web for the latest news on AI\"). On mac press command + L to open the chat, select the composer option at the top of the screen, beside the submit button select agent and submit the query when ready.\n\n![Cursor Interface Example](./assets/cursor-reference.png)\n\n### Configuring the Claude Desktop app 🖥️\n### For macOS:\n\n```bash\n# Create the config file if it doesn't exist\ntouch \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n\n# Opens the config file in TextEdit \nopen -e \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n\n# Alternative method using Visual Studio Code (requires VS Code to be installed)\ncode \"$HOME/Library/Application Support/Claude/claude_desktop_config.json\"\n```\n\n### For Windows:\n```bash\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n### Add the Tavily server configuration:\n\nReplace `your-api-key-here` with your actual [Tavily API key](https://tavily.com/api-keys).\n\n```json\n{\n  \"mcpServers\": {\n    \"tavily-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"tavily-mcp@0.1.2\"],\n      \"env\": {\n        \"TAVILY_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n### 2. Git Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/tavily-ai/tavily-mcp.git\ncd tavily-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n### Configuring the Claude Desktop app ⚙️\nFollow the configuration steps outlined in the [Configuring the Claude Desktop app](#configuring-the-claude-desktop-app-️) section above, using the below JSON configuration.\n\nReplace `your-api-key-here` with your actual [Tavily API key](https://tavily.com/api-keys) and `/path/to/tavily-mcp` with the actual path where you cloned the repository on your system.\n\n```json\n{\n  \"mcpServers\": {\n    \"tavily\": {\n      \"command\": \"npx\",\n      \"args\": [\"/path/to/tavily-mcp/build/index.js\"],\n      \"env\": {\n        \"TAVILY_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Usage in Claude Desktop App 🎯\n\nOnce the installation is complete, and the Claude desktop app is configured, you must completely close and re-open the Claude desktop app to see the tavily-mcp server. You should see a hammer icon in the bottom left of the app, indicating available MCP tools, you can click on the hammer icon to see more detial on the tavily-search and tavily-extract tools.\n\n![Alt text](./assets/claude-desktop-ref.png)\n\nNow claude will have complete access to the tavily-mcp server, including the tavily-search and tavily-extract tools. If you insert the below examples into the Claude desktop app, you should see the tavily-mcp server tools in action.\n\n### Tavily Search Examples\n\n1. **General Web Search**:\n```\nCan you search for recent developments in quantum computing?\n```\n\n2. **News Search**:\n```\nSearch for news articles about AI startups from the last 7 days.\n```\n\n3. **Domain-Specific Search**:\n```\nSearch for climate change research on nature.com and sciencedirect.com\n```\n\n### Tavily Extract Examples \n\n1. **Extract Article Content**:\n```\nExtract the main content from this article: https://example.com/article\n```\n\n### ✨ Combine Search and Extract ✨\n\nYou can also combine the tavily-search and tavily-extract tools to perform more complex tasks.\n\n```\nSearch for news articles about AI startups from the last 7 days and extract the main content from each article to generate a detailed report.\n```\n\n## Troubleshooting 🛠️\n\n### Common Issues\n\n1. **Server Not Found**\n   - Verify the npm installation by running `npm --verison`\n   - Check Claude Desktop configuration syntax by running `code ~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   - Ensure Node.js is properly installed by running `node --version`\n   \n2. **NPX related issues**\n  - If you encounter errors related to `npx`, you may need to use the full path to the npx executable instead. \n  - You can find this path by running `which npx` in your terminal, then replace the `\"command\":  \"npx\"` line with `\"command\": \"/full/path/to/npx\"` in your configuration.\n\n3. **API Key Issues**\n   - Confirm your Tavily API key is valid\n   - Check the API key is correctly set in the config\n   - Verify no spaces or quotes around the API key\n\n## Acknowledgments ✨\n\n- [Model Context Protocol](https://modelcontextprotocol.io) for the MCP specification\n- [Anthropic](https://anthropic.com) for Claude Desktop\n\n",
    "publisher": {
      "id": "tavily-ai",
      "name": "tavily-ai",
      "url": "https://github.com/tavily-ai/tavily-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tavily-ai/tavily-mcp",
    "distribution": {
      "type": "npm",
      "package": "tavily-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "tavily-mcp"
      ],
      "env": {
        "TAVILY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "21d3018c-a334-4205-9405-2e409ccb7f63",
    "name": "evalstate/mcp-hfspace",
    "description": "mcp-hfspace MCP Server 🤗",
    "fullDescription": "# mcp-hfspace MCP Server 🤗\n\nRead the introduction here [llmindset.co.uk/resources/mcp-hfspace/](https://llmindset.co.uk/resources/mcp-hfspace/)\n\nConnect to [Hugging Face Spaces](https://huggingface.co/spaces)  with minimal setup needed - simply add your spaces and go!\n\nBy default, it connects to `evalstate/FLUX.1-schnell` providing Image Generation capabilities to Claude Desktop.\n\n## Installation\n\nNPM Package is `@llmindset/mcp-hfspsace`.\n\nInstall a recent version of [NodeJS](https://nodejs.org/en/download) for your platform, then add the following to the `mcpServers` section of your `claude_desktop_config.json` file:\n\n```json\n    \"mcp=hfspace\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@llmindset/mcp-hfspace\"\n      ]\n    }\n```\n\nPlease make sure you are using Claude Desktop 0.78 or greater.\n\nThis will get you started with an Image Generator.\n\n### Basic setup\n\nSupply a list of HuggingFace spaces in the arguments. mcp-hfspace will find the most appropriate endpoint and automatically configure it for usage. An example `claude_desktop_config.json` is supplied [below](#installation).\n\nBy default the current working directory is used for file upload/download. On Windows this is a read/write folder at `\\users\\<username>\\AppData\\Roaming\\Claude\\<version.number\\`, and on MacOS it is the is the read-only root: `/`.\n\nIt is recommended to override this and set a Working Directory for handling the upload and download of images and other file-based content. Specify either the `--work-dir=/your_directory` argument or `MCP_HF_WORK_DIR` environment variable.\n\nAn example configuration for using a modern image generator, vision model and text to speech is below with a working directory set is below:\n\n```json\n    \"mcp-hfspace\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@llmindset/mcp-hfspace\",\n        \"--work-dir=/Users/evalstate/mcp-store\",\n        \"shuttleai/shuttle-jaguar\",\n        \"styletts2/styletts2\",\n        \"Qwen/QVQ-72B-preview\"\n      ]\n    }\n```\n\n\nTo use private spaces, supply your Hugging Face Token with either the  `--hf-token=hf_...` argument or `HF_TOKEN` environment variable.\n\nIt's possible to run multiple server instances to use different working directories and tokens if needed.\n\n## File Handling and Claude Desktop Mode\n\nBy default, the Server operates in _Claude Desktop Mode_. In this mode, Images are returned in the tool responses, while other files are saved in the working folder, their file path is returned as a message. This will usually give the best experience if using Claude Desktop as the client.\n\nURLs can also be supplied as inputs: the content gets passed to the Space.\n\nThere is an \"Available Resources\" prompt that gives Claude the available files and mime types from your working directory. This is currently the best way to manage files.\n\n### Example 1 - Image Generation (Download Image / Claude Vision)\n\nWe'll use Claude to compare images created by `shuttleai/shuttle-3.1-aesthetic` and `FLUX.1-schnell`. The images gets saved to the Work Directory, as well as included in Claude's context window - so Claude can use its vision capabilities.\n\n![Image Generation Comparison](./images/2024-12-05-flux-shuttle.png)\n\n### Example 2 - Vision Model (Upload Image)\n\nWe'll use `merve/paligemma2-vqav2` [space link](https://huggingface.co/spaces/merve/paligemma2-vqav2) to query an image. In this case, we specify the filename which is available in the Working Directory: we  don't want to upload the Image directly to Claude's context window. So, we can prompt Claude:\n\n`use paligemma to find out who is in \"test_gemma.jpg\"` -> `Text Output: david bowie`\n![Vision - File Upload](./images/2024-12-09-bowie.png)\n\n_If you are uploading something to Claude's context use the Paperclip Attachment button, otherwise specify the filename for the Server to send directly._\n\nWe can also supply a URL. For example : `use paligemma to detect humans in https://e3.365dm.com/24/12/1600x900/skynews-taylor-swift-eras-tour_6771083.jpg?20241209000914` -> `One person is detected in the image - Taylor Swift on stage.`\n\n### Example 3 - Text-to-Speech (Download Audio)\n\nIn _Claude Desktop Mode_, the audio file is saved in the WORK_DIR, and Claude is notified of the creation. If not in desktop mode, the file is returned as a base64 encoded resource to the Client (useful if it supports embedded Audio attachments).\n\n![Voice Production](./images/2024-12-08-mcp-parler.png)\n\n### Example 4 - Speech-to-Text (Upload Audio)\n\nHere, we use `hf-audio/whisper-large-v3-turbo` to transcribe some audio, and make it available to Claude.\n\n![Audio Transcribe](./images/2024-12-09-transcribe.png)\n\n### Example 5 - Image-to-Image\n\nIn this example, we specify the filename for `microsoft/OmniParser` to use, and get returned an annotated Image and 2 separate pieces of text: descriptions and coordinates. The prompt used was `use omniparser to analyse ./screenshot.png` and `use the analysis to produce an artifact that reproduces that screen`. `DawnC/Pawmatch` is also good at this.\n\n![Omniparser and Artifact](./images/2024-12-08-mcp-omni-artifact.png)\n\n### Example 6 - Chat\n\nIn this example, Claude sets a number of reasoning puzzles for Qwen, and asks follow-up questions for clarification.\n\n![Qwen Reasoning Test](./images/2024-12-09-qwen-reason.png)\n\n### Specifying API Endpoint\n\nIf you need, you can specify a specific API Endpoint by adding it to the spacename. So rather than passing in `Qwen/Qwen2.5-72B-Instruct` you would use `Qwen/Qwen2.5-72B-Instruct/model_chat`.\n\n### Claude Desktop Mode\n\nThis can be disabled with the option --desktop-mode=false or the environment variable CLAUDE_DESKTOP_MODE=false. In this case, content as returned as an embedded Base64 encoded Resource.\n\n## Recommended Spaces\n\nSome recommended spaces to try:\n\n### Image Generation\n\n- shuttleai/shuttle-3.1-aesthetic\n- black-forest-labs/FLUX.1-schnell\n- yanze/PuLID-FLUX\n- Inspyrenet-Rembg (Background Removal)\n- diyism/Datou1111-shou_xin - [Beautiful Pencil Drawings](https://x.com/ClementDelangue/status/1867318931502895358) \n\n### Chat\n\n- Qwen/Qwen2.5-72B-Instruct\n- prithivMLmods/Mistral-7B-Instruct-v0.3\n\n### Text-to-speech / Audio Generation\n\n- fantaxy/Sound-AI-SFX\n- parler-tts/parler_tts\n\n### Speech-to-text\n\n- hf-audio/whisper-large-v3-turbo\n- (the openai models use unnamed parameters so will not work)\n\n### Text-to-music\n\n- haoheliu/audioldm2-text2audio-text2music\n\n### Vision Tasks\n\n- microsoft/OmniParser\n- merve/paligemma2-vqav2\n- merve/paligemma-doc\n- DawnC/PawMatchAI \n- DawnC/PawMatchAI/on_find_match_click - for interactive dog recommendations\n\n## Other Features\n\n### Prompts\n\nPrompts for each Space are generated, and provide an opportunity to input. Bear in mind that often Spaces aren't configured with particularly helpful labels etc. Claude is actually very good at figuring this out, and the Tool description is quite rich (but not visible in Claude Desktop).\n\n### Resources\n\nA list of files in the WORK_DIR is returned, and as a convenience returns the name as \"Use the file...\" text. If you want to add something to Claude's context, use the paperclip - otherwise specify the filename for the MCP Server. Claude does not support transmitting resources from within Context.\n\n### Private Spaces\n\nPrivate Spaces are supported with a HuggingFace token. The Token is used to download and save generated content.\n\n### Using Claude Desktop\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-hfspace\": {\n      \"command\": \"npx\"\n      \"args:\" [\n        \"-y\",\n        \"@llmindset/mcp-hfspace\",\n        \"--work-dir=~/mcp-files/ or x:/temp/mcp-files/\",\n        \"--HF_TOKEN=HF_{optional token}\"\n        \"Qwen/Qwen2-72B-Instruct\",\n        \"black-forest-labs/FLUX.1-schnell\",\n        \"space/example/specific-endpint\"\n        (... and so on)\n        ]\n    }\n  }\n}\n```\n\n## Known Issues and Limitations\n\n### mcp-hfspace\n\n- Endpoints with unnamed parameters are unsupported for the moment.\n- Full translation from some complex Python types to suitable MCP formats.\n\n### Claude Desktop\n\n- Claude Desktop 0.75 doesn't seem to respond to errors from the MCP Server, timing out instead. For persistent issues, use the MCP Inspector to get a better look at diagnosing what's going wrong. If something suddenly stops working, it's probably due to exhausting your HuggingFace ZeroGPU quota - try again after a short period, or set up your own Space for hosting.\n- Claude Desktop seems to use a hard timeout value of 60s, and doesn't appear  to use Progress Notifications to manage UX or keep-alive. If you are using ZeroGPU spaces, large/heavy jobs may timeout. Check the WORK_DIR for results though; the MCP Server will still capture and save the result if it was produced.\n- Claude Desktops reporting of Server Status, logging etc. isn't great - use [@modelcontextprotocol/inspector](https://github.com/modelcontextprotocol/inspector) to help diagnose issues.\n\n### HuggingFace Spaces\n\n- If ZeroGPU quotas or queues are too long, try duplicating the space. If your job takes less than sixty seconds, you can usually change the function decorator `@spaces.GPU(duration=20)` in `app.py` to request less quota when running the job.\n- If you have a HuggingFace Pro account, please note that The Gradio API does not your additional quote for ZeroGPU jobs - you will need to set an `X-IP-Token` header to achieve that.\n- If you have a private space, and dedicated hardware your HF_TOKEN will give you direct access to that - no quota's apply. I recommend this if you are using for any kind of Production task.\n\n## Third Party MCP Services\n\n<a href=\"https://glama.ai/mcp/servers/s57c80wvgq\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/s57c80wvgq/badge\" alt=\"mcp-hfspace MCP server\" /></a>\n",
    "publisher": {
      "id": "llmindset",
      "name": "llmindset",
      "url": "https://github.com/evalstate/mcp-hfspace"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/evalstate/mcp-hfspace",
    "distribution": {
      "type": "npm",
      "package": "@llmindset/mcp-hfspace"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@llmindset/mcp-hfspace"
      ],
      "env": {
        "MCP_HF_WORK_DIR": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "HF_TOKEN": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "f30a9c1d-4482-48a0-a1c5-6dfefece6c64",
    "name": "kennethreitz/mcp-applemusic",
    "description": "MCP-AppleMusic",
    "fullDescription": "# MCP-AppleMusic\n\nA FastMCP server implementation for controlling Apple Music (formerly iTunes) on macOS through AppleScript commands.\n\n## Requirements\n\n- Python 3.13+\n- macOS with Apple Music app installed\n- MCP library ≥1.2.1\n\n## Installation\n\nFirst, ensure you have uv installed:\n```bash\n$ brew install uv\n```\n\nThen, with **Claude Desktop**, add the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"iTunesControlServer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"-n\", \"mcp-applemusic\"]\n    }\n  }\n}\n```\n\n## Available Commands\n\nThe following commands are available through the MCP server:\n\n```python\nitunes_play()         # Start playback\nitunes_pause()        # Pause playback\nitunes_next()         # Skip to next track\nitunes_previous()     # Go to previous track\nitunes_search(query)  # Search library for tracks\nitunes_play_song(song)  # Play specific song\nitunes_create_playlist(name, songs)  # Create new playlist\nitunes_library()      # Get library statistics\n```\n\n## Usage\n\nStart the server:\n\n```bash\npython server.py\n```\n\nExample interactions:\n\n```python\n# Search for a song\nresults = itunes_search(\"Hey Jude\")\n\n# Create a new playlist\nitunes_create_playlist(\"Beatles Favorites\", [\"Yesterday\", \"Hey Jude\", \"Let It Be\"])\n\n# Play a specific song\nitunes_play_song(\"Hey Jude\")\n```\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/mcp-applemusic.git\ncd mcp-applemusic\n```\n\n2. Install development dependencies:\n```bash\npip install -e \".[dev]\"\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Notes\n\n- This tool only works on macOS systems due to its AppleScript dependency\n- Requires Apple Music (formerly iTunes) to be installed\n",
    "publisher": {
      "id": "kennethreitz",
      "name": "kennethreitz",
      "url": "https://github.com/kennethreitz/mcp-applemusic"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kennethreitz/mcp-applemusic",
    "distribution": {
      "type": "pip",
      "package": "mcp-applemusic"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-applemusic"
      ],
      "env": {}
    }
  },
  {
    "id": "d2aefeaa-a85e-45cc-a412-92dd44a85812",
    "name": "cosmix/jira-mcp",
    "description": "JIRA MCP Server",
    "fullDescription": "# JIRA MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides access to JIRA data with relationship tracking, optimized data payloads, and data cleaning for AI context windows.\n\n## Features\n\n- Search JIRA issues using JQL (maximum 50 results per request)\n- Retrieve epic children with comment history and optimized payloads (maximum 100 issues per request)\n- Get detailed issue information including comments and related issues\n- Create, update, and manage JIRA issues\n- Extract issue mentions from Atlassian Document Format\n- Track issue relationships (mentions, links, parent/child, epics)\n- Clean and transform rich JIRA content for AI context efficiency\n- Support for file attachments with secure multipart upload handling\n\n## Prerequisites\n\n- [Bun](https://bun.sh) (v1.0.0 or higher)\n- JIRA account with API access\n\n## Environment Variables\n\n```bash\nJIRA_API_TOKEN=your_api_token\nJIRA_BASE_URL=your_jira_instance_url  # e.g., https://your-domain.atlassian.net\nJIRA_USER_EMAIL=your_email\n```\n\n## Installation & Setup\n\n### 1. Clone the repository:\n```bash\ngit clone [repository-url]\ncd jira-mcp\n```\n\n### 2. Install dependencies and build:\n```bash\nbun install\nbun run build\n```\n\n### 3. Configure the MCP server:\n\nEdit the appropriate configuration file:\n\n**macOS:**\n- Cline: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n- Claude Desktop: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n**Windows:**\n- Cline: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n- Claude Desktop: `%APPDATA%\\Claude Desktop\\claude_desktop_config.json`\n\n**Linux:**\n- Cline: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n- Claude Desktop: _sadly doesn't exist yet_\n\nAdd the following configuration under the `mcpServers` object:\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/jira-mcp/build/index.js\"],\n      \"env\": {\n        \"JIRA_API_TOKEN\": \"your_api_token\",\n        \"JIRA_BASE_URL\": \"your_jira_instance_url\",\n        \"JIRA_USER_EMAIL\": \"your_email\"\n      }\n    }\n  }\n}\n```\n\n### 4. Restart the MCP server.\nWithin Cline's MCP settings, restart the MCP server. Restart Claude Desktop to load the new MCP server.\n\n## Development\n\nRun tests:\n```bash\nbun test\n```\n\nWatch mode for development:\n```bash\nbun run dev\n```\n\nTo rebuild after changes:\n```bash\nbun run build\n```\n\n## Available MCP Tools\n\n### search_issues\nSearch JIRA issues using JQL. Returns up to 50 results per request.\n\nInput Schema:\n```typescript\n{\n  searchString: string // JQL search string\n}\n```\n\n### get_epic_children\nGet all child issues in an epic including their comments and relationship data. Limited to 100 issues per request.\n\nInput Schema:\n```typescript\n{\n  epicKey: string // The key of the epic issue\n}\n```\n\n### get_issue\nGet detailed information about a specific JIRA issue including comments and all relationships.\n\nInput Schema:\n```typescript\n{\n  issueId: string // The ID or key of the JIRA issue\n}\n```\n\n### create_issue\nCreate a new JIRA issue with specified fields.\n\nInput Schema:\n```typescript\n{\n  projectKey: string, // The project key where the issue will be created\n  issueType: string, // The type of issue (e.g., \"Bug\", \"Story\", \"Task\")\n  summary: string, // The issue summary/title\n  description?: string, // Optional issue description\n  fields?: { // Optional additional fields\n    [key: string]: any\n  }\n}\n```\n\n### update_issue\nUpdate fields of an existing JIRA issue.\n\nInput Schema:\n```typescript\n{\n  issueKey: string, // The key of the issue to update\n  fields: { // Fields to update\n    [key: string]: any\n  }\n}\n```\n\n### add_attachment\nAdd a file attachment to a JIRA issue.\n\nInput Schema:\n```typescript\n{\n  issueKey: string, // The key of the issue\n  fileContent: string, // Base64 encoded file content\n  filename: string // Name of the file to be attached\n}\n```\n\n## Data Cleaning Features\n\n- Extracts text from Atlassian Document Format\n- Tracks issue mentions in descriptions and comments\n- Maintains formal issue links with relationship types\n- Preserves parent/child relationships\n- Tracks epic associations\n- Includes comment history with author information\n- Removes unnecessary metadata from responses\n- Recursively processes content nodes for mentions\n- Deduplicates issue mentions\n\n## Technical Details\n\n- Built with TypeScript in strict mode\n- Uses Bun runtime for improved performance\n- Vite for optimized builds\n- Uses JIRA REST API v3\n- Basic authentication with API tokens\n- Batched API requests for related data\n- Optimized response payloads for AI context windows\n- Efficient transformation of complex Atlassian structures\n- Robust error handling\n- Rate limiting considerations\n- Maximum limits:\n  - Search results: 50 issues per request\n  - Epic children: 100 issues per request\n- Support for multipart form data for secure file attachments\n- Automatic content type detection and validation\n\n## Error Handling\n\nThe server implements a comprehensive error handling strategy:\n\n- Network error detection and appropriate messaging\n- HTTP status code handling (especially 404 for issues)\n- Detailed error messages with status codes\n- Error details logging to console\n- Input validation for all parameters\n- Safe error propagation through MCP protocol\n- Specialized handling for common JIRA API errors\n- Base64 validation for attachments\n- Multipart request failure handling\n- Rate limit detection\n- Attachment parameter validation\n\n## LICENCE\n\nThis project is licensed under the MIT License - see the [LICENCE](LICENCE) file for details.\n",
    "publisher": {
      "id": "cosmix",
      "name": "cosmix",
      "url": "https://github.com/cosmix/jira-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cosmix/jira-mcp",
    "distribution": {
      "type": "npm",
      "package": "jira-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "jira-mcp"
      ],
      "env": {
        "JIRA_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_BASE_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_USER_EMAIL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "40b2e86e-a9ee-42ff-b654-67d90a483cf8",
    "name": "superseoworld/mcp-spotify",
    "description": "MCP Spotify Server",
    "fullDescription": "# MCP Spotify Server\n\nA Model Context Protocol (MCP) server that provides access to the Spotify Web API. This server enables interaction with Spotify's music catalog, including searching for tracks, albums, and artists, as well as accessing artist-specific information like top tracks and related artists.\n\n## Installation\n\n```bash\nnpx -y @thomaswawra/server-spotify\n```\n\n## Configuration\n\nAdd to your MCP settings file (e.g., `claude_desktop_config.json` or `cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"spotify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@thomaswawra/server-spotify\"],\n      \"env\": {\n        \"SPOTIFY_CLIENT_ID\": \"your_client_id\",\n        \"SPOTIFY_CLIENT_SECRET\": \"your_client_secret\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nYou'll need to provide your Spotify API credentials:\n1. Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard)\n2. Create a new application\n3. Get your Client ID and Client Secret\n4. Add them to the configuration as shown above\n\n## Features\n\n- Search for tracks, albums, artists, and playlists\n- Get artist information including top tracks and related artists\n- Get album information and tracks\n- Access new releases and recommendations\n- Get audiobook information with market-specific content and chapters\n- Note: Audiobook endpoints may require additional authentication or market-specific access\n- Get and modify playlist information (name, description, public/private status)\n- Access playlist tracks and items with pagination support\n- Support for both Spotify IDs and URIs\n- Automatic token management with client credentials flow\n\n## Available Tools\n\n- `get_access_token`: Get a valid Spotify access token\n- `search`: Search for tracks, albums, artists, or playlists\n- `get_artist`: Get artist information\n- `get_artist_top_tracks`: Get an artist's top tracks\n- `get_artist_related_artists`: Get artists similar to a given artist\n- `get_artist_albums`: Get an artist's albums\n- `get_album`: Get album information\n- `get_album_tracks`: Get an album's tracks\n- `get_track`: Get track information\n- `get_new_releases`: Get new album releases\n- `get_recommendations`: Get track recommendations\n- `get_audiobook`: Get audiobook information with optional market parameter\n- `get_multiple_audiobooks`: Get information for multiple audiobooks (max 50)\n- `get_audiobook_chapters`: Get chapters of an audiobook with pagination support (1-50 chapters per request)\n- `get_playlist`: Get a playlist owned by a Spotify user\n- `get_playlist_tracks`: Get full details of the tracks of a playlist (1-100 tracks per request)\n- `get_playlist_items`: Get full details of the items of a playlist (1-100 items per request)\n- `modify_playlist`: Change playlist details (name, description, public/private state, collaborative status)\n- `add_tracks_to_playlist`: Add one or more tracks to a playlist with optional position\n- `remove_tracks_from_playlist`: Remove one or more tracks from a playlist with optional positions and snapshot ID\n- `get_current_user_playlists`: Get a list of the playlists owned or followed by the current Spotify user (1-50 playlists per request)\n\n## License\n\nMIT License\n",
    "publisher": {
      "id": "thomaswawra",
      "name": "thomaswawra",
      "url": "https://github.com/superseoworld/mcp-spotify"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/superseoworld/mcp-spotify",
    "distribution": {
      "type": "npm",
      "package": "@thomaswawra/server-spotify"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@thomaswawra/server-spotify"
      ],
      "env": {
        "SPOTIFY_CLIENT_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SPOTIFY_CLIENT_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5f45b7f7-7e4f-4f94-bfff-0a383ec0ef14",
    "name": "tatn/mcp-server-diff-typescript",
    "description": "mcp-server-diff-typescript MCP Server",
    "fullDescription": "# mcp-server-diff-typescript MCP Server\n\nA Model Context Protocol server that provides unified diff generation capabilities.\n\nThis TypeScript-based MCP server implements a diff generation system. It provides a tool to generate unified diffs between two text strings, which is useful for comparing and analyzing text differences.\n\n## Features\n\n### Tools\n\n- `get-unified-diff` - Generate unified diff between two text strings\n  - Takes `oldString` and `newString` as required parameters\n  - Returns the difference in unified diff format\n  - Uses the `diff` package for accurate difference detection\n  - Includes 3 lines of context around changes\n\n## Installation\n\n### As a Global Package\n\n```bash\nnpm install -g mcp-server-diff-typescript\n```\n\n### As a Project Dependency\n\n```bash\nnpm install mcp-server-diff-typescript\n```\n\n## Usage\n\n### Using with Claude Desktop\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n\n```json\n\"mcpServers\": {\n  \"mcp-server-diff-typescript\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"-y\",\n      \"mcp-server-diff-typescript\"\n    ]\n  }\n}\n```\n\nor Add the following configuration:\n\n```bash\ngit clone https://github.com/tatn/mcp-server-diff-typescript.git\ncd mcp-server-diff-typescript\nnpm install\nnpm run build\n```\n\n```json\n\"mcpServers\": {\n  \"mcp-server-diff-typescript\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"/path/to/mcp-server-diff-typescript/build/index.js\"\n    ]\n  }\n}\n```\n\n### Debugging\n\nTo debug the MCP server:\n\n```bash\nnpx @modelcontextprotocol/inspector npx -y mcp-server-diff-typescript\n```\n\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcp-server-diff-typescript/build/index.js\n```\n",
    "publisher": {
      "id": "tatn",
      "name": "tatn",
      "url": "https://github.com/tatn/mcp-server-diff-typescript"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tatn/mcp-server-diff-typescript",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-diff-typescript"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-diff-typescript"
      ],
      "env": {}
    }
  },
  {
    "id": "249109e4-2916-48aa-bd32-3f14f24e68d9",
    "name": "MindscapeHQ/mcp-server-raygun",
    "description": "Raygun MCP Server",
    "fullDescription": "# Raygun MCP Server\n\nMCP Server for Raygun's API V3 endpoints for interacting with your Crash Reporting and Real User Monitoring applications. This server provides comprehensive access to Raygun's API features through the Model Context Protocol.\n\n## Features\n\n### Tools\n\n#### Applications\n- `list_applications` - List all applications under your account\n- `get_application` - Get application details by identifier\n- `get_application_by_api_key` - Get application details by API key\n- `regenerate_application_api_key` - Generate a new API key for an application\n\n#### Error Management\n- `list_error_groups` - List error groups for an application\n- `get_error_group` - Get detailed information about an error group\n- `resolve_error_group` - Set error group status to resolved\n- `activate_error_group` - Set error group status to active\n- `ignore_error_group` - Set error group status to ignored\n- `permanently_ignore_error_group` - Set error group status to permanently ignored\n\n#### Deployment Management\n- `list_deployments` - List deployments for an application\n- `get_deployment` - Get deployment details by identifier\n- `delete_deployment` - Remove a deployment\n- `update_deployment` - Update deployment information\n- `reprocess_deployment_commits` - Reprocess deployment commit data\n\n#### User & Session Management\n- `list_customers` - List customers for an application\n- `list_sessions` - List user sessions for an application\n- `get_session` - Get detailed session information\n\n#### Performance Monitoring\n- `list_pages` - List monitored pages for an application\n- `get_page_metrics_time_series` - Get time-series performance metrics\n- `get_page_metrics_histogram` - Get histogram of performance metrics\n- `get_error_metrics_time_series` - Get time-series error metrics\n\n#### Source Maps\n- `list_source_maps` - List source maps for an application\n- `get_source_map` - Get source map details\n- `update_source_map` - Update source map information\n- `delete_source_map` - Remove a source map\n- `upload_source_map` - Upload a new source map\n- `delete_all_source_maps` - Remove all source maps\n\n#### Team Management\n- `list_invitations` - List pending team invitations\n- `send_invitation` - Send a new team invitation\n- `get_invitation` - Get invitation details\n- `revoke_invitation` - Revoke a pending invitation\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `RAYGUN_PAT_TOKEN` (required): Your [Raygun PAT token](https://raygun.com/documentation/product-guides/raygun-api/)\n- `SOURCEMAP_ALLOWED_DIRS` (optional): Comma-separated list of directories allowed for source map operations\n\n## Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"raygun\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@raygun.io/mcp-server-raygun\"],\n      \"env\": {\n        \"RAYGUN_PAT_TOKEN\": \"your-pat-token-here\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"raygun\": {\n      \"command\": \"/path/to/server-raygun/build/index.js\",\n      \"env\": {\n        \"RAYGUN_PAT_TOKEN\": \"your-pat-token-ken\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
    "publisher": {
      "id": "raygun.io",
      "name": "raygun.io",
      "url": "https://github.com/MindscapeHQ/mcp-server-raygun"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/MindscapeHQ/mcp-server-raygun",
    "distribution": {
      "type": "npm",
      "package": "@raygun.io/mcp-server-raygun"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@raygun.io/mcp-server-raygun"
      ],
      "env": {
        "RAYGUN_PAT_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "74eab025-77ff-44f0-a94e-8b8eb10cf041",
    "name": "JoshuaRileyDev/simulator-mcp-server",
    "description": "iOS Simulator MCP Server",
    "fullDescription": "# iOS Simulator MCP Server\n\nA Model Context Protocol (MCP) server that provides programmatic control over iOS simulators. This server implements the MCP specification to expose simulator functionality through a standardized interface.\n\n## Features\n\n- List available iOS simulators\n- Boot and shutdown simulators\n- Install .app bundles on simulators\n- Launch installed apps by bundle ID\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/simulator-mcp-server\"\n      ]\n    }\n  }\n}\n```",
    "publisher": {
      "id": "joshuarileydev",
      "name": "joshuarileydev",
      "url": "https://github.com/JoshuaRileyDev/simulator-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/JoshuaRileyDev/simulator-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@joshuarileydev/simulator-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@joshuarileydev/simulator-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "8c21f426-e637-4606-a148-42a800853330",
    "name": "spences10/mcp-sequentialthinking-tools",
    "description": "mcp-sequentialthinking-tools",
    "fullDescription": "# mcp-sequentialthinking-tools\n\nAn adaptation of the\n[MCP Sequential Thinking Server](https://github.com/modelcontextprotocol/servers/blob/main/src/sequentialthinking/index.ts) designed to guide tool usage in problem-solving. This server helps break down complex problems into manageable steps and provides recommendations for which MCP tools would be most effective at each stage.\n\nA Model Context Protocol (MCP) server that combines sequential thinking with intelligent tool suggestions. For each step in the problem-solving process, it provides confidence-scored recommendations for which tools to use, along with rationale for why each tool would be appropriate.\n\n## Features\n\n- 🤔 Dynamic and reflective problem-solving through sequential\n  thoughts\n- 🔄 Flexible thinking process that adapts and evolves\n- 🌳 Support for branching and revision of thoughts\n- 🛠️ Intelligent tool recommendations for each step\n- 📊 Confidence scoring for tool suggestions\n- 🔍 Detailed rationale for tool recommendations\n- 📝 Step tracking with expected outcomes\n- 🔄 Progress monitoring with previous and remaining steps\n- 🎯 Alternative tool suggestions for each step\n\n## How It Works\n\nThis server analyses each step of your thought process and recommends\nappropriate MCP tools to help accomplish the task. Each recommendation\nincludes:\n\n- A confidence score (0-1) indicating how well the tool matches the\n  current need\n- A clear rationale explaining why the tool would be helpful\n- A priority level to suggest tool execution order\n- Alternative tools that could also be used\n\nThe server works with any MCP tools available in your environment. It\nprovides recommendations based on the current step's requirements, but\nthe actual tool execution is handled by the consumer (like Claude).\n\n## Example Usage\n\nHere's an example of how the server guides tool usage:\n\n```json\n{\n\t\"thought\": \"Initial research step to understand what universal reactivity means in Svelte 5\",\n\t\"current_step\": {\n\t\t\"step_description\": \"Gather initial information about Svelte 5's universal reactivity\",\n\t\t\"expected_outcome\": \"Clear understanding of universal reactivity concept\",\n\t\t\"recommended_tools\": [\n\t\t\t{\n\t\t\t\t\"tool_name\": \"search_docs\",\n\t\t\t\t\"confidence\": 0.9,\n\t\t\t\t\"rationale\": \"Search Svelte documentation for official information\",\n\t\t\t\t\"priority\": 1\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"tool_name\": \"tavily_search\",\n\t\t\t\t\"confidence\": 0.8,\n\t\t\t\t\"rationale\": \"Get additional context from reliable sources\",\n\t\t\t\t\"priority\": 2\n\t\t\t}\n\t\t],\n\t\t\"next_step_conditions\": [\n\t\t\t\"Verify information accuracy\",\n\t\t\t\"Look for implementation details\"\n\t\t]\n\t},\n\t\"thought_number\": 1,\n\t\"total_thoughts\": 5,\n\t\"next_thought_needed\": true\n}\n```\n\nThe server tracks your progress and supports:\n\n- Creating branches to explore different approaches\n- Revising previous thoughts with new information\n- Maintaining context across multiple steps\n- Suggesting next steps based on current findings\n\n## Configuration\n\nThis server requires configuration through your MCP client. Here are\nexamples for different environments:\n\n### Cline Configuration\n\nAdd this to your Cline MCP settings:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-sequentialthinking-tools\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-sequentialthinking-tools\"]\n\t\t}\n\t}\n}\n```\n\n### Claude Desktop with WSL Configuration\n\nFor WSL environments, add this to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-sequentialthinking-tools\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\n\t\t\t\t\"bash\",\n\t\t\t\t\"-c\",\n\t\t\t\t\"source ~/.nvm/nvm.sh && /home/username/.nvm/versions/node/v20.12.1/bin/npx mcp-sequentialthinking-tools\"\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n## API\n\nThe server implements a single MCP tool with configurable parameters:\n\n### sequentialthinking_tools\n\nA tool for dynamic and reflective problem-solving through thoughts,\nwith intelligent tool recommendations.\n\nParameters:\n\n- `thought` (string, required): Your current thinking step\n- `next_thought_needed` (boolean, required): Whether another thought\n  step is needed\n- `thought_number` (integer, required): Current thought number\n- `total_thoughts` (integer, required): Estimated total thoughts\n  needed\n- `is_revision` (boolean, optional): Whether this revises previous\n  thinking\n- `revises_thought` (integer, optional): Which thought is being\n  reconsidered\n- `branch_from_thought` (integer, optional): Branching point thought\n  number\n- `branch_id` (string, optional): Branch identifier\n- `needs_more_thoughts` (boolean, optional): If more thoughts are\n  needed\n- `current_step` (object, optional): Current step recommendation with:\n  - `step_description`: What needs to be done\n  - `recommended_tools`: Array of tool recommendations with confidence\n    scores\n  - `expected_outcome`: What to expect from this step\n  - `next_step_conditions`: Conditions for next step\n- `previous_steps` (array, optional): Steps already recommended\n- `remaining_steps` (array, optional): High-level descriptions of\n  upcoming steps\n\n## Development\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Run in development mode:\n\n```bash\npnpm dev\n```\n\n### Publishing\n\nThe project uses changesets for version management. To publish:\n\n1. Create a changeset:\n\n```bash\npnpm changeset\n```\n\n2. Version the package:\n\n```bash\npnpm changeset version\n```\n\n3. Publish to npm:\n\n```bash\npnpm release\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built on the\n  [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Adapted from the\n  [MCP Sequential Thinking Server](https://github.com/modelcontextprotocol/servers/blob/main/src/sequentialthinking/index.ts)\n",
    "publisher": {
      "id": "spences10",
      "name": "spences10",
      "url": "https://github.com/spences10/mcp-sequentialthinking-tools"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/spences10/mcp-sequentialthinking-tools",
    "distribution": {
      "type": "npm",
      "package": "mcp-sequentialthinking-tools"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-sequentialthinking-tools"
      ],
      "env": {}
    }
  },
  {
    "id": "84baf6fd-d720-4b89-8f73-34656adee883",
    "name": "qwang07/duck-duck-mcp",
    "description": "Duck Duck MCP",
    "fullDescription": "# Duck Duck MCP\n\n一个基于 DuckDuckGo 搜索引擎的 Model Context Protocol (MCP) 服务器实现。\n\n## 功能特性\n\n- 使用 DuckDuckGo 进行网络搜索\n- 支持自定义搜索结果数量（默认 50 条）\n- 支持区域设置（默认 zh-cn）\n- 支持安全搜索级别设置（OFF/MODERATE/STRICT）\n- 提供结构化的搜索结果，包含元数据\n- 智能内容分类（文档/文章/社交媒体）\n- 自动语言检测\n- 主题标签识别\n\n## 安装\n\n### 安装通过 Smithery\n\n通过 [Smithery](https://smithery.ai/server/duck-duck-mcp) 将 DuckDuckGo 搜索自动安装到 Claude 桌面端：\n\n```bash\nnpx -y @smithery/cli install duck-duck-mcp --client claude\n```\n\n不需要安装，可以直接通过 npx 运行：\n```bash\nnpx -y @smithery/cli install duck-duck-mcp --client claude\n```\n\n### 使用方法\n\n这是一个 MCP 服务器实现，主要用于与支持 MCP 协议的 AI 客户端（如 Claude）集成。\n\n### 启动服务器：\n```bash\n# 使用 npx（推荐）\nnpx duck-duck-mcp\n\n# 或者如果已经全局安装\nmcp-server-search\n```\n\n### 搜索参数示例：\n```json\n{\n  \"query\": \"搜索关键词\",\n  \"options\": {\n    \"region\": \"zh-cn\",\n    \"safeSearch\": \"MODERATE\",\n    \"numResults\": 50\n  }\n}\n```\n\n### 返回结果格式：\n```json\n{\n  \"type\": \"search_results\",\n  \"data\": [\n    {\n      \"title\": \"标题\",\n      \"url\": \"网址\",\n      \"description\": \"描述\",\n      \"metadata\": {\n        \"type\": \"article|documentation|social|other\",\n        \"source\": \"域名\"\n      }\n    }\n  ],\n  \"metadata\": {\n    \"query\": \"搜索关键词\",\n    \"timestamp\": \"时间戳\",\n    \"resultCount\": 50,\n    \"searchContext\": {\n      \"region\": \"zh-cn\",\n      \"safeSearch\": \"MODERATE\"\n    },\n    \"queryAnalysis\": {\n      \"language\": \"zh-cn|en\",\n      \"topics\": [\"technology\", \"documentation\"]\n    }\n  }\n}\n```\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "qwang07",
      "name": "qwang07",
      "url": "https://github.com/qwang07/duck-duck-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qwang07/duck-duck-mcp",
    "distribution": {
      "type": "npm",
      "package": "duck-duck-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "duck-duck-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "c8c64e9a-bf6d-442b-b822-917aab4eb802",
    "name": "mcp-server-time",
    "description": "Time MCP Server",
    "fullDescription": "# Time MCP Server\n\nA Model Context Protocol server that provides time and timezone conversion capabilities. This server enables LLMs to get current time information and perform timezone conversions using IANA timezone names, with automatic system timezone detection.\n\n### Available Tools\n\n- `get_current_time` - Get current time in a specific timezone or system timezone.\n  - Required arguments:\n    - `timezone` (string): IANA timezone name (e.g., 'America/New_York', 'Europe/London')\n\n- `convert_time` - Convert time between timezones.\n  - Required arguments:\n    - `source_timezone` (string): Source IANA timezone name\n    - `time` (string): Time in 24-hour format (HH:MM)\n    - `target_timezone` (string): Target IANA timezone name\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-time*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-time` via pip:\n\n```bash\npip install mcp-server-time\n```\n\nAfter installation, you can run it as a script using:\n\n```bash\npython -m mcp_server_time\n```\n\n## Configuration\n\n### Configure for Claude.app\n\nAdd to your Claude settings:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-time\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using docker</summary>\n\n```json\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/time\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"time\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_time\"]\n  }\n}\n```\n</details>\n\n### Configure for Zed\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-time\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-time\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-time\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_time\"]\n  }\n},\n```\n</details>\n\n### Customization - System Timezone\n\nBy default, the server automatically detects your system's timezone. You can override this by adding the argument `--local-timezone` to the `args` list in the configuration.\n\nExample:\n```json\n{\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"mcp_server_time\", \"--local-timezone=America/New_York\"]\n}\n```\n\n## Example Interactions\n\n1. Get current time:\n```json\n{\n  \"name\": \"get_current_time\",\n  \"arguments\": {\n    \"timezone\": \"Europe/Warsaw\"\n  }\n}\n```\nResponse:\n```json\n{\n  \"timezone\": \"Europe/Warsaw\",\n  \"datetime\": \"2024-01-01T13:00:00+01:00\",\n  \"is_dst\": false\n}\n```\n\n2. Convert time between timezones:\n```json\n{\n  \"name\": \"convert_time\",\n  \"arguments\": {\n    \"source_timezone\": \"America/New_York\",\n    \"time\": \"16:30\",\n    \"target_timezone\": \"Asia/Tokyo\"\n  }\n}\n```\nResponse:\n```json\n{\n  \"source\": {\n    \"timezone\": \"America/New_York\",\n    \"datetime\": \"2024-01-01T12:30:00-05:00\",\n    \"is_dst\": false\n  },\n  \"target\": {\n    \"timezone\": \"Asia/Tokyo\",\n    \"datetime\": \"2024-01-01T12:30:00+09:00\",\n    \"is_dst\": false\n  },\n  \"time_difference\": \"+13.0h\",\n}\n```\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-time\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/servers/src/time\nnpx @modelcontextprotocol/inspector uv run mcp-server-time\n```\n\n## Examples of Questions for Claude\n\n1. \"What time is it now?\" (will use system timezone)\n2. \"What time is it in Tokyo?\"\n3. \"When it's 4 PM in New York, what time is it in London?\"\n4. \"Convert 9:30 AM Tokyo time to New York time\"\n\n## Build\n\nDocker build:\n\n```bash\ncd src/time\ndocker build -t mcp/time .\n```\n\n## Contributing\n\nWe encourage contributions to help expand and improve mcp-server-time. Whether you want to add new time-related tools, enhance existing functionality, or improve documentation, your input is valuable.\n\nFor examples of other MCP servers and implementation patterns, see:\nhttps://github.com/modelcontextprotocol/servers\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements to make mcp-server-time even more powerful and useful.\n\n## License\n\nmcp-server-time is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "Model Context Protocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/time"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-time"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-time",
        "--local-time-zone=${LOCAL_TIME_ZONE}"
      ],
      "env": {
        "LOCAL_TIME_ZONE": {
          "description": "Local time zone",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5efc66d7-c5ca-4e5d-b6b1-c84e8240dc3d",
    "name": "mzxrai/mcp-openai",
    "description": "MCP OpenAI Server",
    "fullDescription": "# MCP OpenAI Server\n\nA Model Context Protocol (MCP) server that lets you seamlessly use OpenAI's models right from Claude.\n\n## Features\n\n- Direct integration with OpenAI's chat models\n- Support for multiple models including:\n  - gpt-4o\n  - gpt-4o-mini\n  - o1-preview\n  - o1-mini\n- Simple message passing interface\n- Basic error handling\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) >= 18 (includes `npm` and `npx`)\n- [Claude Desktop app](https://claude.ai/download)\n- [OpenAI API key](https://platform.openai.com/api-keys)\n\n## Installation\n\nFirst, make sure you've got the [Claude Desktop app](https://claude.ai/download) installed and you've requested an [OpenAI API key](https://platform.openai.com/api-keys).\n\nAdd this entry to your `claude_desktop_config.json` (on Mac, you'll find it at `~/Library/Application\\ Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-openai\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mzxrai/mcp-openai@latest\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here (get one from https://platform.openai.com/api-keys)\"\n      }\n    }\n  }\n}\n```\n\nThis config lets Claude Desktop fire up the OpenAI MCP server whenever you need it.\n\n## Usage\n\nJust start chatting with Claude and when you want to use OpenAI's models, ask Claude to use them. \n\nFor example, you can say,\n\n```plaintext\nCan you ask o1 what it thinks about this problem?\n```\n\nor,\n\n```plaintext\nWhat does gpt-4o think about this?\n```\n\nThe server currently supports these models:\n\n- gpt-4o (default)\n- gpt-4o-mini\n- o1-preview\n- o1-mini\n\n### Tools\n\n1. `openai_chat`\n   - Sends messages to OpenAI's chat completion API\n   - Arguments: \n     - `messages`: Array of messages (required)\n     - `model`: Which model to use (optional, defaults to gpt-4o)\n\n## Problems\n\nThis is alpha software, so may have bugs. If you have an issue, check Claude Desktop's MCP logs:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## Development\n\n```bash\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n\n# Watch for changes\npnpm watch\n\n# Run in development mode\npnpm dev\n```\n\n## Requirements\n\n- Node.js >= 18\n- OpenAI API key\n\n## Verified Platforms\n\n- [x] macOS\n- [ ] Linux\n\n## License\n\nMIT\n\n## Author\n\n[mzxrai](https://github.com/mzxrai) ",
    "publisher": {
      "id": "mzxrai",
      "name": "mzxrai",
      "url": "https://github.com/mzxrai/mcp-openai"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/mzxrai/mcp-openai",
    "distribution": {
      "type": "npm",
      "package": "@mzxrai/mcp-openai"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@mzxrai/mcp-openai"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "03e038cf-214c-4e8f-940f-255c318c5538",
    "name": "mcp-server-sqlite",
    "description": "SQLite MCP Server",
    "fullDescription": "# SQLite MCP Server\n\n## Overview\nA Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through SQLite. This server enables running SQL queries, analyzing business data, and automatically generating business insight memos.\n\n## Components\n\n### Resources\nThe server exposes a single dynamic resource:\n- `memo://insights`: A continuously updated business insights memo that aggregates discovered insights during analysis\n  - Auto-updates as new insights are discovered via the append-insight tool\n\n### Prompts\nThe server provides a demonstration prompt:\n- `mcp-demo`: Interactive prompt that guides users through database operations\n  - Required argument: `topic` - The business domain to analyze\n  - Generates appropriate database schemas and sample data\n  - Guides users through analysis and insight generation\n  - Integrates with the business insights memo\n\n### Tools\nThe server offers six core tools:\n\n#### Query Tools\n- `read_query`\n   - Execute SELECT queries to read data from the database\n   - Input:\n     - `query` (string): The SELECT SQL query to execute\n   - Returns: Query results as array of objects\n\n- `write_query`\n   - Execute INSERT, UPDATE, or DELETE queries\n   - Input:\n     - `query` (string): The SQL modification query\n   - Returns: `{ affected_rows: number }`\n\n- `create_table`\n   - Create new tables in the database\n   - Input:\n     - `query` (string): CREATE TABLE SQL statement\n   - Returns: Confirmation of table creation\n\n#### Schema Tools\n- `list_tables`\n   - Get a list of all tables in the database\n   - No input required\n   - Returns: Array of table names\n\n- `describe-table`\n   - View schema information for a specific table\n   - Input:\n     - `table_name` (string): Name of table to describe\n   - Returns: Array of column definitions with names and types\n\n#### Analysis Tools\n- `append_insight`\n   - Add new business insights to the memo resource\n   - Input:\n     - `insight` (string): Business insight discovered from data analysis\n   - Returns: Confirmation of insight addition\n   - Triggers update of memo://insights resource\n\n\n## Usage with Claude Desktop\n\n### uv\n\n```bash\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"parent_of_servers_repo/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"~/test.db\"\n    ]\n  }\n}\n```\n\n### Docker\n\n```json\n# Add the server to your claude_desktop_config.json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-i\",\n      \"-v\",\n      \"mcp-test:/mcp\",\n      \"mcp/sqlite\",\n      \"--db-path\",\n      \"/mcp/test.db\"\n    ]\n  }\n}\n```\n\n## Building\n\nDocker:\n\n```bash\ndocker build -t mcp/sqlite .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "Model Context Protocol",
      "url": "https://pypi.org/project/mcp-server-sqlite/"
    },
    "isOfficial": false,
    "sourceUrl": "https://pypi.org/project/mcp-server-sqlite/",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-sqlite"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-sqlite",
        "--db-path",
        "$ENVARG_DATABASE_PATH"
      ],
      "env": {
        "ENVARG_DATABASE_PATH": {
          "description": "Path to the SQLite database file.",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "47d751fd-0c79-460e-8994-c93d99704155",
    "name": "server-postgres",
    "description": "PostgreSQL",
    "fullDescription": "# PostgreSQL\n\nA Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.\n\n## Components\n\n### Tools\n\n- **query**\n  - Execute read-only SQL queries against the connected database\n  - Input: `sql` (string): The SQL query to execute\n  - All queries are executed within a READ ONLY transaction\n\n### Resources\n\nThe server provides schema information for each table in the database:\n\n- **Table Schemas** (`postgres://<host>/<table>/schema`)\n  - JSON schema information for each table\n  - Includes column names and data types\n  - Automatically discovered from database metadata\n\n## Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n### Docker\n\n* when running docker on macos, use host.docker.internal if the server is running on the host network (eg localhost)\n* username/password can be added to the postgresql url with `postgresql://user:password@host:port/db-name`\n\n```json\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \n        \"-i\", \n        \"--rm\", \n        \"mcp/postgres\", \n        \"postgresql://host.docker.internal:5432/mydb\"]\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-postgres\",\n        \"postgresql://localhost/mydb\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/mydb` with your database name.\n\n## Building\n\nDocker:\n\n```sh\ndocker build -t mcp/postgres -f src/postgres/Dockerfile . \n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-postgres"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres",
        "$ENVARG_CONNECTION_URL"
      ],
      "env": {
        "ENVARG_CONNECTION_URL": {
          "description": "PostgreSQL connection string",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "0be0109a-a099-4cbb-b332-5ea45b88477f",
    "name": "smithery-ai/mcp-obsidian",
    "description": "Obsidian Model Context Protocol",
    "fullDescription": "# Obsidian Model Context Protocol\n\nThis is a connector to allow Claude Desktop (or any MCP client) to read and search any directory containing Markdown notes (such as an Obsidian vault).\n\n## Installation\nMake sure Claude Desktop and `npm` is installed.\n\n### Installing via Smithery\n\nTo install Obsidian Model Context Protocol for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-obsidian):\n\n```bash\nnpx @smithery/cli install mcp-obsidian --client claude\n```\n\nThen, restart Claude Desktop and you should see the following MCP tools listed.\n",
    "publisher": {
      "id": "smithery-ai",
      "name": "smithery-ai",
      "url": "https://github.com/smithery-ai/mcp-obsidian"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/smithery-ai/mcp-obsidian",
    "distribution": {
      "type": "npm",
      "package": "mcp-obsidian"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-obsidian",
        "$ENVARG_VAULT_PATH"
      ],
      "env": {
        "ENVARG_VAULT_PATH": {
          "description": "Path to your Obsidian vault or Markdown notes directory",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "aefff7b9-ccd5-4f6d-abb1-9623e6c14a01",
    "name": "delorenj/mcp-server-ticketmaster",
    "description": "MCP Server for Ticketmaster",
    "fullDescription": "# MCP Server for Ticketmaster\n\nA Model Context Protocol server that provides tools for discovering events, venues, and attractions through the Ticketmaster Discovery API.\n\n## Features\n\n- Search for events, venues, and attractions with flexible filtering:\n  - Keyword search\n  - Date range for events\n  - Location (city, state, country)\n  - Venue-specific searches\n  - Attraction-specific searches\n  - Event classifications/categories\n- Output formats:\n  - Structured JSON data for programmatic use\n  - Human-readable text for direct consumption\n- Comprehensive data including:\n  - Names and IDs\n  - Dates and times (for events)\n  - Price ranges (for events)\n  - URLs\n  - Images\n  - Locations and addresses (for venues)\n  - Classifications (for attractions)\n\n## Installation\n\n```bash\nnpx -y install @delorenj/mcp-server-ticketmaster\n```\n\n## Configuration\n\nThe server requires a Ticketmaster API key. You can get one by:\n1. Going to https://developer.ticketmaster.com/\n2. Creating an account or signing in\n3. Going to \"My Apps\" in your account\n4. Creating a new app to get your API key\n\nSet your API key in your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"ticketmaster\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@delorenj/mcp-server-ticketmaster\"],\n      \"env\": {\n        \"TICKETMASTER_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Usage\n\nThe server provides a tool called `search_ticketmaster` that accepts:\n\n### Required Parameters\n- `type`: Type of search ('event', 'venue', or 'attraction')\n\n### Optional Parameters\n- `keyword`: Search term\n- `startDate`: Start date in YYYY-MM-DD format (for events)\n- `endDate`: End date in YYYY-MM-DD format (for events)\n- `city`: City name\n- `stateCode`: State code (e.g., 'NY')\n- `countryCode`: Country code (e.g., 'US')\n- `venueId`: Specific venue ID\n- `attractionId`: Specific attraction ID\n- `classificationName`: Event category (e.g., 'Sports', 'Music')\n- `format`: Output format ('json' or 'text', defaults to 'json')\n\n### Examples\n\n#### Structured JSON Output (Default)\n```\n<use_mcp_tool>\n<server_name>ticketmaster</server_name>\n<tool_name>search_ticketmaster</tool_name>\n<arguments>\n{\n  \"type\": \"event\",\n  \"keyword\": \"concert\",\n  \"startDate\": \"2025-02-01\",\n  \"endDate\": \"2025-02-28\",\n  \"city\": \"New York\",\n  \"stateCode\": \"NY\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n#### Human-Readable Text Output\n```\n<use_mcp_tool>\n<server_name>ticketmaster</server_name>\n<tool_name>search_ticketmaster</tool_name>\n<arguments>\n{\n  \"type\": \"event\",\n  \"keyword\": \"concert\",\n  \"startDate\": \"2025-02-01\",\n  \"endDate\": \"2025-02-28\",\n  \"city\": \"New York\",\n  \"stateCode\": \"NY\",\n  \"format\": \"text\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## Development\n\n1. Clone the repository\n2. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n3. Add your Ticketmaster API key to `.env`\n4. Install dependencies:\n   ```bash\n   npm install\n   ```\n5. Build the project:\n   ```bash\n   npm run build\n   ```\n6. Test with the inspector:\n   ```bash\n   npm run inspector\n   ```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details",
    "publisher": {
      "id": "delorenj",
      "name": "delorenj",
      "url": "https://github.com/delorenj/mcp-server-ticketmaster"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/delorenj/mcp-server-ticketmaster",
    "distribution": {
      "type": "npm",
      "package": "@delorenj/mcp-server-ticketmaster"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@delorenj/mcp-server-ticketmaster"
      ],
      "env": {
        "TICKETMASTER_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "47ed1789-b204-4ff5-a095-d57f8045e84e",
    "name": "daniel-lxs/mcp-perplexity",
    "description": "Perplexity MCP Server",
    "fullDescription": "# Perplexity MCP Server\n\nMCP Server for the Perplexity API.\n\n## Components\n\n### Tools\n\n- **ask_perplexity**: Request expert programming assistance through Perplexity. Focuses on coding solutions, error debugging, and technical explanations. Returns responses with source citations and alternative suggestions.\n- **chat_perplexity**: Maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context. Returns chat ID for future continuation.\n\n## Key Features\n\n- **Model Configuration via Environment Variable:**  Allows you to specify the Perplexity model using the `PERPLEXITY_MODEL` environment variable for flexible model selection.\n\n  You can also specify `PERPLEXITY_MODEL_ASK` and `PERPLEXITY_MODEL_CHAT` to use different models for the `ask_perplexity` and `chat_perplexity` tools, respectively.\n\n  These will override `PERPLEXITY_MODEL`. You can check which models are available on the [Perplexity](https://docs.perplexity.ai/guides/model-cards) documentation.\n- **Persistent Chat History:** The `chat_perplexity` tool maintains ongoing conversations with Perplexity AI. Creates new chats or continues existing ones with full history context. Returns chat ID for future continuation.\n- **Streaming Responses with Progress Reporting:** Uses progress reporting to prevent timeouts on slow responses.\n\n## Quickstart\n\n### Installation\n\n#### Prerequisites\n\n- [Python 3.10+](https://www.python.org/downloads/)\n- [uvx](https://docs.astral.sh/uv/getting-started/installation/) (recommended)\n\n<details>\n<summary><h3>Installing uvx</h3></summary>\n\n<details>\n<summary><h4>Windows Installation</h4></summary>\n\nOpen PowerShell as Administrator and run:\n\n```powershell\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n**Windows Installation Notes:**\n- Ensure Python 3.10+ is installed and added to PATH\n\n</details>\n\n<details>\n<summary><h4>Unix Installation (Linux/MacOS)</h4></summary>\n\nRun the following command in your terminal:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n**Unix Installation Notes:**\n- The script will install uvx to ~/.cargo/bin by default\n- You may need to restart your terminal session after installation\n\n</details>\n\n</details>\n\n#### Configure your MCP Client\n\nTo use this MCP server, you need to configure your MCP client to connect to it. The configuration method will vary depending on your specific client.\n\nBelow is an example configuration in JSON format:\n\n```json\n\"mcpServers\": {\n  \"mcp-perplexity\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-perplexity\"\n    ],\n    \"env\": {\n      \"PERPLEXITY_API_KEY\": \"your-perplexity-api-key\",\n      \"PERPLEXITY_MODEL\": \"sonar-pro\",\n      \"PERPLEXITY_MODEL_ASK\": \"sonar-pro\",\n      \"PERPLEXITY_MODEL_CHAT\": \"sonar-reasoning-pro\",\n      \"DB_PATH\": \"path/to/custom.db\"\n    }\n  }\n}\n```\n\n**Important notes:**\n- Replace `\"your-perplexity-api-key\"` with your actual Perplexity API key\n- Environment variables configuration:\n  - `PERPLEXITY_MODEL`: Default model for both tools\n  - `PERPLEXITY_MODEL_ASK`: Overrides default model for `ask_perplexity` tool\n  - `PERPLEXITY_MODEL_CHAT`: Overrides default model for `chat_perplexity` tool\n  - `DB_PATH`: Custom path for SQLite chat history database (default: chats.db)\n- Consult the [Perplexity model docs](https://docs.perplexity.ai/guides/model-cards) for available models\n- Use the [mcp-starter](https://github.com/daniel-lxs/mcp-starter) script to easily add this MCP server to Cursor IDE.\n",
    "publisher": {
      "id": "daniel-lxs",
      "name": "daniel-lxs",
      "url": "https://github.com/daniel-lxs/mcp-perplexity"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/daniel-lxs/mcp-perplexity",
    "distribution": {
      "type": "pip",
      "package": "mcp-perplexity"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-perplexity"
      ],
      "env": {
        "PERPLEXITY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "PERPLEXITY_MODEL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "PERPLEXITY_MODEL_ASK": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "PERPLEXITY_MODEL_CHAT": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "DB_PATH": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "805c182d-1d4d-4103-96a5-013b43e226d8",
    "name": "ZeparHyfar/mcp-datetime",
    "description": "mcp-datetime",
    "fullDescription": "# mcp-datetime\n\nA datetime formatting service implemented as an MCP server for the Claude Desktop Application. Supports generation of datetime strings in various formats.\n\n> **Note**: This package has been tested only on macOS. Windows compatibility has not been verified.\n\n## Prerequisites\n\nBefore using mcp-datetime, ensure you have the following tools installed:\n\n- Python 3.12 or later\n- uv (Python package installer)\n- uvx (Python package runner)\n\n## Features\n\n- ✨ Support for various datetime formats\n- 🇯🇵 Japanese language support\n- 📁 Optimized formats for filename generation\n- 🌏 Accurate timezone handling\n- 🔧 Seamless integration with Claude Desktop App\n\n## MCP Server Components\n\n### Tools\n\nThe server implements one tool:\n\n- `get_datetime`: Get current date and time in various formats\n  - Takes \"format\" as a required string argument\n  - Returns formatted datetime string based on specified format\n  - Supports multiple format types including standard, Japanese, and ISO formats\n\n## Usage with Claude Desktop App\n\nAdd the following to your config file:\n\nConfig file location (macOS):\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-datetime\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-datetime\"]\n    }\n  }\n}\n```\n\n## About Installation\n\nIf you need to install the package directly (e.g., for development or source code inspection), you can use one of these methods:\n\n- Install from PyPI\n\n  ```bash\n  pip install mcp-datetime\n  ```\n\n- Install from GitHub Source\n\n  ```bash\n  git clone https://github.com/ZeparHyfar/mcp-datetime.git\n  cd mcp-datetime\n  pip install -e .\n  ```\n\n- Example `claude_desktop_config.json` for manual installation\n\n  ```json\n  {\n    \"mcpServers\": {\n      \"mcp-datetime\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"mcp_datetime\"],\n        \"env\": {\n          \"PYTHON\": \"/path/to/your/python\"\n        }\n      }\n    }\n  }\n  ```\n\n  Replace \"/path/to/your/python\" with your actual Python interpreter path\n  > e.g., \"/usr/local/bin/python3\" or \"/Users/username/.pyenv/versions/3.12.0/bin/python3\"\n\n## Basic Examples\n\n- Command format\n\n  ```\n  # Standard datetime format\n  call datetime-service.get_datetime {\"format\": \"datetime\"}\n  # Result: 2024-12-10 00:54:01\n\n  # Japanese format\n  call datetime-service.get_datetime {\"format\": \"datetime_jp\"}\n  # Result: 2024年12月10日 00時54分01秒\n\n  # Filename format\n  call datetime-service.get_datetime {\"format\": \"filename_md\"}\n  # Result: 20241210005401.md\n  ```\n\n- Claude Desktop App prompt examples\n\n  - User\n\n    ```\n    Please tell me the current time in date_slash format\n    ```\n\n  - Claude\n\n    ```\n    I'll get the current date in date_slash format.\n\n    The current date is 2024/12/12\n    ```\n\n## Supported Formats\n\n| Format Name  | Example                     | Description                  |\n| ------------ | --------------------------- | ---------------------------- |\n| date         | 2024-12-10                  | Standard date format         |\n| date_slash   | 2024/12/10                  | Date with slashes            |\n| date_jp      | 2024年12月10日              | Japanese date format         |\n| datetime     | 2024-12-10 00:54:01         | Standard datetime            |\n| datetime_jp  | 2024年12月10日 00時54分01秒 | Japanese datetime            |\n| datetime_t   | 2024-12-10T00:54:01         | DateTime with T separator    |\n| compact      | 20241210005401              | Compact format for IDs       |\n| compact_date | 20241210                    | Compact date only            |\n| compact_time | 005401                      | Compact time only            |\n| filename_md  | 20241210005401.md           | Markdown filename            |\n| filename_txt | 20241210005401.txt          | Text filename                |\n| filename_log | 20241210005401.log          | Log filename                 |\n| iso          | 2024-12-10T00:54:01+0900    | ISO 8601 format              |\n| iso_basic    | 20241210T005401+0900        | Basic ISO format             |\n| log          | 2024-12-10 00:54:01.123456  | Log format with microseconds |\n| log_compact  | 20241210_005401             | Compact log format           |\n| time         | 00:54:01                    | Time only                    |\n| time_jp      | 00時54分01秒                | Japanese time format         |\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n- Using PyPI package\n\n  ```\n  npx @modelcontextprotocol/inspector uvx mcp-datetime\n  ```\n\n- Using downloaded source code from GitHub\n\n  ```\n  git clone https://github.com/ZeparHyfar/mcp-datetime.git\n  npx @modelcontextprotocol/inspector uvx --directory ./mcp-datetime run mcp-datetime\n  ```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "ZeparHyfar",
      "name": "ZeparHyfar",
      "url": "https://github.com/ZeparHyfar/mcp-datetime"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ZeparHyfar/mcp-datetime",
    "distribution": {
      "type": "pip",
      "package": "mcp-datetime"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-datetime"
      ],
      "env": {}
    }
  },
  {
    "id": "aa9f6de2-f477-4785-abcf-44f61edfa46e",
    "name": "umshere/uiflowchartcreator",
    "description": "UIFlowchartCreator",
    "fullDescription": "# UIFlowchartCreator\n\nUIFlowchartCreator is an MCP (Model Context Protocol) server for creating UI flowcharts. This tool helps developers and designers visualize user interfaces and their interactions.\n\n## GitHub Repository\n\nThe source code for this project is available on GitHub:\n[https://github.com/umshere/uiflowchartcreator](https://github.com/umshere/uiflowchartcreator)\n\n## Features\n\n- Generate UI flowcharts based on input specifications\n- Integrate with MCP-compatible systems\n- Easy-to-use API for flowchart creation\n\n## Installation\n\n```bash\nnpm install uiflowchartcreator\n```\n\n## Usage\n\nTo use UIFlowchartCreator in your MCP-compatible system, add it to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"uiflowchartcreator\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/uiflowchartcreator/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\nFor detailed usage instructions and API documentation, please refer to the source code and comments in `src/index.ts`.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the ISC License.\n",
    "publisher": {
      "id": "umshere",
      "name": "umshere",
      "url": "https://github.com/umshere/uiflowchartcreator"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/umshere/uiflowchartcreator",
    "distribution": {
      "type": "npm",
      "package": "uiflowchartcreator"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "uiflowchartcreator"
      ],
      "env": {}
    }
  },
  {
    "id": "27fd476d-cc3b-4717-8973-77760cb3def3",
    "name": "felores/cloudinary-mcp-server",
    "description": "Cloudinary MCP Server",
    "fullDescription": "# Cloudinary MCP Server\n\nThis MCP server provides tools for uploading images and videos to Cloudinary through Claude Desktop and compatible MCP clients.\n\n## Installation\n\n### Requirements: Node.js\n\n1. Install Node.js (version 18 or higher) and npm from [nodejs.org](https://nodejs.org/)\n2. Verify installation:\n   ```bash\n   node --version\n   npm --version\n   ```\n\n### Install using npx (Recommended)\n1. Navigate to the Claude configuration directory:\n\n   - Windows: `C:\\Users\\NAME\\AppData\\Roaming\\Claude`\n   - macOS: `~/Library/Application Support/Claude/`\n   \n   You can also find these directories inside the Claude Desktop app: Claude Desktop > Settings > Developer > Edit Config\n\n2. Add the following configuration to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"cloudinary\": {\n      \"command\": \"npx\",\n      \"args\": [\"@felores/cloudinary-mcp-server\"],\n      \"env\": {\n        \"CLOUDINARY_CLOUD_NAME\": \"your_cloud_name\",\n        \"CLOUDINARY_API_KEY\": \"your_api_key\",\n        \"CLOUDINARY_API_SECRET\": \"your_api_secret\"\n      }\n    }\n  }\n}\n```\n\n3. Make sure to replace the environment variables with your Cloudinary credentials from the [Cloudinary Console](https://console.cloudinary.com/settings/api-keys).\n\n### Developer Installation\nIf you want to modify the server or contribute to development:\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/felores/cloudinary-mcp-server.git\ncd cloudinary-mcp-server\n```\n\n2. Install dependencies and build:\n```bash\nnpm install\nnpm run build\n```\n\n## Setup Instructions\n\n1. First, ensure you have a Cloudinary account and get your credentials from the [Cloudinary Console](https://console.cloudinary.com/settings/api-keys):\n   - Cloud Name\n   - API Key\n   - API Secret\n\n2. Add the server configuration to your Claude/Cline MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"cloudinary\": {\n      \"command\": \"node\",\n      \"args\": [\"c:/path/to/cloudinary-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"CLOUDINARY_CLOUD_NAME\": \"your_cloud_name\",\n        \"CLOUDINARY_API_KEY\": \"your_api_key\",\n        \"CLOUDINARY_API_SECRET\": \"your_api_secret\"\n      }\n    }\n  }\n}\n```\n\nFor Claude desktop app, edit the configuration file at the appropriate location for your OS.\n\n3. Install dependencies and build the server:\n```bash\nnpm install\nnpm run build\n```\n\n## Available Tools\n\n### upload\n\nUpload images and videos to Cloudinary.\n\nParameters:\n- `file` (required): Path to file, URL, or base64 data URI to upload\n- `resource_type` (optional): Type of resource ('image', 'video', or 'raw')\n- `public_id` (optional): Custom public ID for the uploaded asset\n- `overwrite` (optional): Whether to overwrite existing assets with the same public ID\n- `tags` (optional): Array of tags to assign to the uploaded asset\n\nExample usage in Claude/Cline:\n```typescript\nuse_mcp_tool({\n  server_name: \"cloudinary\",\n  tool_name: \"upload\",\n  arguments: {\n    file: \"path/to/image.jpg\",\n    resource_type: \"image\",\n    public_id: \"my-custom-id\"\n  }\n});\n",
    "publisher": {
      "id": "felores",
      "name": "felores",
      "url": "https://github.com/felores/cloudinary-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/felores/cloudinary-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@felores/cloudinary-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@felores/cloudinary-mcp-server"
      ],
      "env": {
        "CLOUDINARY_CLOUD_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CLOUDINARY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CLOUDINARY_API_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "193a9f3e-74b7-41c8-9a64-91b649565f10",
    "name": "qpd-v/mcp-delete",
    "description": "@qpd-v/mcp-delete",
    "fullDescription": "# @qpd-v/mcp-delete\n\nA Model Context Protocol (MCP) server that provides file deletion capabilities. This server allows AI assistants to safely delete files when needed, with support for both relative and absolute paths.\n\n## Features\n\n- Delete files using relative or absolute paths\n- Smart path resolution that tries multiple potential paths\n- Clear error messages with detailed path resolution information\n- Safe file existence checks before deletion\n- Works with Claude and other MCP-compatible AI assistants\n\n## Examples\n\n### Using with Claude Desktop\n![Claude Desktop Example](img/1-screenshot-claude-desktop-mcp-delete.jpg)\n\n### Using with VSCode Roo Cline Extension\n![VSCode Roo Cline Example](img/1-screenshot-cline-mcp-delete.jpg)\n\n## Installation\n\n```bash\nnpx @qpd-v/mcp-delete\n```\n\nOr install globally:\n\n```bash\nnpm install -g @qpd-v/mcp-delete\n```\n\n## Configuration\n\n### Claude Desktop\n\nAdd the server configuration to your Claude Desktop config file:\n\nWindows:\n```json\n// %APPDATA%/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\n### VSCode Extension\n\nAdd the server configuration to your Cline settings:\n\nWindows:\n```json\n// %APPDATA%/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### delete_file\n\nDeletes a file at the specified path.\n\nParameters:\n- `path` (string, required): Path to the file to delete (relative to working directory or absolute)\n\nExample usage in Claude:\n```\nYou can ask me to delete a file like this:\n\"Please delete the file example.txt\"\n\nI will use the delete_file tool to safely remove the file.\n```\n\n## Path Resolution\n\nThe server intelligently handles path resolution by trying multiple approaches:\n1. The exact path as provided\n2. Path relative to the current working directory\n3. Path relative to a specified base directory\n\nThis makes it more user-friendly as files can be referenced by relative paths and the server will attempt to locate them correctly.\n\n## Development\n\nClone the repository:\n```bash\ngit clone https://github.com/qpd-v/mcp-delete.git\ncd mcp-delete\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT\n\n## Author\n\nqpd-v\n",
    "publisher": {
      "id": "qpd-v",
      "name": "qpd-v",
      "url": "https://github.com/qpd-v/mcp-delete"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qpd-v/mcp-delete",
    "distribution": {
      "type": "npm",
      "package": "@qpd-v/mcp-delete"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@qpd-v/mcp-delete"
      ],
      "env": {}
    }
  },
  {
    "id": "f876865a-8f95-497f-a806-8a34042fd4d5",
    "name": "qdrant/mcp-server-qdrant",
    "description": "mcp-server-qdrant: A Qdrant MCP server",
    "fullDescription": "# mcp-server-qdrant: A Qdrant MCP server\n\n> The [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you’re building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nThis repository is an example of how to create a MCP server for [Qdrant](https://qdrant.tech/), a vector search engine.\n\n## Overview\n\nA basic Model Context Protocol server for keeping and retrieving memories in the Qdrant vector search engine.\nIt acts as a semantic memory layer on top of the Qdrant database.\n\n## Components\n\n### Tools\n\n1. `qdrant-store-memory`\n   - Store a memory in the Qdrant database\n   - Input:\n     - `information` (string): Memory to store\n   - Returns: Confirmation message\n2. `qdrant-find-memories`\n   - Retrieve a memory from the Qdrant database\n   - Input:\n     - `query` (string): Query to retrieve a memory\n   - Returns: Memories stored in the Qdrant database as separate messages\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed to directly run *mcp-server-qdrant*.\n\n```shell\nuv run mcp-server-qdrant \\\n  --qdrant-url \"http://localhost:6333\" \\\n  --qdrant-api-key \"your_api_key\" \\\n  --collection-name \"my_collection\" \\\n  --fastembed-model-name \"sentence-transformers/all-MiniLM-L6-v2\"\n```\n\n### Installing via Smithery\n\nTo install Qdrant MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-server-qdrant):\n\n```bash\nnpx @smithery/cli install mcp-server-qdrant --client claude\n```\n\n## Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"qdrant\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-qdrant\", \n      \"--qdrant-url\", \n      \"http://localhost:6333\",\n      \"--qdrant-api-key\", \n      \"your_api_key\",\n      \"--collection-name\",\n      \"your_collection_name\"\n    ]\n  }\n}\n```\n\nReplace `http://localhost:6333`, `your_api_key` and `your_collection_name` with your Qdrant server URL, Qdrant API key \nand collection name, respectively. The use of API key is optional, but recommended for security reasons, and depends on \nthe Qdrant server configuration.\n\nThis MCP server will automatically create a collection with the specified name if it doesn't exist.\n\nBy default, the server will use the `sentence-transformers/all-MiniLM-L6-v2` embedding model to encode memories.\nFor the time being, only [FastEmbed](https://qdrant.github.io/fastembed/) models are supported, and you can change it\nby passing the `--fastembed-model-name` argument to the server.\n\n### Using the local mode of Qdrant\n\nTo use a local mode of Qdrant, you can specify the path to the database using the `--qdrant-local-path` argument:\n\n```json\n{\n  \"qdrant\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-qdrant\", \n      \"--qdrant-local-path\",\n      \"/path/to/qdrant/database\",\n      \"--collection-name\",\n      \"your_collection_name\"\n    ]\n  }\n}\n```\n\nIt will run Qdrant local mode inside the same process as the MCP server. Although it is not recommended for production.\n\n## Environment Variables\n\nThe configuration of the server can be also done using environment variables:\n\n- `QDRANT_URL`: URL of the Qdrant server, e.g. `http://localhost:6333`\n- `QDRANT_API_KEY`: API key for the Qdrant server\n- `COLLECTION_NAME`: Name of the collection to use\n- `FASTEMBED_MODEL_NAME`: Name of the FastEmbed model to use\n- `QDRANT_LOCAL_PATH`: Path to the local Qdrant database\n\nYou cannot provide `QDRANT_URL` and `QDRANT_LOCAL_PATH` at the same time.\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, \nsubject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project \nrepository.\n",
    "publisher": {
      "id": "qdrant",
      "name": "qdrant",
      "url": "https://github.com/qdrant/mcp-server-qdrant"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/qdrant/mcp-server-qdrant",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-qdrant"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-qdrant"
      ],
      "env": {
        "QDRANT_URL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "QDRANT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "COLLECTION_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "FASTEMBED_MODEL_NAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_LOCAL_PATH": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "c73fd5f4-a412-4212-b6f8-cb6ebe5362e5",
    "name": "ac3xx/mcp-servers-kagi",
    "description": "kagi-server MCP Server",
    "fullDescription": "# kagi-server MCP Server\n\nMCP server for Kagi API integration\n\nThis is a TypeScript-based MCP server that integrates the Kagi Search API. It demonstrates core MCP concepts by providing:\n\n- Tools for performing web searches and other operations using Kagi's API (currently in private beta)\n\n## Features\n\n### Implemented Tools\n- `kagi_search` - Perform web searches using Kagi\n  - Takes a query string and optional limit as parameters\n  - Returns search results from Kagi's API\n\n### Planned Tools (Not Yet Implemented)\n- `kagi_summarize` - Generate summaries of web pages or text\n- `kagi_fastgpt` - Get quick responses using Kagi's FastGPT\n- `kagi_enrich` - Fetch enriched news results on specific topics\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Environment Setup\n\nCreate a `.env` file in the root directory with your Kagi API key:\n\n```\nKAGI_API_KEY=your_api_key_here\n```\n\nMake sure to add `.env` to your `.gitignore` file to keep your API key secure.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Kagi Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/kagi-server):\n\n```bash\nnpx @smithery/cli install kagi-server --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"kagi-server\": {\n      \"command\": \"/path/to/kagi-server/build/index.js\",\n      \"env\": {\n        \"KAGI_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Usage\n\nOnce the server is running and connected to Claude Desktop, you can use it to perform web searches. For example:\n\n1. Ask Claude: \"Can you search for information about the latest advancements in quantum computing?\"\n2. Claude will use the `kagi_search` tool to fetch results from Kagi's API.\n3. Claude will then summarize or analyze the search results for you.\n\nNote: The planned tools (summarize, fastgpt, enrich) are not yet implemented and cannot be used.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. Some areas for contribution include:\n\n- Implementing the planned tools (summarize, fastgpt, enrich)\n- Improving error handling and input validation\n- Enhancing documentation and usage examples\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Roadmap\n\n- Implement `kagi_summarize` tool for webpage and text summarization\n- Implement `kagi_fastgpt` tool for quick responses\n- Implement `kagi_enrich` tool for fetching enriched news results\n- Improve error handling and add more robust input validation\n- Add more comprehensive usage examples and documentation\n- Publish the package to npm for easy installation and use with Claude Desktop and npx",
    "publisher": {
      "id": "ac3xx",
      "name": "ac3xx",
      "url": "https://github.com/ac3xx/mcp-servers-kagi"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ac3xx/mcp-servers-kagi",
    "distribution": {
      "type": "npm",
      "package": "kagi-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "kagi-server"
      ],
      "env": {
        "KAGI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "c6e733ca-2cde-4fff-9465-f90ae5b82264",
    "name": "kazuph/mcp-browser-tabs",
    "description": "MCP Browser Tabs",
    "fullDescription": "# MCP Browser Tabs\n\nModel Context Protocol server for retrieving and managing Chrome browser tabs information. This allows Claude Desktop (or any MCP client) to fetch information about and control currently open Chrome tabs.\n\n## Quick Start (For Users)\n\nTo use this tool with Claude Desktop, simply add the following to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"tools\": {\n    \"browser-tabs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-browser-tabs\"]\n    }\n  }\n}\n```\n\nThis will automatically download and run the latest version of the tool when needed.\n\n### Required Setup\n\n1. Enable Accessibility for Chrome:\n   - Open System Settings\n   - Go to Privacy & Security > Accessibility\n   - Click the \"+\" button\n   - Add Google Chrome from your Applications folder\n   - Turn ON the toggle for Chrome\n\nThis accessibility setting is required for AppleScript to interact with Chrome tabs.\n\n## For Developers\n\nThe following sections are for those who want to develop or modify the tool.\n\n### Prerequisites\n\n- Node.js 18+\n- macOS (for AppleScript operations)\n- Google Chrome\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n### Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-browser-tabs.git\ncd mcp-browser-tabs\nnpm install\nnpm run build\n```\n\n## Available Tools\n\n- `get_tabs`: Retrieves all open tabs from Google Chrome browser, returning their titles and URLs. Tabs are grouped by window and displayed in a format like \"Window 1-1\" (Window 1, Tab 1).\n\n- `close_tab`: Closes a specific tab in Google Chrome using window and tab indices.\n  - Parameters:\n    - windowIndex: Window number (starts from 1)\n    - tabIndex: Tab number within the window (starts from 1)\n  - Note: When closing multiple tabs, start from the highest index numbers to avoid index shifting. After closing tabs, use get_tabs to confirm the changes.\n\n## Notes\n\n- This tool is designed for macOS only due to its dependency on AppleScript.\n- Requires Google Chrome to be installed and running.\n- Accessibility permissions must be granted for Chrome.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-browser-tabs"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-browser-tabs",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-browser-tabs"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-browser-tabs"
      ],
      "env": {}
    }
  },
  {
    "id": "ec929b3a-29c2-45f9-8da7-f0127ff96b68",
    "name": "gerred/mcpmc",
    "description": "MCPMC (Minecraft Model Context Protocol)",
    "fullDescription": "# MCPMC (Minecraft Model Context Protocol)\n\nA Model Context Protocol (MCP) server for interacting with Minecraft via Mineflayer. This package enables AI agents to control Minecraft bots through a standardized JSON-RPC interface.\n\n## Features\n\n- Full MCP compatibility for AI agent integration\n- Built on Mineflayer for reliable Minecraft interaction\n- Supports navigation, block manipulation, inventory management, and more\n- Real-time game state monitoring\n- Type-safe API with TypeScript support\n\n## Installation\n\n```bash\n# Using npm\nnpm install @gerred/mcpmc\n\n# Using yarn\nyarn add @gerred/mcpmc\n\n# Using bun\nbun add @gerred/mcpmc\n```\n\n## Usage\n\n```bash\n# Start the MCP server\nmcpmc\n```\n\nThe server communicates via stdin/stdout using the Model Context Protocol. For detailed API documentation, use the MCP inspector:\n\n```bash\nbun run inspector\n```\n\n## Development\n\n```bash\n# Install dependencies\nbun install\n\n# Run tests\nbun test\n\n# Build the project\nbun run build\n\n# Watch mode during development\nbun run watch\n\n# Run MCP inspector\nbun run inspector\n```\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n\n1. Fork the repository\n2. Create a new branch for your feature\n3. Write tests for your changes\n4. Make your changes\n5. Run tests and ensure they pass\n6. Submit a pull request\n\nPlease make sure to update tests as appropriate and adhere to the existing coding style.\n\n## License\n\nMIT License\n\nCopyright (c) 2024 Gerred Dillon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "publisher": {
      "id": "gerred",
      "name": "gerred",
      "url": "https://github.com/gerred/mcpmc"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/gerred/mcpmc",
    "distribution": {
      "type": "npm",
      "package": "@gerred/mcpmc"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@gerred/mcpmc"
      ],
      "env": {}
    }
  },
  {
    "id": "ff4a2986-7aaa-4b7a-9035-9bc1eb997099",
    "name": "mcp-server-git",
    "description": "mcp-server-git: A git MCP server",
    "fullDescription": "# mcp-server-git: A git MCP server\n\n## Overview\n\nA Model Context Protocol server for Git repository interaction and automation. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.\n\nPlease note that mcp-server-git is currently in early development. The functionality and available tools are subject to change and expansion as we continue to develop and improve the server.\n\n### Tools\n\n1. `git_status`\n   - Shows the working tree status\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Current status of working directory as text output\n\n2. `git_diff_unstaged`\n   - Shows changes in working directory not yet staged\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Diff output of unstaged changes\n\n3. `git_diff_staged`\n   - Shows changes that are staged for commit\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Diff output of staged changes\n\n4. `git_diff`\n   - Shows differences between branches or commits\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `target` (string): Target branch or commit to compare with\n   - Returns: Diff output comparing current state with target\n\n5. `git_commit`\n   - Records changes to the repository\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `message` (string): Commit message\n   - Returns: Confirmation with new commit hash\n\n6. `git_add`\n   - Adds file contents to the staging area\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `files` (string[]): Array of file paths to stage\n   - Returns: Confirmation of staged files\n\n7. `git_reset`\n   - Unstages all staged changes\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Confirmation of reset operation\n\n8. `git_log`\n   - Shows the commit logs\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `max_count` (number, optional): Maximum number of commits to show (default: 10)\n   - Returns: Array of commit entries with hash, author, date, and message\n\n9. `git_create_branch`\n   - Creates a new branch\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `branch_name` (string): Name of the new branch\n     - `start_point` (string, optional): Starting point for the new branch\n   - Returns: Confirmation of branch creation\n10. `git_checkout`\n   - Switches branches\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `branch_name` (string): Name of branch to checkout\n   - Returns: Confirmation of branch switch\n11. `git_show`\n   - Shows the contents of a commit\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `revision` (string): The revision (commit hash, branch name, tag) to show\n   - Returns: Contents of the specified commit\n12. `git_init`\n   - Initializes a Git repository\n   - Inputs:\n     - `repo_path` (string): Path to directory to initialize git repo\n   - Returns: Confirmation of repository initialization\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-git*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-git` via pip:\n\n```\npip install mcp-server-git\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_git\n```\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using docker</summary>\n\n* Note: replace '/Users/username' with the a path that you want to be accessible by this tool\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"--rm\", \"-i\", \"--mount\", \"type=bind,src=/Users/username,dst=/Users/username\", \"mcp/git\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n</details>\n\n### Usage with [Zed](https://github.com/zed-industries/zed)\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-git\"]\n    }\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"python\",\n      \"args\": [\"-m\", \"mcp_server_git\"]\n    }\n  }\n},\n```\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-git\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ncd path/to/servers/src/git\nnpx @modelcontextprotocol/inspector uv run mcp-server-git\n```\n\nRunning `tail -n 20 -f ~/Library/Logs/Claude/mcp*.log` will show the logs from the server and may\nhelp you debug any issues.\n\n## Development\n\nIf you are doing local development, there are two ways to test your changes:\n\n1. Run the MCP inspector to test your changes. See [Debugging](#debugging) for run instructions.\n\n2. Test using the Claude desktop app. Add the following to your `claude_desktop_config.json`:\n\n### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"git\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/git\"\n      ]\n    }\n  }\n}\n```\n\n### UVX\n```json\n{\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uv\",\n    \"args\": [ \n      \"--directory\",\n      \"/<path to mcp-servers>/mcp-servers/src/git\",\n      \"run\",\n      \"mcp-server-git\"\n    ]\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ncd src/git\ndocker build -t mcp/git .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "Model Context Protocol",
      "url": "https://pypi.org/project/mcp-server-git/"
    },
    "isOfficial": false,
    "sourceUrl": "https://pypi.org/project/mcp-server-git/",
    "distribution": {
      "type": "pip",
      "package": "mcp-server-git"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-server-git"
      ],
      "env": {}
    }
  },
  {
    "id": "66281d1f-1a9a-4a3f-be41-a5e88f80ae92",
    "name": "server-github",
    "description": "GitHub MCP Server",
    "fullDescription": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/github"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-github"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-github"
      ],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "0c97c2df-1f42-47f3-aa8c-2b619c62b675",
    "name": "lumile/mercadolibre-mcp",
    "description": "MercadoLibre MCP Server",
    "fullDescription": "# MercadoLibre MCP Server\n\nAn MCP server that provides access to MercadoLibre API.\n\n## Features\n\n### Tools\n- `search_products` - Search products in MercadoLibre, and return a list of products.\n  - `query` - The search query\n  - `category` - The category to search in\n  - `filters` - The filters to apply\n- `product_reviews` - Get product reviews\n- `product_description` - Get product description\n- `seller_reputation` - Get seller reputation\n\n## Setup\n\n### Prerequisites\n\nYou'll need a MercadoLibre Client ID and Client Secret to use this server.  You can get one for free at https://developers.mercadolibre.com/, create an application and get the credentials.\n\nOnce you have the credentials, you can set the `CLIENT_ID` and `CLIENT_SECRET` environment variables.  And theres also the need to set the `SITE_ID` environment variable to the site you want to use.\n\n### Mercado Libre Site ID\n- MLA: Argentina (default)\n- MLB: Brasil\n- MCO: Colombia\n- MEX: México\n- MLU: Uruguay\n- MLC: Chile\n\n### Installation\n\nThere are two ways to use this server:\n\n#### Installing via Smithery\n\nTo install MercadoLibre MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lumile/mercadolibre-mcp):\n\n```bash\nnpx -y @smithery/cli install @lumile/mercadolibre-mcp --client claude\n```\n\n#### Option 1: NPX (Recommended)\nAdd this configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mercadolibre-mcp\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n#### Option 2: Local Installation\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add this configuration to your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mercadolibre-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Contributing\n\nContributions are extremely welcome! Please open a PR with new MCP servers or any other improvements to the codebase.\n\n## Disclaimer\n\nThis project is not affiliated with MercadoLibre. All logos are trademarks of their respective owners.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n------\n\n<p align=\"center\">\nMade with ❤️ by Lumile\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.lumile.com.ar\">Contact us</a> for custom AI development and automation solutions.\n</p>\n",
    "publisher": {
      "id": "lumile",
      "name": "lumile",
      "url": "https://github.com/lumile/mercadolibre-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/lumile/mercadolibre-mcp",
    "distribution": {
      "type": "npm",
      "package": "mercadolibre-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mercadolibre-mcp"
      ],
      "env": {
        "CLIENT_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CLIENT_SECRET": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SITE_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "37b2cedb-a5f4-4395-8322-11da94c197f3",
    "name": "EyevinnOSC/mcp-server",
    "description": "Eyevinn Open Source Cloud MCP Server",
    "fullDescription": "# Eyevinn Open Source Cloud MCP Server\n\nMCP Server for [Eyevinn Open Source Cloud](www.osaas.io) API, enabling creation of solutions based on open web services. Web services based on open source where the creator gets a share of the revenue the platform generates. No vendor-lock in as the web services are based on open source.\n\n### Features\n\n- **Database Setup**: Create and setup an SQL-, NoSQL- or memory-database based on open source made available as an open web service.\n- **Storage Setup**: Create an S3 compatible storage bucket based on open source made available as an open web service.\n- **VOD Pipeline**: Create a pipeline for transcoding and packaging files for VOD distribution.\n\n![screenshot](screenshot.png)\n\n![screenshot-vod](screenshot-vod.png)\n\n## Tools\n\n1. `osc_create_db`\n   - Create a new database instance\n   - Inputs:\n     - `name` (string): Name of database instance\n     - `type` (string): Type of database (SQL, NoSQL or MemoryDb)\n   - Returns: Connection string to database\n2. `osc_create_bucket`\n   - Create a storage bucket\n   - Inputs:\n     - `name` (string): Name of bucket\n   - Returns: Endpoint and credentials to bucket\n3. `osc_create_vod_pipeline`\n   - Create a VOD transcoding and packaging pipeline\n   - Inputs:\n     - `name` (string): Name of pipeline\n     - `output` (string): Name of bucket to place the files\n   - Returns: REST Endpoint for submitting jobs.\n\n## Setup\n\n### Personal Access Token\n\n- If you have not already done so, sign up for an [Eyevinn OSC account](https://app.osaas.io).\n- In the Eyevinn OSC web console go to [API settings](https://app.osaas.io/dashboard/settings/api) (in Settings > API settings)\n- Copy the Personal Access Token\n\n### Usage with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"eyevinn-osc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@osaas/mcp-server\"],\n      \"env\": {\n        \"OSC_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n```\nnpm run build\nnpx @modelcontextprotocol/inspector dist/index.js\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "osaas",
      "name": "osaas",
      "url": "https://github.com/EyevinnOSC/mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/EyevinnOSC/mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@osaas/mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@osaas/mcp-server"
      ],
      "env": {
        "OSC_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "690b50ff-08a3-40f1-8497-009ba14e32b3",
    "name": "d-kimuson/esa-mcp-server",
    "description": "esa-mcp-server",
    "fullDescription": "# esa-mcp-server\n\nesa-mcp-server は、[esa.io](https://esa.io) の API を [Model Context Protocol (MCP)](https://github.com/microsoft/model-context-protocol) を介して利用できるようにするサーバーです。\n\n<a href=\"https://glama.ai/mcp/servers/undwqgwbtd\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/undwqgwbtd/badge\" alt=\"ESA Server MCP server\" /></a>\n\n## 機能\n\n- esa.io の記事検索\n- 記事の詳細取得（単一・複数）\n- MCP 準拠のインターフェース提供\n\n## Usage\n\n利用するツールに合わせて以下のように設定ファイルを準備してください。\n\n```json\n{\n  \"mcpServers\": {\n    \"esa-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"esa-mcp-server@latest\"\n      ]\n    },\n    \"env\": {\n      \"ESA_API_KEY\": \"your api key here\",\n      \"DEFAULT_ESA_TEAM\": \"your default esa team\"\n    }\n  }\n}\n```\n\n## 利用可能なツール\n\n### search_esa_posts\n\nesa.io の記事を検索します。\n\n```typescript\ntype SearchPostsParams = {\n  teamName?: string;\n  query: string;\n  order?: \"asc\" | \"desc\";\n  sort?: \"created\" | \"updated\" | \"number\" | \"stars\" | \"comments\" | \"best_match\";\n  page?: number;\n  perPage?: number;\n}\n```\n\nesa の記事検索 API は、記事の本文も返しますが MCP Server のレスポンスには含めないようにしています。\n\nこれは検索の時点でヒットした全記事の本文を返すとトークン数を激しく消費してしまうためです。\n\n各パラメータの用途は [esa API v1 の公式ドキュメント](https://docs.esa.io/posts/102) を参照してください。\n\n### read_esa_post\n\n指定した投稿番号の記事を取得します。\n\n```typescript\ntype ReadPostParams = {\n  teamName?: string;\n  postNumber: number;\n}\n```\n\n### read_esa_multiple_posts\n\n複数の投稿番号の記事を一括で取得します。\n\n```typescript\ntype ReadMultiplePostsParams = {\n  teamName?: string;\n  postNumbers: number[];\n}\n```\n\n## Contribution\n\n歓迎します。\n",
    "publisher": {
      "id": "d-kimuson",
      "name": "d-kimuson",
      "url": "https://github.com/d-kimuson/esa-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/d-kimuson/esa-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "esa-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "esa-mcp-server"
      ],
      "env": {
        "ESA_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "DEFAULT_ESA_TEAM": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "0c8068f4-03c5-4b5d-baea-b0a6b6094564",
    "name": "farhankaz/redis-mcp",
    "description": "Redis MCP Server",
    "fullDescription": "# Redis MCP Server\n\nA Model Context Protocol (MCP) server that provides access to Redis database operations.\n\n## Project Structure\n\n```\nsrc/\n├── interfaces/\n│   └── types.ts           # Shared TypeScript interfaces and types\n├── tools/\n│   ├── base_tool.ts       # Abstract base class for Redis tools\n│   ├── tool_registry.ts   # Registry managing all available Redis tools\n│   ├── hmset_tool.ts      # HMSET Redis operation\n│   ├── hget_tool.ts       # HGET Redis operation\n│   ├── hgetall_tool.ts    # HGETALL Redis operation\n│   ├── scan_tool.ts       # SCAN Redis operation\n│   ├── set_tool.ts        # SET Redis operation\n│   ├── get_tool.ts        # GET Redis operation\n│   ├── del_tool.ts        # DEL Redis operation\n│   ├── zadd_tool.ts       # ZADD Redis operation\n│   ├── zrange_tool.ts     # ZRANGE Redis operation\n│   ├── zrangebyscore_tool.ts # ZRANGEBYSCORE Redis operation\n│   └── zrem_tool.ts       # ZREM Redis operation\n└── redis_server.ts        # Main server implementation\n```\n\n## Available Tools\n\n| Tool | Type | Description | Input Schema |\n|------|------|-------------|--------------|\n| hmset | Hash Command | Set multiple hash fields to multiple values | `key`: string (Hash key)<br>`fields`: object (Field-value pairs to set) |\n| hget | Hash Command | Get the value of a hash field | `key`: string (Hash key)<br>`field`: string (Field to get) |\n| hgetall | Hash Command | Get all fields and values in a hash | `key`: string (Hash key) |\n| scan | Key Command | Scan Redis keys matching a pattern | `pattern`: string (Pattern to match, e.g., \"user:*\")<br>`count`: number, optional (Number of keys to return) |\n| set | String Command | Set string value with optional NX and PX options | `key`: string (Key to set)<br>`value`: string (Value to set)<br>`nx`: boolean, optional (Only set if not exists)<br>`px`: number, optional (Expiry in milliseconds) |\n| get | String Command | Get string value | `key`: string (Key to get) |\n| del | Key Command | Delete a key | `key`: string (Key to delete) |\n| zadd | Sorted Set Command | Add one or more members to a sorted set | `key`: string (Sorted set key)<br>`members`: array of objects with `score`: number and `value`: string |\n| zrange | Sorted Set Command | Return a range of members from a sorted set by index | `key`: string (Sorted set key)<br>`start`: number (Start index)<br>`stop`: number (Stop index)<br>`withScores`: boolean, optional (Include scores in output) |\n| zrangebyscore | Sorted Set Command | Return members from a sorted set with scores between min and max | `key`: string (Sorted set key)<br>`min`: number (Minimum score)<br>`max`: number (Maximum score)<br>`withScores`: boolean, optional (Include scores in output) |\n| zrem | Sorted Set Command | Remove one or more members from a sorted set | `key`: string (Sorted set key)<br>`members`: array of strings (Members to remove) |\n| sadd | Set Command | Add one or more members to a set | `key`: string (Set key)<br>`members`: array of strings (Members to add to the set) |\n| smembers | Set Command | Get all members in a set | `key`: string (Set key) |\n\n## Usage\n\nConfigure in your MCP client (e.g., Claude Desktop, Cline):\n\n```json\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"npx\",\n      \"args\": [\"redis-mcp\", \"--redis-host\", \"localhost\", \"--redis-port\", \"6379\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n## Command Line Arguments\n\n- `--redis-host`: Redis server host (default: localhost)\n- `--redis-port`: Redis server port (default: 6379)\n\n### Installing via Smithery\n\nTo install Redis Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/redis-mcp):\n\n```bash\nnpx -y @smithery/cli install redis-mcp --client claude\n```\n\n## Development\n\nTo add a new Redis tool:\n\n1. Create a new tool class in `src/tools/` extending `RedisTool`\n2. Define the tool's interface in `src/interfaces/types.ts`\n3. Register the tool in `src/tools/tool_registry.ts`\n\nExample tool implementation:\n\n```typescript\nexport class MyTool extends RedisTool {\n  name = 'mytool';\n  description = 'Description of what the tool does';\n  inputSchema = {\n    type: 'object',\n    properties: {\n      // Define input parameters\n    },\n    required: ['requiredParam']\n  };\n\n  validateArgs(args: unknown): args is MyToolArgs {\n    // Implement argument validation\n  }\n\n  async execute(args: unknown, client: RedisClientType): Promise<ToolResponse> {\n    // Implement tool logic\n  }\n}\n```\n\n## License\n\nMIT: https://opensource.org/license/mit\n",
    "publisher": {
      "id": "farhankaz",
      "name": "farhankaz",
      "url": "https://github.com/farhankaz/redis-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/farhankaz/redis-mcp",
    "distribution": {
      "type": "npm",
      "package": "redis-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "redis-mcp",
        "--redis-host",
        "$ENVARG_REDIS_HOST",
        "--redis-port",
        "$ENVARG_REDIS_PORT"
      ],
      "env": {
        "ENVARG_REDIS_HOST": {
          "description": "Redis server host address",
          "type": "input",
          "required": true
        },
        "ENVARG_REDIS_PORT": {
          "description": "Redis server port number",
          "type": "input",
          "required": true
        }
      }
    }
  },
  {
    "id": "3d24d0a3-4b2c-4758-880e-3c7ba2db1603",
    "name": "andybrandt/mcp-simple-pubmed",
    "description": "MCP Simple PubMed",
    "fullDescription": "# MCP Simple PubMed\n\nAn MCP server that provides access to PubMed articles through the Entrez API.\n\n## Features\n\n- Search PubMed database using keywords\n- Access article abstracts\n- Download full text when available (for open access articles available directly on PubMed) \n\nPlease note that the tool returns XML-ized version of full text. It is however more useful for AIs than a \"human readable\" text would have been as it gives them additional information about document's structure. At least, this is what Claude 3.5 Sonnet said he prefers. \n\nPlease also note that inability of this tool and possibly other tools to deliver a paper's full text may not be due to the fact that it is not available. When testing this tool I came across a paper that did not have full text on PubMed and when Claude accessed the publication URL (which we did get through DOI) using fetch he did get a \"forbidden” error. However, I was able to access the very same page using a regular browser. \n\nIn other words if your AI assistant is not able to get the full text of a paper using this tool it is worth trying manually with a regular web browser.\n\nFinally, this tool of course can’t give you access to paywalled/paid papers. You may be able to read them through your library access or – as a last resort – through a certain site that strives to make publicly funded research freely available. \n\n## Installation\n\n### Installing via Smithery\n\nTo install Simple PubMed for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-simple-pubmed):\n\n```bash\nnpx -y @smithery/cli install mcp-simple-pubmed --client claude\n```\n\n### Manual Installation\n```bash\npip install mcp-simple-pubmed\n```\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `PUBMED_EMAIL`: Your email address (required by NCBI)\n- `PUBMED_API_KEY`: Optional API key for higher rate limits \n\nThe standard rate limit is 3 requests / second. No rate limiting was implemented, as it is highly unlikely in the typical usage scenario that your AI would generate more traffic. If you need it, you can [register for an API key](https://www.ncbi.nlm.nih.gov/account/) which will give you 10 requests / second. Read about [this on NCBI pages](https://www.ncbi.nlm.nih.gov/books/NBK25497/#chapter2.Usage_Guidelines_and_Requiremen).\n\n## Usage with Claude Desktop\n\nAdd to your Claude Desktop configuration (`claude_desktop_config.json`):\n\n(Mac OS)\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-pubmed\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcp_simple_pubmed\"],\n      \"env\": {\n        \"PUBMED_EMAIL\": \"your-email@example.com\",\n        \"PUBMED_API_KEY\": \"your-api-key\" \n      }\n    }\n  }\n}\n```\n\n(Windows)\n\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-pubmed\": {\n      \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n      \"args\": [\n        \"-m\",\n        \"mcp_simple_pubmed\"\n      ],\n      \"env\": {\n        \"PUBMED_EMAIL\": \"your-email@example.com\",\n        \"PUBMED_API_KEY\": \"your-api-key\" \n      }\n    }\n  }\n}\n```\n\n## License\n\nMIT License\n",
    "publisher": {
      "id": "andybrandt",
      "name": "andybrandt",
      "url": "https://github.com/andybrandt/mcp-simple-pubmed"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/andybrandt/mcp-simple-pubmed",
    "distribution": {
      "type": "pip",
      "package": "mcp-simple-pubmed"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-simple-pubmed"
      ],
      "env": {
        "PUBMED_EMAIL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "PUBMED_API_KEY": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "61b61a13-d594-4c0f-98b3-0ecc8b4326dd",
    "name": "roychri/mcp-server-asana",
    "description": "",
    "fullDescription": "\n# MCP Server for Asana\n\nThis Model Context Protocol server implementation of Asana allows you\nto talk to Asana API from MCP Client such as Anthropic's Claude\nDesktop Application, and many more.\n\nMore details on MCP here:\n - https://www.anthropic.com/news/model-context-protocol\n - https://modelcontextprotocol.io/introduction\n - https://github.com/modelcontextprotocol\n\n## Usage\n\nIn the AI toold of your choice (ex: Claude Desktop) ask something about asana tasks, projects, workspaces, and/or comments. Mentioning the word \"asana\" will increase the chance of having the LLM pick the right tool.\n\nExample:\n\n> How many unfinished asana tasks do we have in our Sprint 30 project?\n\nAnother example:\n\n![Claude Desktop Example](https://raw.githubusercontent.com/roychri/mcp-server-asana/main/mcp-server-asana-claude-example.png)\n\n## Tools\n\n1. `asana_list_workspaces`\n    * List all available workspaces in Asana\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of workspaces\n2. `asana_search_projects`\n    * Search for projects in Asana using name pattern matching\n    * Required input:\n        * workspace (string): The workspace to search in\n        * name_pattern (string): Regular expression pattern to match project names\n    * Optional input:\n        * archived (boolean): Only return archived projects (default: false)\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of matching projects\n3. `asana_search_tasks`\n    * Search tasks in a workspace with advanced filtering options\n    * Required input:\n        * workspace (string): The workspace to search in\n    * Optional input:\n        * text (string): Text to search for in task names and descriptions\n        * resource_subtype (string): Filter by task subtype (e.g. milestone)\n        * completed (boolean): Filter for completed tasks\n        * is_subtask (boolean): Filter for subtasks\n        * has_attachment (boolean): Filter for tasks with attachments\n        * is_blocked (boolean): Filter for tasks with incomplete dependencies\n        * is_blocking (boolean): Filter for incomplete tasks with dependents\n        * assignee, projects, sections, tags, teams, and many other advanced filters\n        * sort_by (string): Sort by due_date, created_at, completed_at, likes, modified_at (default: modified_at)\n        * sort_ascending (boolean): Sort in ascending order (default: false)\n        * opt_fields (string): Comma-separated list of optional fields to include\n        * custom_fields (object): Object containing custom field filters\n    * Returns: List of matching tasks\n4. `asana_get_task`\n    * Get detailed information about a specific task\n    * Required input:\n        * task_id (string): The task ID to retrieve\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Detailed task information\n5. `asana_create_task`\n    * Create a new task in a project\n    * Required input:\n        * project_id (string): The project to create the task in\n        * name (string): Name of the task\n    * Optional input:\n        * notes (string): Description of the task\n        * html_notes (string): HTML-like formatted description of the task\n        * due_on (string): Due date in YYYY-MM-DD format\n        * assignee (string): Assignee (can be 'me' or a user ID)\n        * followers (array of strings): Array of user IDs to add as followers\n        * parent (string): The parent task ID to set this task under\n        * projects (array of strings): Array of project IDs to add this task to\n    * Returns: Created task information\n6. `asana_get_task_stories`\n    * Get comments and stories for a specific task\n    * Required input:\n        * task_id (string): The task ID to get stories for\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of task stories/comments\n7. `asana_update_task`\n    * Update an existing task's details\n    * Required input:\n        * task_id (string): The task ID to update\n    * Optional input:\n        * name (string): New name for the task\n        * notes (string): New description for the task\n        * due_on (string): New due date in YYYY-MM-DD format\n        * assignee (string): New assignee (can be 'me' or a user ID)\n        * completed (boolean): Mark task as completed or not\n    * Returns: Updated task information\n8. `asana_get_project`\n    * Get detailed information about a specific project\n    * Required input:\n        * project_id (string): The project ID to retrieve\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Detailed project information\n9. `asana_get_project_task_counts`\n    * Get the number of tasks in a project\n    * Required input:\n        * project_id (string): The project ID to get task counts for\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Task count information\n10. `asana_get_project_sections`\n    * Get sections in a project\n    * Required input:\n        * project_id (string): The project ID to get sections for\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of project sections\n11. `asana_create_task_story`\n    * Create a comment or story on a task\n    * Required input:\n        * task_id (string): The task ID to add the story to\n        * text (string): The text content of the story/comment\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Created story information\n12. `asana_add_task_dependencies`\n    * Set dependencies for a task\n    * Required input:\n        * task_id (string): The task ID to add dependencies to\n        * dependencies (array of strings): Array of task IDs that this task depends on\n    * Returns: Updated task dependencies\n13. `asana_add_task_dependents`\n    * Set dependents for a task (tasks that depend on this task)\n    * Required input:\n        * task_id (string): The task ID to add dependents to\n        * dependents (array of strings): Array of task IDs that depend on this task\n    * Returns: Updated task dependents\n14. `asana_create_subtask`\n    * Create a new subtask for an existing task\n    * Required input:\n        * parent_task_id (string): The parent task ID to create the subtask under\n        * name (string): Name of the subtask\n    * Optional input:\n        * notes (string): Description of the subtask\n        * due_on (string): Due date in YYYY-MM-DD format\n        * assignee (string): Assignee (can be 'me' or a user ID)\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Created subtask information\n15. `asana_get_multiple_tasks_by_gid`\n    * Get detailed information about multiple tasks by their GIDs (maximum 25 tasks)\n    * Required input:\n        * task_ids (array of strings or comma-separated string): Task GIDs to retrieve (max 25)\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of detailed task information\n16. `asana_get_project_status`\n    * Get a project status update\n    * Required input:\n        * project_status_gid (string): The project status GID to retrieve\n    * Optional input:\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Project status information\n17. `asana_get_project_statuses`\n    * Get all status updates for a project\n    * Required input:\n        * project_gid (string): The project GID to get statuses for\n    * Optional input:\n        * limit (number): Results per page (1-100)\n        * offset (string): Pagination offset token\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: List of project status updates\n18. `asana_create_project_status`\n    * Create a new status update for a project\n    * Required input:\n        * project_gid (string): The project GID to create the status for\n        * text (string): The text content of the status update\n    * Optional input:\n        * color (string): The color of the status (green, yellow, red)\n        * title (string): The title of the status update\n        * html_text (string): HTML formatted text for the status update\n        * opt_fields (string): Comma-separated list of optional fields to include\n    * Returns: Created project status information\n19. `asana_delete_project_status`\n    * Delete a project status update\n    * Required input:\n        * project_status_gid (string): The project status GID to delete\n    * Returns: Deletion confirmation\n\n## Prompts\n\n1. `task-summary`\n    * Get a summary and status update for a task based on its notes, custom fields and comments\n    * Required input:\n        * task_id (string): The task ID to get summary for\n    * Returns: A detailed prompt with instructions for generating a task summary\n\n## Resources\n\nNone\n\n## Setup\n\n\n1. **Create an Asana account**:\n\n   - Visit the [Asana](https://www.asana.com).\n   - Click \"Sign up\".\n\n2. **Retrieve the Asana Access Token**:\n\n   - You can generate a personal access token from the Asana developer console.\n     - https://app.asana.com/0/my-apps\n   - More details here: https://developers.asana.com/docs/personal-access-token\n\n3. **Configure Claude Desktop**:\n   Add the following to your `claude_desktop_config.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"asana\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@roychri/mcp-server-asana\"],\n         \"env\": {\n           \"ASANA_ACCESS_TOKEN\": \"your-asana-access-token\"\n         }\n       }\n     }\n   }\n   ```\n\n## Troubleshooting\n\nIf you encounter permission errors:\n\n1. Ensure the asana plan you have allows API access\n2. Confirm the access token and configuration are correctly set in `claude_desktop_config.json`.\n\n\n## Contributing\n\nClone this repo and start hacking.\n\n### Test it locally with the MCP Inspector\n\nIf you want to test your changes, you can use the MCP Inspector like this:\n\n```bash\nnpm run inspector\n```\n\nThis will expose the client to port `5173` and server to port `3000`.\n\nIf those ports are already used by something else, you can use:\n\n```bash\nCLIENT_PORT=5009 SERVER_PORT=3009 npm run inspector\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "roychri",
      "name": "roychri",
      "url": "https://github.com/roychri/mcp-server-asana"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/roychri/mcp-server-asana",
    "distribution": {
      "type": "npm",
      "package": "@roychri/mcp-server-asana"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@roychri/mcp-server-asana"
      ],
      "env": {
        "ASANA_ACCESS_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "975bb352-16c8-4ae5-8321-5f3d2469cb95",
    "name": "kazuph/mcp-gmail-gas",
    "description": "MCP Gmail",
    "fullDescription": "# MCP Gmail\n\nModel Context Protocol server for Gmail integration. This allows Claude Desktop (or any MCP client) to interact with your Gmail account through Google Apps Script.\n\n## Quick Start (For Users)\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Gmail account\n- Google Apps Script deployment\n- Claude Desktop (install from https://claude.ai/desktop)\n\n### Configuration\n\n1. Deploy the Google Apps Script\n- Visit [Google Apps Script](https://script.google.com/) and create a new project\n- Copy the entire contents of `code.gs` and paste it into the script editor\n- Click on \"Deploy\" > \"New deployment\"\n- Select \"Web app\" as the deployment type\n- Configure the following settings:\n  - Execute as: Me\n  - Who has access: Anyone\n  - Click \"Deploy\"\n- When prompted, review and authorize the app to access your Gmail account\n- Copy the deployment URL and generate a random API key for security\n\nNote: The script requires Gmail access permissions. When you first deploy and run the script, Google will ask you to review and grant these permissions. Make sure to:\n1. Click \"Review Permissions\"\n2. Select your Google account\n3. Click \"Advanced\" if you see a warning\n4. Click \"Go to [Your Project Name] (unsafe)\"\n5. Click \"Allow\" to grant the necessary Gmail permissions\n\n2. Open your Claude Desktop configuration file at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nYou can find this through the Claude Desktop menu:\n1. Open Claude Desktop\n2. Click Claude on the Mac menu bar\n3. Click \"Settings\"\n4. Click \"Developer\"\n\n3. Add the following to your configuration:\n\n```json\n{\n  \"tools\": {\n    \"gmail\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-gmail-gas\"],\n      \"env\": {\n        \"GAS_ENDPOINT\": \"YOUR_DEPLOYMENT_URL\",\n        \"VALID_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nNote: Replace `YOUR_DEPLOYMENT_URL` and `YOUR_API_KEY` with your actual values.\n\n## For Developers\n\n### Prerequisites\n- Node.js 18+ (install via `brew install node`)\n- Gmail account\n- Google Apps Script\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n### Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-gmail-gas.git\ncd mcp-gmail-gas\nnpm install\nnpm run build\n```\n\n### Development Configuration\n\n1. Make sure Claude Desktop is installed and running.\n\n2. Install tsx globally if you haven't:\n```bash\nnpm install -g tsx\n# or\npnpm add -g tsx\n```\n\n3. Modify your Claude Desktop config located at:\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\nAdd the following to your MCP client's configuration:\n\n```json\n{\n  \"tools\": {\n    \"gmail\": {\n      \"args\": [\"tsx\", \"/path/to/mcp-gmail-gas/index.ts\"],\n      \"env\": {\n        \"GAS_ENDPOINT\": \"YOUR_DEPLOYMENT_URL\",\n        \"VALID_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `gmail_search_messages`: Search for emails using Gmail search query syntax (e.g., \"subject:Meeting newer_than:1d\")\n- `gmail_get_message`: Get the full content and details of a specific email\n- `gmail_download_attachment`: Download an attachment from a specific email\n\n## Security Note\n\nAlways keep your `VALID_API_KEY` secret and never commit it to version control. This key helps ensure that only authorized clients can access your Gmail through the Google Apps Script deployment.\n",
    "publisher": {
      "id": "kazuph",
      "name": "kazuph",
      "url": "https://github.com/kazuph/mcp-gmail-gas"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/kazuph/mcp-gmail-gas",
    "distribution": {
      "type": "npm",
      "package": "@kazuph/mcp-gmail-gas"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@kazuph/mcp-gmail-gas"
      ],
      "env": {
        "GAS_ENDPOINT": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "VALID_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "51193e21-78b8-42d8-8fbc-8f1f96d91c08",
    "name": "hannesrudolph/mcp-ragdocs",
    "description": "RAG Documentation MCP Server",
    "fullDescription": "# RAG Documentation MCP Server\n\nAn MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context.\n\n## Features\n\n- Vector-based documentation search and retrieval\n- Support for multiple documentation sources\n- Semantic search capabilities\n- Automated documentation processing\n- Real-time context augmentation for LLMs\n\n## Tools\n\n### search_documentation\nSearch through stored documentation using natural language queries. Returns matching excerpts with context, ranked by relevance.\n\n**Inputs:**\n- `query` (string): The text to search for in the documentation. Can be a natural language query, specific terms, or code snippets.\n- `limit` (number, optional): Maximum number of results to return (1-20, default: 5). Higher limits provide more comprehensive results but may take longer to process.\n\n### list_sources\nList all documentation sources currently stored in the system. Returns a comprehensive list of all indexed documentation including source URLs, titles, and last update times. Use this to understand what documentation is available for searching or to verify if specific sources have been indexed.\n\n### extract_urls\nExtract and analyze all URLs from a given web page. This tool crawls the specified webpage, identifies all hyperlinks, and optionally adds them to the processing queue.\n\n**Inputs:**\n- `url` (string): The complete URL of the webpage to analyze (must include protocol, e.g., https://). The page must be publicly accessible.\n- `add_to_queue` (boolean, optional): If true, automatically add extracted URLs to the processing queue for later indexing. Use with caution on large sites to avoid excessive queuing.\n\n### remove_documentation\nRemove specific documentation sources from the system by their URLs. The removal is permanent and will affect future search results.\n\n**Inputs:**\n- `urls` (string[]): Array of URLs to remove from the database. Each URL must exactly match the URL used when the documentation was added.\n\n### list_queue\nList all URLs currently waiting in the documentation processing queue. Shows pending documentation sources that will be processed when run_queue is called. Use this to monitor queue status, verify URLs were added correctly, or check processing backlog.\n\n### run_queue\nProcess and index all URLs currently in the documentation queue. Each URL is processed sequentially, with proper error handling and retry logic. Progress updates are provided as processing occurs. Long-running operations will process until the queue is empty or an unrecoverable error occurs.\n\n### clear_queue\nRemove all pending URLs from the documentation processing queue. Use this to reset the queue when you want to start fresh, remove unwanted URLs, or cancel pending processing. This operation is immediate and permanent - URLs will need to be re-added if you want to process them later.\n\n## Usage\n\nThe RAG Documentation tool is designed for:\n\n- Enhancing AI responses with relevant documentation\n- Building documentation-aware AI assistants\n- Creating context-aware tooling for developers\n- Implementing semantic documentation search\n- Augmenting existing knowledge bases\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"rag-docs\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@hannesrudolph/mcp-ragdocs\"\n      ],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"\",\n        \"QDRANT_URL\": \"\",\n        \"QDRANT_API_KEY\": \"\"\n      }\n    }\n  }\n}\n```\n\nYou'll need to provide values for the following environment variables:\n- `OPENAI_API_KEY`: Your OpenAI API key for embeddings generation\n- `QDRANT_URL`: URL of your Qdrant vector database instance\n- `QDRANT_API_KEY`: API key for authenticating with Qdrant\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Acknowledgments\n\nThis project is a fork of [qpd-v/mcp-ragdocs](https://github.com/qpd-v/mcp-ragdocs), originally developed by qpd-v. The original project provided the foundation for this implementation.",
    "publisher": {
      "id": "hannesrudolph",
      "name": "hannesrudolph",
      "url": "https://github.com/hannesrudolph/mcp-ragdocs"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/hannesrudolph/mcp-ragdocs",
    "distribution": {
      "type": "npm",
      "package": "@hannesrudolph/mcp-ragdocs"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@hannesrudolph/mcp-ragdocs"
      ],
      "env": {
        "OPENAI_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "QDRANT_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "89c74a57-6eb5-437d-9eba-a55eeed551c8",
    "name": "cmann50/mcp-chrome-google-search",
    "description": "MCP Chrome Google Search Tool",
    "fullDescription": "# MCP Chrome Google Search Tool\n\nMCP tool for Google search and webpage content extraction using Chrome browser. Works with Claude to enable Google search and content fetching capabilities.\n\n## Quick Installation\n\n1. **Configure Claude Desktop**\n   - Open Claude Desktop on Mac\n   - Go to Claude > Settings > Developer > Edit Config\n   - Add the following to your config file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-chrome-google-search\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"-y\",\n           \"@cmann50/mcp-chrome-google-search\"\n         ]\n       }\n     }\n   }\n   ```\n   - Restart Claude Desktop\n\n2. **First Time Setup**\n   - **Grant Accessibility Permissions**\n     - On first run, approve macOS accessibility permissions prompt\n     - Navigate to: System Preferences > Security & Privacy > Privacy > Accessibility\n     - Add and enable permissions for your terminal app\n\n   - **Enable Chrome JavaScript from Apple Events**\n     - Open Chrome\n     - Navigate to: View > Developer > Allow JavaScript from Apple Events\n     - One-time setup only\n\nOnce configured, Claude will be able to perform Google searches and extract webpage content through Chrome when you make requests.\n\n## Key Advantages\n\n- Free to search google\n- Opens and small windows and uses your chrome browser, so should not get blocked\n- Since it is using your Chrome window it can access authenticated content.  Claude can just open the URL in your browser.\n\n## Platform Support\n- ✅ macOS\n- ❌ Windows (not supported)\n- ❌ Linux (not supported)\n\n## Requirements\n1. macOS\n2. Google Chrome\n3. Node.js 20 or higher\n\n## Alternative Installation Methods\n\n### NPX Installation\n```bash\nnpx mcp-chrome-google-search\n```\n\n\n### Custom Installation\n1. Checkout from git\n2. Run `npm run build`\n3. Add to Claude config (use absolute path):\n```json\n{\n    \"google-tools\": {\n        \"command\": \"node\",\n        \"args\": [\n            \"/your/checkout/path/mcp/mcp-chrome-google-search/dist/index.js\"\n        ]\n    }\n}\n```\n\n## Local development\n\nTo test changes locally bump package.json version and run\nto put it in edit mode:\n```\nnpm install -g .\n```\nThen just do `npm run build` and the files will go in dist where claude is monitoring\n\nThen press ctrl-R in claude desktop, no need to restart it\n\n## Debugging\n\n### Log Monitoring\n```bash\n# Follow logs in real-time\ntail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n```\n\n### Dev Tools Access\n1. Enable developer settings:\n```bash\necho '{\"allowDevTools\": true}' > ~/Library/Application\\ Support/Claude/developer_settings.json\n```\n2. Open DevTools: Command-Option-Shift-i in Claude desktop\n3. Use ctrl-r in Claude desktop while tailing for better errors\n\n## Troubleshooting\n\n### Chrome JavaScript Error\nIf you see:\n```\nexecution error: Google Chrome got an error: Executing JavaScript through AppleScript \nis turned off. For more information: https://support.google.com/chrome/?p=applescript (12)\n```\n\nSolution:\n1. Open Chrome\n2. View > Developer > Allow JavaScript from Apple Events\n\n### Accessibility Permission Issues\nIf Chrome control fails:\n1. Open System Preferences\n2. Security & Privacy > Privacy > Accessibility\n3. Ensure terminal app is listed and enabled\n4. Use lock icon to make changes if needed\n\n## Implementation Details\n\n- Uses AppleScript for Chrome control\n- Visible automation - Chrome windows will open/navigate\n- Each request opens a new Chrome tab\n- Close unused tabs periodically for optimal performance\n- Only use with trusted Claude instances (has Chrome control access)\n\n## Support\n\n- Create GitHub issues for problems\n- Include macOS and Chrome version details\n\n## License\n\nMIT License - see LICENSE file for details",
    "publisher": {
      "id": "cmann50",
      "name": "cmann50",
      "url": "https://github.com/cmann50/mcp-chrome-google-search"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/cmann50/mcp-chrome-google-search",
    "distribution": {
      "type": "npm",
      "package": "@cmann50/mcp-chrome-google-search"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@cmann50/mcp-chrome-google-search"
      ],
      "env": {}
    }
  },
  {
    "id": "6dbe3446-2c31-4556-a662-353671ef9fb7",
    "name": "JoshuaRileyDev/supabase-mcp-server",
    "description": "Supabase MCP Server",
    "fullDescription": "# Supabase MCP Server\n\nA Model Context Protocol (MCP) server that provides programmatic access to the Supabase Management API. This server allows AI models and other clients to manage Supabase projects and organizations through a standardized interface.\n\n## Features\n\n### Project Management\n- List all projects\n- Get project details\n- Create new projects\n- Delete projects\n- Retrieve project API keys\n\n### Organization Management\n- List all organizations\n- Get organization details\n- Create new organizations\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/supabase-mcp-server\"\n      ],\n      \"env\": {\n        \"SUPABASE_API_KEY\": \"API_KEY_HERE\"\n      }\n    }\n  }\n}\n```",
    "publisher": {
      "id": "joshuarileydev",
      "name": "joshuarileydev",
      "url": "https://github.com/JoshuaRileyDev/supabase-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/JoshuaRileyDev/supabase-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "@joshuarileydev/supabase-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@joshuarileydev/supabase-mcp-server"
      ],
      "env": {
        "SUPABASE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "af4bd1b6-2dd8-45b1-ab67-6c2f0b44e1e2",
    "name": "sirmews/apple-notes-mcp",
    "description": "Apple Notes Model Context Protocol Server for Claude Desktop.",
    "fullDescription": "# Apple Notes Model Context Protocol Server for Claude Desktop.\n\nRead your local Apple Notes database and provide it to Claude Desktop.\n\nNow Claude can search your most forgotten notes and know even more about you.\n\nNoting could go wrong.\n\n## Components\n\n### Resources\n\nThe server implements the ability to read and write to your Apple Notes.\n\n### Tools\n\nThe server provides multiple prompts:\n- `get-all-notes`: Get all notes.\n- `read-note`: Get full content of a specific note.\n- `search-notes`: Search through notes.\n\n### Missing Features:\n\n- No handling of encrypted notes (ZISPASSWORDPROTECTED)\n- No support for pinned notes filtering\n- No handling of cloud sync status\n- Missing attachment content retrieval\n- No support for checklist status (ZHASCHECKLIST)\n- No ability to create or edit notes\n\n## Quickstart\n\n### Install the server\n\nRecommend using [uv](https://docs.astral.sh/uv/getting-started/installation/) to install the server locally for Claude.\n\n```\nuvx apple-notes-mcp\n```\nOR\n```\nuv pip install apple-notes-mcp\n```\n\nAdd your config as described below.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nNote: You might need to use the direct path to `uv`. Use `which uv` to find the path.\n\n\n__Development/Unpublished Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{project_dir}\",\n      \"run\",\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n__Published Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n## Mac OS Disk Permissions\n\nYou'll need to grant Full Disk Access to the server. This is because the Apple Notes sqlite database is nested deep in the MacOS file system.\n\nI may look at an AppleScript solution in the future if this annoys me further or if I want to start adding/appending to Apple Notes.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {project_dir} run apple-notes-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Source Code\n\nThe source code is available on [GitHub](https://github.com/sirmews/apple-notes-mcp).\n\n## Contributing\n\nSend your ideas and feedback to me on [Bluesky](https://bsky.app/profile/perfectlycromulent.bsky.social) or by opening an issue.\n",
    "publisher": {
      "id": "sirmews",
      "name": "sirmews",
      "url": "https://github.com/sirmews/apple-notes-mcp"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sirmews/apple-notes-mcp",
    "distribution": {
      "type": "pip",
      "package": "apple-notes-mcp"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "apple-notes-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "6189e79c-4825-4634-b218-9e037d8393c0",
    "name": "tadasant/mcp-server-ssh-rails-runner",
    "description": "MCP Server: SSH Rails Runner",
    "fullDescription": "# MCP Server: SSH Rails Runner\n\nAn MCP server that enables secure remote execution of Rails console commands via SSH. This server provides tools for both read-only operations and carefully managed mutations in a deployed Rails environment.\n\nThis works great with Cursor. You can use Cursor Composer to pull in your Rails model files as context and then use the `execute_read_only`, `dry_run_mutate`, and `execute_mutate` tools to make changes to the database. No need to trudge through complicated Admin UI's to get your data wrangling and analysis done.\n\n## Features\n\n- Remote Rails console execution over SSH\n- Safe read-only operations\n- Dry-run capability for mutations\n- Execution of approved mutations\n- Resource management for code snippets\n\n## Installation\n\n```bash\nnpm install\nnpm run build\n```\n\n## Configuration\n\nSet the following environment variables:\n\n```bash\nSSH_HOST=your.remote.host\nSSH_USER=your_ssh_user\nSSH_PRIVATE_KEY_PATH=your_SSH_PRIVATE_KEY_PATH\nRAILS_WORKING_DIR=/path/to/rails/app\n```\n\n## Usage with Claude Desktop\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"ssh-rails-runner\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"mcp-server-ssh-rails-runner\"],\n\t\t\t\"env\": {\n\t\t\t\t\"SSH_HOST\": \"your.remote.host\",\n\t\t\t\t\"SSH_USER\": \"your_ssh_user\",\n\t\t\t\t\"SSH_PRIVATE_KEY_PATH\": \"your_SSH_PRIVATE_KEY_PATH\",\n\t\t\t\t\"RAILS_WORKING_DIR\": \"/path/to/rails/app/root\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Available Tools\n\n### run_read_only\n\nExecutes read-only Rails console operations. The tool will analyze the request, formulate safe read-only commands, and return the results.\n\n### dry_run_mutate\n\nPlans and validates potential mutations. Creates a code snippet resource with the proposed changes without executing them.\n\n### execute_mutate\n\nExecutes previously approved mutation code snippets. Requires explicit user approval of a code snippet resource before execution.\n\n## Security Considerations\n\n- Only use with trusted SSH endpoints from your own local machine that is (temporarily) provided access to the remote environment\n- Review all mutations before execution\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "tadasant",
      "name": "tadasant",
      "url": "https://github.com/tadasant/mcp-server-ssh-rails-runner"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/tadasant/mcp-server-ssh-rails-runner",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-ssh-rails-runner"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-ssh-rails-runner"
      ],
      "env": {
        "SSH_HOST": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SSH_USER": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SSH_PRIVATE_KEY_PATH": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "RAILS_WORKING_DIR": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "de19c51f-3a1b-4b3d-96fb-815f49ad8371",
    "name": "PhialsBasement/nmap-mcp-server",
    "description": "MCP NMAP Server",
    "fullDescription": "# MCP NMAP Server\n\nA Model Context Protocol (MCP) server that enables AI assistants to perform network scanning operations using NMAP. This server provides a standardized interface for AI models to interact with NMAP, making it possible to perform network analysis and security assessments through AI conversations.\n\n## Prerequisites\n\n- Windows operating system\n- Node.js (v18 or higher)\n- NMAP installed and accessible from Windows command line\n- TypeScript for development\n\n## Installation\n\nInstall the package globally using npm:\n\n```bash\nnpm install -g mcp-nmap-server\n```\n\nOr install locally in your project:\n\n```bash\nnpm install mcp-nmap-server\n```\n\n## Features\n\nThe server provides access to NMAP's core functionality through a simple interface. It supports quick scans, full port scans, version detection, and custom timing templates. The implementation uses NMAP's native command-line interface, ensuring reliability and consistency with standard NMAP operations.\n\n## Configuration with Claude Desktop\n\nTo use this server with Claude Desktop on Windows, you'll need to configure it in the Claude configuration file located at:\n`C:\\Users\\YOUR_USERNAME\\AppData\\Roaming\\Claude\\config.json`\n\nAdd the NMAP server to your configuration by adding it to the `mcpServers` section. Here's a complete example of a Claude Desktop configuration file:\n\n```json\n{\n    \"mcpServers\": {\n        \"nmap\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"C:\\\\Users\\\\YOUR_USERNAME\\\\Downloads\\\\mcp-nmap-server\\\\dist\\\\index.js\"\n            ]\n        }\n    },\n    \"globalShortcut\": \"Ctrl+Q\"\n}\n```\n\nReplace `YOUR_USERNAME` with your Windows username and adjust the path to where you've installed the NMAP server.\n\n## Usage with AI\n\nOnce configured, AI assistants like Claude can use the server through the `run_nmap_scan` function. The function accepts the following parameters:\n\n```typescript\n{\n    target: string;            // Host or network to scan\n    ports?: string;           // Optional port specification (e.g., \"80,443\" or \"1-1000\")\n    scanType?: 'quick' | 'full' | 'version';  // Scan type (default: 'quick')\n    timing?: number;          // NMAP timing template 0-5 (default: 3)\n    additionalFlags?: string; // Optional additional NMAP flags\n}\n```\n\nExample conversation with Claude:\n\n```\nHuman: Can you scan localhost for open ports?\n\nClaude: I'll help you scan localhost using NMAP.\n\n<runs nmap scan with parameters>\ntarget: \"localhost\"\nscanType: \"quick\"\ntiming: 3\n```\n\n\n## License\n\nMIT License\n\n## Support\n\nFor issues, suggestions, or contributions, please visit the GitHub repository.",
    "publisher": {
      "id": "PhialsBasement",
      "name": "PhialsBasement",
      "url": "https://github.com/PhialsBasement/nmap-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/PhialsBasement/nmap-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-nmap-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-nmap-server"
      ],
      "env": {}
    }
  },
  {
    "id": "138be5f7-144c-426a-9c86-da6f225bff89",
    "name": "MarkusPfundstein/mcp-obsidian",
    "description": "MCP server for Obsidian",
    "fullDescription": "# MCP server for Obsidian\n\nMCP server to interact with Obsidian via the Local REST API community plugin.\n\n## Components\n\n### Tools\n\nThe server implements multiple tools to interact with Obsidian:\n\n- list_files_in_vault: Lists all files and directories in the root directory of your Obsidian vault\n- list_files_in_dir: Lists all files and directories in a specific Obsidian directory\n- get_file_contents: Return the content of a single file in your vault.\n- search: Search for documents matching a specified text query across all files in the vault\n- patch_content: Insert content into an existing note relative to a heading, block reference, or frontmatter field.\n- append_content: Append content to a new or existing file in the vault.\n\n### Example prompts\n\nIts good to first instruct Claude to use Obsidian. Then it will always call the tool.\n\nThe use prompts like this:\n- Get the contents of the last architecture call note and summarize them\n- Search for all files where Azure CosmosDb is mentioned and quickly explain to me the context in which it is mentioned\n- Summarize the last meeting notes and put them into a new note 'summary meeting.md'. Add an introduction so that I can send it via email.\n\n## Configuration\n\n### Obsidian REST API Key\n\nThere are two ways to configure the environment with the Obsidian REST API Key. \n\n1. Add to server config (preferred)\n\n```json\n{\n  \"mcp-obsidian\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-obsidian\"\n    ],\n    \"env\": {\n      \"OBSIDIAN_API_KEY\":\"<your_api_key_here>\"\n    }\n  }\n```\n\n2. Create a `.env` file in the working directory with the following required variable:\n\n```\nOBSIDIAN_API_KEY=your_api_key_here\n```\n\nNote: You can find the key in the Obsidian plugin config.\n\n## Quickstart\n\n### Install\n\n#### Obsidian REST API\n\nYou need the Obsidian REST API community plugin running: https://github.com/coddingtonbear/obsidian-local-rest-api\n\nInstall and enable it in the settings and copy the api key.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/mcp-obsidian\",\n        \"run\",\n        \"mcp-obsidian\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-obsidian\"\n      ],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\" : \"<YOUR_OBSIDIAN_API_KEY>\"\n      }\n    }\n  }\n}\n```\n</details>\n\n## Development\n\n### Building\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-obsidian run mcp-obsidian\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-obsidian.log\n```\n",
    "publisher": {
      "id": "MarkusPfundstein",
      "name": "MarkusPfundstein",
      "url": "https://github.com/MarkusPfundstein/mcp-obsidian"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/MarkusPfundstein/mcp-obsidian",
    "distribution": {
      "type": "pip",
      "package": "mcp-obsidian"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-obsidian"
      ],
      "env": {
        "OBSIDIAN_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "fa512a13-faeb-4b7a-8626-df06a9ea669f",
    "name": "PhialsBasement/CMD-MCP-Server",
    "description": "CMD MCP Server",
    "fullDescription": "# CMD MCP Server\n\nA Model Context Protocol (MCP) server implementation for executing CMD commands on both Windows and Linux, as well as allowing SSH connections. This server allows you to integrate command-line operations with MCP-compatible applications.\n\n## Features\n\n- Execute CMD commands through MCP\n- TypeScript implementation\n- Built on the official MCP SDK\n- Cross-platform compatibility\n\n## Installation\n\n### Installing via Smithery\n\nTo install CMD Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/server-cmd):\n\n```bash\nnpx -y @smithery/cli install server-cmd --client claude\n```\n\n### Manual Installation\n```bash\nnpm install server-cmd\n```\n\n## Prerequisites\n\n- Node.js (v16 or higher recommended)\n- npm or yarn package manager\n\n## Usage\n\n```typescript\nimport { MCPCmdServer } from 'server-cmd';\n\n// Initialize the server\nconst server = new MCPCmdServer();\n\n// Start the server\nserver.start();\n```\n\n## Configuration\n\nThe server can be configured through environment variables or a configuration object:\n\n```typescript\nconst config = {\n  // Add your configuration options here\n};\n\nconst server = new MCPCmdServer(config);\n```\n\n## Development\n\nTo set up the development environment:\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/PhialsBasement/CMD-MCP-Server.git\ncd CMD-MCP-Server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Scripts\n\n- `npm run build` - Compile TypeScript to JavaScript\n- `npm run prepare` - Prepare the package for publishing\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk`: ^1.0.1\n- `glob`: ^10.3.10\n- `zod-to-json-schema`: ^3.23.5\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Security\n\nPlease note that executing command-line operations can be potentially dangerous. Make sure to implement proper security measures and input validation when using this server in production environments.\n\n## Support\n\nFor issues and feature requests, please use the [GitHub issue tracker](https://github.com/PhialsBasement/CMD-MCP-Server/issues).\n",
    "publisher": {
      "id": "PhialsBasement",
      "name": "PhialsBasement",
      "url": "https://github.com/PhialsBasement/CMD-MCP-Server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/PhialsBasement/CMD-MCP-Server",
    "distribution": {
      "type": "npm",
      "package": "server-cmd"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "server-cmd"
      ],
      "env": {}
    }
  },
  {
    "id": "60e30f84-aca9-40ed-9fc3-9d1fa4652a08",
    "name": "BurtTheCoder/mcp-maigret",
    "description": "Maigret MCP Server",
    "fullDescription": "# Maigret MCP Server\n\nA Model Context Protocol (MCP) server for [maigret](https://github.com/soxoj/maigret), a powerful OSINT tool that collects user account information from various public sources. This server provides tools for searching usernames across social networks and analyzing URLs. It is designed to integrate seamlessly with MCP-compatible applications like [Claude Desktop](https://claude.ai).\n\n## ⚠️ Warning\n\nThis tool is designed for legitimate OSINT research purposes. Please:\n- Only search for information that is publicly available\n- Respect privacy and data protection laws\n- Follow the terms of service of the platforms being searched\n- Use responsibly and ethically\n- Be aware that some sites may rate-limit or block automated searches\n\n## Requirements\n\n- Node.js (v18 or later)\n- Docker\n- macOS, Linux, or Windows with Docker Desktop installed\n- Write access to the reports directory\n\n## Quick Start\n\n### Installing via Smithery\n\nTo install Maigret for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-maigret):\n\n```bash\nnpx -y @smithery/cli install mcp-maigret --client claude\n```\n\n### Installing Manually\n1. Install Docker:\n   - macOS: Install [Docker Desktop](https://www.docker.com/products/docker-desktop)\n   - Linux: Follow the [Docker Engine installation guide](https://docs.docker.com/engine/install/)\n\n2. Install the server globally via npm:\n```bash\nnpm install -g mcp-maigret\n```\n\n3. Create a reports directory:\n```bash\nmkdir -p /path/to/reports/directory\n```\n\n4. Add to your Claude Desktop configuration file:\n```json\n{\n  \"mcpServers\": {\n    \"maigret\": {\n      \"command\": \"mcp-maigret\",\n      \"env\": {\n        \"MAIGRET_REPORTS_DIR\": \"/path/to/reports/directory\"\n      }\n    }\n  }\n}\n```\n\nConfiguration file location:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n5. Restart Claude Desktop\n\n## Alternative Setup (From Source)\n\nIf you prefer to run from source or need to modify the code:\n\n1. Clone and build:\n```bash\ngit clone <repository_url>\ncd mcp-maigret\nnpm install\nnpm run build\n```\n\n2. Add to your Claude Desktop configuration:\n```json\n{\n  \"mcpServers\": {\n    \"maigret\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-maigret/build/index.js\"],\n      \"env\": {\n        \"MAIGRET_REPORTS_DIR\": \"/path/to/reports/directory\"\n      }\n    }\n  }\n}\n```\n\n## Features\n\n- **Username Search**: Search for a username across hundreds of social networks and websites\n- **URL Analysis**: Parse URLs to extract information and search for associated usernames\n- **Multiple Output Formats**: Support for txt, html, pdf, json, csv, and xmind formats\n- **Site Filtering**: Filter searches by site tags (e.g., photo, dating, us)\n- **Docker-based**: Reliable and consistent execution across environments\n\n## Tools\n\n### 1. Username Search Tool\n- Name: `search_username`\n- Description: Search for a username across social networks and sites\n- Parameters:\n  * `username` (required): Username to search for\n  * `format` (optional, default: \"pdf\"): Output format (txt, html, pdf, json, csv, xmind)\n  * `use_all_sites` (optional, default: false): Use all available sites instead of top 500\n  * `tags` (optional): Array of tags to filter sites (e.g., [\"photo\", \"dating\"])\n\nExample:\n```json\n{\n  \"username\": \"test_user123\",\n  \"format\": \"html\",\n  \"use_all_sites\": false,\n  \"tags\": [\"photo\"]\n}\n```\n\n### 2. URL Analysis Tool\n- Name: `parse_url`\n- Description: Parse a URL to extract information and search for associated usernames\n- Parameters:\n  * `url` (required): URL to analyze\n  * `format` (optional, default: \"pdf\"): Output format (txt, html, pdf, json, csv, xmind)\n\nExample:\n```json\n{\n  \"url\": \"https://example.com/profile\",\n  \"format\": \"txt\"\n}\n```\n\n## Troubleshooting\n\n### Docker Issues\n\n1. Verify Docker is installed and running:\n```bash\ndocker --version\ndocker ps\n```\n\n2. Check Docker permissions:\n   - Ensure your user has permissions to run Docker commands\n   - On Linux, add your user to the docker group: `sudo usermod -aG docker $USER`\n\n### Reports Directory Issues\n\n1. Verify the reports directory:\n   - The directory specified in MAIGRET_REPORTS_DIR must exist\n   - Your user must have write permissions to this directory\n   - Check permissions: `ls -la /path/to/reports/directory`\n\n2. Common configuration mistakes:\n   - Missing MAIGRET_REPORTS_DIR environment variable\n   - Directory doesn't exist\n   - Incorrect permissions\n   - Trailing slashes in the path\n\n3. After fixing any issues:\n   - Save the configuration file\n   - Restart Claude Desktop\n\n## Error Messages\n\n- \"Docker is not installed or not running\": Install Docker and start the Docker daemon\n- \"MAIGRET_REPORTS_DIR environment variable must be set\": Add the environment variable to your configuration\n- \"Error creating reports directory\": Check directory permissions and path\n- \"Error executing maigret\": Check Docker logs and ensure the container has proper permissions\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
    "publisher": {
      "id": "BurtTheCoder",
      "name": "BurtTheCoder",
      "url": "https://github.com/BurtTheCoder/mcp-maigret"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/BurtTheCoder/mcp-maigret",
    "distribution": {
      "type": "npm",
      "package": "mcp-maigret"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-maigret"
      ],
      "env": {
        "MAIGRET_REPORTS_DIR": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "de7e6af3-624a-495c-a906-ffebe60c0f13",
    "name": "aws-kb-retrieval",
    "description": "AWS Knowledge Base Retrieval MCP Server",
    "fullDescription": "# AWS Knowledge Base Retrieval MCP Server\n\nAn MCP server implementation for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.\n\n## Features\n\n- **RAG (Retrieval-Augmented Generation)**: Retrieve context from the AWS Knowledge Base based on a query and a Knowledge Base ID.\n- **Supports multiple results retrieval**: Option to retrieve a customizable number of results.\n\n## Tools\n\n- **retrieve_from_aws_kb**\n  - Perform retrieval operations using the AWS Knowledge Base.\n  - Inputs:\n    - `query` (string): The search query for retrieval.\n    - `knowledgeBaseId` (string): The ID of the AWS Knowledge Base.\n    - `n` (number, optional): Number of results to retrieve (default: 3).\n\n## Configuration\n\n### Setting up AWS Credentials\n\n1. Obtain AWS access key ID, secret access key, and region from the AWS Management Console.\n2. Ensure these credentials have appropriate permissions for Bedrock Agent Runtime operations.\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"docker\",\n      \"args\": [ \"run\", \"-i\", \"--rm\", \"-e\", \"AWS_ACCESS_KEY_ID\", \"-e\", \"AWS_SECRET_ACCESS_KEY\", \"-e\", \"AWS_REGION\", \"mcp/aws-kb-retrieval-server\" ],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"aws-kb-retrieval\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-aws-kb-retrieval\"\n      ],\n      \"env\": {\n        \"AWS_ACCESS_KEY_ID\": \"YOUR_ACCESS_KEY_HERE\",\n        \"AWS_SECRET_ACCESS_KEY\": \"YOUR_SECRET_ACCESS_KEY_HERE\",\n        \"AWS_REGION\": \"YOUR_AWS_REGION_HERE\"\n      }\n    }\n  }\n}\n```\n\n## Building\n\nDocker: \n\n```sh\ndocker build -t mcp/aws-kb-retrieval -f src/aws-kb-retrieval-server/Dockerfile . \n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\nThis README assumes that your server package is named `@modelcontextprotocol/server-aws-kb-retrieval`. Adjust the package name and installation details if they differ in your setup. Also, ensure that your server script is correctly built and that all dependencies are properly managed in your `package.json`.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-aws-kb-retrieval"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-aws-kb-retrieval"
      ],
      "env": {
        "AWS_ACCESS_KEY_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AWS_SECRET_ACCESS_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AWS_REGION": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "c8eef16b-87ed-43b0-80ea-f075ebbbef99",
    "name": "server-puppeteer",
    "description": "Puppeteer",
    "fullDescription": "# Puppeteer\n\nA Model Context Protocol server that provides browser automation capabilities using Puppeteer. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Components\n\n### Tools\n\n- **puppeteer_navigate**\n  - Navigate to any URL in the browser\n  - Input: `url` (string)\n\n- **puppeteer_screenshot**\n  - Capture screenshots of the entire page or specific elements\n  - Inputs:\n    - `name` (string, required): Name for the screenshot\n    - `selector` (string, optional): CSS selector for element to screenshot\n    - `width` (number, optional, default: 800): Screenshot width\n    - `height` (number, optional, default: 600): Screenshot height\n\n- **puppeteer_click**\n  - Click elements on the page\n  - Input: `selector` (string): CSS selector for element to click\n\n- **puppeteer_hover**\n  - Hover elements on the page\n  - Input: `selector` (string): CSS selector for element to hover\n\n- **puppeteer_fill**\n  - Fill out input fields\n  - Inputs:\n    - `selector` (string): CSS selector for input field\n    - `value` (string): Value to fill\n\n- **puppeteer_select**\n  - Select an element with SELECT tag\n  - Inputs:\n    - `selector` (string): CSS selector for element to select\n    - `value` (string): Value to select\n\n- **puppeteer_evaluate**\n  - Execute JavaScript in the browser console\n  - Input: `script` (string): JavaScript code to execute\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n   - Browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<name>`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Browser automation\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n\n## Configuration to use Puppeteer Server\nHere's the Claude Desktop configuration to use the Puppeter server:\n\n### Docker\n\n**NOTE** The docker implementation will use headless chromium, where as the NPX version will open a browser window.\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"-e\", \"DOCKER_CONTAINER=true\", \"mcp/puppeteer\"]\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/puppeteer -f src/puppeteer/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-puppeteer"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer"
      ],
      "env": {}
    }
  },
  {
    "id": "76a6432d-5705-4c77-96e6-aecdff5b88db",
    "name": "crazyrabbitLTC/mcp-morpho-server",
    "description": "Morpho API MCP Server",
    "fullDescription": "# Morpho API MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for querying the Morpho API. This server enables Claude to interact with Morpho's GraphQL API, providing access to market data, vaults, positions, and more.\n\n## Features\n\n* Query Morpho markets data through GraphQL\n* Full support for vaults, positions, and transactions\n* Historical APY data and oracle information\n* Comprehensive pagination, ordering, and filtering options\n* Data validation using Zod schemas\n* Error handling and type safety\n* MCP-compliant server implementation\n\n## Installation\n\n1. Install the package:\n```bash\nnpm install mcp-morpho-server\n```\n\n2. Add to your Claude Desktop configuration:\n```json\n{\n  \"tools\": {\n    \"morpho\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/node_modules/mcp-morpho-server/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### Markets\n- `get_markets`: Retrieve all markets with pagination and filtering\n- `get_whitelisted_markets`: Get only whitelisted markets\n- `get_market_positions`: Get positions for specific markets\n- `get_historical_apy`: Get historical APY data\n- `get_oracle_details`: Get oracle information\n\n### Vaults\n- `get_vaults`: Get all vaults with their current states\n- `get_vault_positions`: Get positions for specific vaults\n- `get_vault_transactions`: Get vault transaction history\n- `get_vault_allocation`: Get vault market allocations\n- `get_vault_reallocates`: Get vault reallocation history\n- `get_vault_apy_history`: Get historical APY data for vaults\n\n### Assets and Accounts\n- `get_asset_price`: Get current price and yield information\n- `get_account_overview`: Get account positions and transactions\n- `get_liquidations`: Get liquidation events\n\n## Development\n\nThe project is written in TypeScript and uses:\n* @modelcontextprotocol/sdk for MCP server implementation\n* axios for API requests\n* zod for schema validation\n\nTo build from source:\n\n1. Clone the repository\n```bash\ngit clone https://github.com/crazyrabbitLTC/mcp-morpho-server.git\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nISC\n\n## Author\n\nCreated by [Your Name] (<your@email>) ",
    "publisher": {
      "id": "crazyrabbitLTC",
      "name": "crazyrabbitLTC",
      "url": "https://github.com/crazyrabbitLTC/mcp-morpho-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/crazyrabbitLTC/mcp-morpho-server",
    "distribution": {
      "type": "npm",
      "package": "mcp-morpho-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-morpho-server"
      ],
      "env": {}
    }
  },
  {
    "id": "efaad018-8e6f-43dc-9635-df4beaff79f8",
    "name": "Rickyyy1116/mcp-youtube-sheets",
    "description": "YouTube to Google Sheets MCP Server",
    "fullDescription": "# YouTube to Google Sheets MCP Server\n\nThis MCP server provides functionality to search YouTube videos and automatically save the results to Google Sheets. It's designed to work with Claude and other AI assistants that support the Model Context Protocol.\n\n[English](README.md) | [日本語](README.ja.md)\n\n## Features\n\n- Search YouTube videos using the YouTube Data API v3\n- Save search results to Google Sheets automatically\n- Configurable search parameters (query, max results)\n- Results include video title, URL, channel name, and publish date\n\n## Installation\n\n```bash\nnpm install @rikukawa/youtube-sheets-server\n```\n\n## Prerequisites\n\n1. YouTube Data API v3 Setup:\n   - Go to [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project\n   - Enable YouTube Data API v3\n   - Create an API key\n\n2. Google Sheets API Setup:\n   - In the same project, enable Google Sheets API\n   - Create a service account\n   - Download the service account key (JSON format)\n   - Share your target Google Sheet with the service account email\n\n## Configuration\n\nAdd the server to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube-sheets\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/youtube-sheets-server/build/index.js\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"your-youtube-api-key\",\n        \"SPREADSHEET_ID\": \"your-spreadsheet-id\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## Usage\n\n“Ask the AI assistant to ‘search for YouTube videos with “ChatGPT usage” and retrieve 10 videos’ and try using it in that way.”\n\n## Output Format\n\nThe tool will save the following information to your Google Sheet:\n- Video Title\n- Video URL\n- Channel Name\n- Publish Date\n\n## License\n\nMIT\n\n## Author\n\nRiku Kawashima\n\n## Repository\n\n[GitHub Repository](https://github.com/Rickyyy1116/mcp-youtube-sheets)\n\n## NPM Package\n\n[@rikukawa/youtube-sheets-server](https://www.npmjs.com/package/@rikukawa/youtube-sheets-server)\n",
    "publisher": {
      "id": "rikukawa",
      "name": "rikukawa",
      "url": "https://github.com/Rickyyy1116/mcp-youtube-sheets"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/Rickyyy1116/mcp-youtube-sheets",
    "distribution": {
      "type": "npm",
      "package": "@rikukawa/youtube-sheets-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@rikukawa/youtube-sheets-server"
      ],
      "env": {
        "YOUTUBE_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SPREADSHEET_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "da11d792-8819-454e-b84b-48dd67ecbcb0",
    "name": "btwiuse/npm-search-mcp-server",
    "description": "npm-search MCP Server",
    "fullDescription": "# npm-search MCP Server\n\nA Model Context Protocol server that allows you to search for npm packages by calling the `npm search` command.\n\n### Available Tools\n\n- `search_npm_packages` - Search for npm packages.\n  - Required arguments:\n    - `query` (string): The search query.\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install npm-search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/npm-search-mcp-server):\n\n```bash\nnpx -y @smithery/cli install npm-search-mcp-server --client claude\n```\n\n### Using NPM (recommended)\n\nAlternatively you can install `npm-search-mcp-server` via npm:\n\n```bash\nnpm install -g npm-search-mcp-server\n```\n\nAfter installation, you can run it as a command using:\n\n```bash\nnpm-search-mcp-server\n```\n\n### Using uv\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *npm-search-mcp-server*.\n\n## Configuration\n\n### Configure for Claude.app\n\nAdd to your Claude settings:\n\n<details>\n<summary>Using npm installation</summary>\n\n```json\n\"mcpServers\": {\n  \"npm-search\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"npm-search-mcp-server\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"npm-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"npm-search-mcp-server\"]\n  }\n}\n```\n</details>\n\n### Configure for Zed\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using npm installation</summary>\n\n```json\n\"context_servers\": {\n  \"npm-search-mcp-server\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"npm-search-mcp-server\"]\n  }\n},\n```\n</details>\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"npm-search-mcp-server\": {\n    \"command\": \"uvx\",\n    \"args\": [\"npm-search-mcp-server\"]\n  }\n],\n```\n</details>\n\n## Example Interactions\n\n1. Search for npm packages:\n```json\n{\n  \"name\": \"search_npm_packages\",\n  \"arguments\": {\n    \"query\": \"express\"\n  }\n}\n```\nResponse:\n```json\n{\n  \"results\": [\n    {\n      \"name\": \"express\",\n      \"description\": \"Fast, unopinionated, minimalist web framework\",\n      \"version\": \"4.17.1\",\n      \"author\": \"TJ Holowaychuk\",\n      \"license\": \"MIT\"\n    },\n    ...\n  ]\n}\n```\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector npx -y npm-search-mcp-server\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/servers/src/npm-search\nnpx @modelcontextprotocol/inspector uv run npm-search-mcp-server\n```\n\n## Examples of Questions for Claude\n\n1. \"Search for express package on npm\"\n2. \"Find packages related to react\"\n3. \"Show me npm packages for web development\"\n\n## Build\n\nDocker build:\n\n```bash\ncd src/npm-search\ndocker build -t mcp/npm-search .\n```\n\n## Contributing\n\nWe encourage contributions to help expand and improve npm-search-mcp-server. Whether you want to add new npm-related tools, enhance existing functionality, or improve documentation, your input is valuable.\n\nFor examples of other MCP servers and implementation patterns, see:\nhttps://github.com/modelcontextprotocol/servers\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements to make npm-search-mcp-server even more powerful and useful.\n\n## License\n\nnpm-search-mcp-server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
    "publisher": {
      "id": "btwiuse",
      "name": "btwiuse",
      "url": "https://github.com/btwiuse/npm-search-mcp-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/btwiuse/npm-search-mcp-server",
    "distribution": {
      "type": "npm",
      "package": "npm-search-mcp-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "npm-search-mcp-server"
      ],
      "env": {}
    }
  },
  {
    "id": "4f2685a0-5eb5-4248-bddb-d1705863f280",
    "name": "sooperset/mcp-atlassian",
    "description": "MCP Atlassian",
    "fullDescription": "# MCP Atlassian\n\nModel Context Protocol (MCP) server for Atlassian Cloud products (Confluence and Jira). This integration is designed specifically for Atlassian Cloud instances and does not support Atlassian Server or Data Center deployments.\n\n## Feature Demo\n![Demo](https://github.com/user-attachments/assets/995d96a8-4cf3-4a03-abe1-a9f6aea27ac0)\n\n## Features\n\n- Search and read Confluence spaces/pages\n- Get Confluence page comments\n- Search and read Jira issues\n- Get project issues and metadata\n\n## API\n\n### Resources\n\n- `confluence://{space_key}`: Access Confluence spaces and pages\n- `confluence://{space_key}/pages/{title}`: Access specific Confluence pages\n- `jira://{project_key}`: Access Jira project and its issues\n- `jira://{project_key}/issues/{issue_key}`: Access specific Jira issues\n\n### Tools\n\n#### Confluence Tools\n\n- **confluence_search**\n  - Search Confluence content using CQL\n  - Inputs:\n    - `query` (string): CQL query string\n    - `limit` (number, optional): Results limit (1-50, default: 10)\n  - Returns:\n    - Array of search results with page_id, title, space, url, last_modified, type, and excerpt\n\n- **confluence_get_page**\n  - Get content of a specific Confluence page\n  - Inputs:\n    - `page_id` (string): Confluence page ID\n    - `include_metadata` (boolean, optional): Include page metadata (default: true)\n\n- **confluence_get_comments**\n  - Get comments for a specific Confluence page\n  - Input: `page_id` (string)\n\n#### Jira Tools\n\n- **jira_get_issue**\n  - Get details of a specific Jira issue\n  - Inputs:\n    - `issue_key` (string): Jira issue key (e.g., 'PROJ-123')\n    - `expand` (string, optional): Fields to expand\n\n- **jira_search**\n  - Search Jira issues using JQL\n  - Inputs:\n    - `jql` (string): JQL query string\n    - `fields` (string, optional): Comma-separated fields (default: \"*all\")\n    - `limit` (number, optional): Results limit (1-50, default: 10)\n\n- **jira_get_project_issues**\n  - Get all issues for a specific Jira project\n  - Inputs:\n    - `project_key` (string): Project key\n    - `limit` (number, optional): Results limit (1-50, default: 10)\n\n## Usage with Claude Desktop\n\n1. Get API tokens from: https://id.atlassian.com/manage-profile/security/api-tokens\n\n2. Add to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-atlassian\"],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-domain.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@domain.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_api_token\",\n        \"JIRA_URL\": \"https://your-domain.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@domain.com\",\n        \"JIRA_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\n<details>\n<summary>Alternative configuration using <code>uv</code></summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-atlassian\",\n        \"run\",\n        \"mcp-atlassian\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-domain.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@domain.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_api_token\",\n        \"JIRA_URL\": \"https://your-domain.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@domain.com\",\n        \"JIRA_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\nReplace `/path/to/mcp-atlassian` with the actual path where you've cloned the repository.\n</details>\n\n\n## Security\n\n- Never share API tokens\n- Keep .env files secure and private\n- See [SECURITY.md](SECURITY.md) for best practices\n\n## License\n\nLicensed under MIT - see [LICENSE](LICENSE) file. This is not an official Atlassian product.\n",
    "publisher": {
      "id": "sooperset",
      "name": "sooperset",
      "url": "https://github.com/sooperset/mcp-atlassian"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sooperset/mcp-atlassian",
    "distribution": {
      "type": "pip",
      "package": "mcp-atlassian"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-atlassian"
      ],
      "env": {
        "CONFLUENCE_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CONFLUENCE_USERNAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "CONFLUENCE_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_URL": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_USERNAME": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "JIRA_API_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "8d869143-9564-42b9-943c-2e8764f8e892",
    "name": "sammcj/mcp-package-version",
    "description": "Package Version MCP Server",
    "fullDescription": "# Package Version MCP Server\n\nAn MCP server that provides tools for checking latest stable package versions from multiple package registries:\n\n- npm (Node.js/JavaScript)\n- PyPI (Python)\n- Maven Central (Java)\n- Go Proxy (Go)\n\nThis server helps LLMs ensure they're recommending up-to-date package versions when writing code.\n\n## Running\n\n### Installing via Smithery\n\nTo install Package Version for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-package-version):\n\n```bash\nnpx -y @smithery/cli install mcp-package-version --client claude\n```\n\n**Configure MCP Settings**\n\nAdd the following to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"package-version\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-package-version\"]\n    }\n  }\n}\n```\n\nIf you are behind a corporate proxy which MITMs your traffic, you may need to additionally specify the proxy CA cert bundle:\n```json\n{\n  \"mcpServers\": {\n    \"package-version\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-package-version\"],\n      \"env\": {\n        \"NODE_EXTRA_CA_CERTS\": \"/path/to/mitm/cert.pem\"\n      }\n    }\n  }\n}\n```\n\n- For the Cline VSCode Extension this will be `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n- For Claude Desktop `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- For GoMCP `~/.config/gomcp/config.yaml`\n\n\n## Tools\n\n### 1. JavaScript/Node.js\n\n#### check_npm_versions\n\nCheck latest stable versions for npm packages from a package.json dependencies object.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_npm_versions\",\n  arguments: {\n    dependencies: {\n      \"express\": \"^4.17.1\",\n      \"react\": \"^17.0.2\"\n    }\n  }\n});\n```\n\n### 2. Python\n\n#### check_python_versions\n\nCheck latest stable versions for Python packages from requirements.txt entries.\n\n#### check_pyproject_versions\n\nCheck latest stable versions for Python packages from pyproject.toml.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_pyproject_versions\",\n  arguments: {\n    dependencies: {\n      dependencies: {\n        \"requests\": \"^2.28.0\",\n        \"pandas\": \">=1.5.0\"\n      },\n      \"optional-dependencies\": {\n        \"test\": {\n          \"pytest\": \">=7.0.0\"\n        }\n      },\n      \"dev-dependencies\": {\n        \"black\": \"^22.0.0\"\n      }\n    }\n  }\n});\n```\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_python_versions\",\n  arguments: {\n    requirements: [\n      \"requests==2.26.0\",\n      \"pandas>=1.3.0\"\n    ]\n  }\n});\n```\n\n### 3. Go\n\n#### check_go_versions\n\nCheck latest stable versions for Go packages from go.mod.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_go_versions\",\n  arguments: {\n    dependencies: {\n      module: \"example.com/mymodule\",\n      require: [\n        {\n          path: \"github.com/gin-gonic/gin\",\n          version: \"v1.7.0\"\n        }\n      ],\n      replace: [\n        {\n          old: \"github.com/old/pkg\",\n          new: \"github.com/new/pkg\",\n          version: \"v2.0.0\"\n        }\n      ]\n    }\n  }\n});\n```\n\n### 4. Java\n\nBut seriously, don't write Java in 2025.\n\n#### check_maven_versions\n\nCheck latest stable versions for Java packages from pom.xml.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_maven_versions\",\n  arguments: {\n    dependencies: [\n      {\n        groupId: \"org.springframework.boot\",\n        artifactId: \"spring-boot-starter-web\",\n        version: \"2.7.0\",\n        scope: \"compile\"\n      }\n    ]\n  }\n});\n```\n\n#### check_gradle_versions\n\nCheck latest stable versions for Java packages from build.gradle.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_gradle_versions\",\n  arguments: {\n    dependencies: [\n      {\n        configuration: \"implementation\",\n        group: \"com.google.guava\",\n        name: \"guava\",\n        version: \"31.0-jre\"\n      }\n    ]\n  }\n});\n```\n\n### 5. check_package_versions\n\nBulk check latest stable versions for multiple packages from npm and PyPI.\n\n```typescript\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_package_versions\",\n  arguments: {\n    packages: [\n      { name: \"react\", registry: \"npm\" },\n      { name: \"requests\", registry: \"pypi\" },\n      { name: \"typescript\", registry: \"npm\", currentVersion: \"5.0.0\" }\n    ]\n  }\n});\n```\n\n## Guidelines for LLMs\n\nWhen writing code that includes package dependencies, LLMs should:\n\n0. **Choose the Right Tool for the Job**\n   - Use language-specific tools for detailed dependency management:\n     - `check_npm_versions` for package.json\n     - `check_python_versions` for requirements.txt\n     - `check_pyproject_versions` for pyproject.toml\n     - `check_maven_versions` for pom.xml\n     - `check_gradle_versions` for build.gradle\n     - `check_go_versions` for go.mod\n   - Use `check_package_versions` for quick bulk checks across npm and PyPI\n\n1. **Always Check Versions Before Writing**\n   - Before writing a package.json or requirements.txt file, use the appropriate tool to check latest versions\n   - Use the bulk check tool when dealing with multiple packages\n   - Consider the project's needs when deciding whether to use exact versions or version ranges\n\n2. **Package.json Best Practices**\n   ```typescript\n   // Before writing package.json, check versions\n   const versions = await use_mcp_tool({\n     server_name: \"package-version\",\n     tool_name: \"check_package_versions\",\n     arguments: {\n       packages: [\n         { name: \"express\", registry: \"npm\" },\n         { name: \"react\", registry: \"npm\" }\n       ]\n     }\n   });\n\n   // Use the returned versions in package.json\n   {\n     \"dependencies\": {\n       \"express\": \"^{express.latestVersion}\",\n       \"react\": \"^{react.latestVersion}\"\n     }\n   }\n   ```\n\n3. **Requirements.txt Best Practices**\n   ```typescript\n   // Before writing requirements.txt, check versions\n   const versions = await use_mcp_tool({\n     server_name: \"package-version\",\n     tool_name: \"check_package_versions\",\n     arguments: {\n       packages: [\n         { name: \"requests\", registry: \"pypi\" },\n         { name: \"pandas\", registry: \"pypi\" }\n       ]\n     }\n   });\n\n   // Use the returned versions in requirements.txt\n   requests=={requests.latestVersion}\n   pandas=={pandas.latestVersion}\n   ```\n\n4. **Version Range Considerations**\n   - For applications: Consider using exact versions (= for Python, no prefix for npm)\n   - For libraries: Consider using compatible ranges (>= for Python, ^ for npm)\n   - Always document version choices in comments\n\n5. **Error Handling**\n   - If version check fails for a package, document it in comments\n   - Consider falling back to known stable versions if checks fail\n   - Warn users about any packages that couldn't be verified\n\n## Example Integrations\n\nHere's how an LLM should approach creating new projects with different package managers:\n\n### Node.js Project\n\n```typescript\n// 1. Check npm package versions\nconst versions = await use_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_npm_versions\",\n  arguments: {\n    dependencies: {\n      \"express\": \"^4.17.1\",\n      \"typescript\": \"~4.5.0\"\n    }\n  }\n});\n\n// 2. Use the versions in package.json\nwrite_to_file({\n\n  path: \"package.json\",\n  content: {\n    \"name\": \"my-project\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": {\n      \"express\": `^${versions.find(p => p.name === 'express').latestVersion}`,\n      \"typescript\": `^${versions.find(p => p.name === 'typescript').latestVersion}`\n    }\n  }\n});\n```\n\n### Python Project with pyproject.toml\n\n```typescript\n// 1. Check Python package versions\nconst versions = await use_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_pyproject_versions\",\n  arguments: {\n    dependencies: {\n      dependencies: {\n        \"requests\": \"^2.28.0\",\n        \"pandas\": \">=1.5.0\"\n      },\n      \"dev-dependencies\": {\n        \"pytest\": \">=7.0.0\"\n      }\n    }\n  }\n});\n\n// 2. Use the versions in pyproject.toml\nwrite_to_file({\n  path: \"pyproject.toml\",\n  content: `\n[project]\nname = \"my-project\"\nversion = \"1.0.0\"\ndependencies = [\n    \"requests>=${versions.find(p => p.name === 'requests').latestVersion}\",\n    \"pandas>=${versions.find(p => p.name === 'pandas').latestVersion}\"\n]\n\n[project.optional-dependencies]\ntest = [\n    \"pytest>=${versions.find(p => p.name === 'pytest (dev)').latestVersion}\"\n]\n`\n});\n```\n\n### Go Project\n\n```typescript\n// 1. Check Go package versions\nconst versions = await use_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_go_versions\",\n  arguments: {\n    dependencies: {\n      module: \"example.com/mymodule\",\n      require: [\n        {\n          path: \"github.com/gin-gonic/gin\",\n          version: \"v1.7.0\"\n        }\n      ]\n    }\n  }\n});\n\n// 2. Use the versions in go.mod\nwrite_to_file({\n  path: \"go.mod\",\n  content: `\nmodule example.com/mymodule\n\ngo 1.21\n\nrequire (\n    github.com/gin-gonic/gin ${versions.find(p => p.name === 'github.com/gin-gonic/gin').latestVersion}\n)\n`\n});\n```\n\n### Java Project with Maven\n\n```typescript\n// 1. Check Maven package versions\nconst versions = await use_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_maven_versions\",\n  arguments: {\n    dependencies: [\n      {\n        groupId: \"org.springframework.boot\",\n        artifactId: \"spring-boot-starter-web\",\n        version: \"2.7.0\"\n      }\n    ]\n  }\n});\n\n// 2. Use the versions in pom.xml\nwrite_to_file({\n  path: \"pom.xml\",\n  content: `\n<project>\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>my-project</artifactId>\n    <version>1.0.0</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>${versions.find(p => p.name === 'org.springframework.boot:spring-boot-starter-web').latestVersion}</version>\n        </dependency>\n    </dependencies>\n</project>\n`\n});\n```\n\nThis ensures that new projects always start with the latest stable versions of packages.\n\n---\n\n## Example System Prompt\n\n```plaintext\nWhen writing code that includes package dependencies, you must:\n\n1. Before writing any dependency files, check latest stable versions using the package-version MCP server:\n\n// For Node.js (package.json):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_npm_versions\",\n  arguments: {\n    dependencies: {\n      \"package-name\": \"version\"\n    }\n  }\n});\n\n// For Python (requirements.txt):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_python_versions\",\n  arguments: {\n    requirements: [\n      \"package-name==version\"\n    }\n  }\n});\n\n// For Python (pyproject.toml):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_pyproject_versions\",\n  arguments: {\n    dependencies: {\n      dependencies: {\n        \"package-name\": \"version\"\n      }\n    }\n  }\n});\n\n// For Java Maven (pom.xml):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_maven_versions\",\n  arguments: {\n    dependencies: [\n      {\n        groupId: \"group\",\n        artifactId: \"artifact\",\n        version: \"version\"\n      }\n    ]\n  }\n});\n\n// For Java Gradle (build.gradle):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_gradle_versions\",\n  arguments: {\n    dependencies: [\n      {\n        configuration: \"implementation\",\n        group: \"group\",\n        name: \"name\",\n        version: \"version\"\n      }\n    ]\n  }\n});\n\n// For Go (go.mod):\nuse_mcp_tool({\n  server_name: \"package-version\",\n  tool_name: \"check_go_versions\",\n  arguments: {\n    dependencies: {\n      module: \"module-name\",\n      require: [\n        {\n          path: \"package-path\",\n          version: \"version\"\n        }\n      ]\n    }\n  }\n});\n\n2. Use the returned latest versions in your dependency files:\n   - For applications: Use exact versions\n   - For libraries: Use compatible ranges\n     - npm: ^ for minor updates, ~ for patch updates\n     - Python: >= for compatible versions, == for exact versions\n     - Java: Use the version directly (Maven/Gradle handle ranges differently)\n     - Go: Use semantic version prefixes (e.g., v1.2.3)\n   - Document any version-specific requirements in comments\n\n3. If version checks fail:\n   - Document it in comments\n   - Use known stable versions as fallback\n   - Consider project requirements and compatibility\n```\n\nExample system prompt for users:\n\n```plaintext\nWhen writing code that includes dependencies, you must check latest stable versions using the package-version MCP server before writing any dependency files (package.json, requirements.txt, pyproject.toml, pom.xml, build.gradle, go.mod). Use exact versions for applications and appropriate version ranges for libraries based on the package manager's conventions. Document any version-specific requirements or failed checks in comments.\n```\n\n## Development\n\n1. **Clone and Install Dependencies**\n   ```bash\n   git clone https://github.com/sammcj/mcp-package-version.git\n   cd mcp-package-version\n   npm i\n   ```\n\n2. **Build the Server**\n   ```bash\n   npm run build\n   ```\n\n3. **Development Workflow**\n   - Use `npm run watch` for development to automatically rebuild on changes\n   - Use `npm run build` for production builds\n\n4. **Release Process**\n   ```bash\n   # 1. Make your changes\n   vim src/your-file.ts\n\n   # 2. Commit your changes\n   git add .\n   git commit -m \"feat: your new feature\"\n\n   # 3. Run bump command (this will):\n   # - Update version in package.json\n   # - Update CHANGELOG.md\n   # - Commit changes\n   # - Push to GitHub\n   npm run bump\n\n   # GitHub Actions will then:\n   # - Create a git tag\n   # - Create a GitHub release\n   # - Publish to npm (when triggered manually)\n   ```\n\n5. **Manual npm Publishing**\n   ```bash\n   # To trigger a manual npm publish\n   gh workflow run publish.yml\n   ```\n\nNo environment variables are required as this server uses public registries:\n\n- npm registry (registry.npmjs.org)\n- PyPI (pypi.org)\n- Go Proxy (proxy.golang.org)\n- Maven Central (search.maven.org)\n\n## License\n\n[MIT](LICENSE)\n",
    "publisher": {
      "id": "sammcj",
      "name": "sammcj",
      "url": "https://github.com/sammcj/mcp-package-version"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/sammcj/mcp-package-version",
    "distribution": {
      "type": "npm",
      "package": "mcp-package-version"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-package-version"
      ],
      "env": {
        "NODE_EXTRA_CA_CERTS": {
          "description": "Optional environment variable",
          "type": "string"
        }
      }
    }
  },
  {
    "id": "2465c47f-ef54-4e0e-a5e1-b1aeb7f99729",
    "name": "SeanMcLoughlin/mcp-vcd",
    "description": "mcp-vcd",
    "fullDescription": "# mcp-vcd\n\nA model context protocol (MCP) server for value change dump (VCD) waveforms.\n\nhttps://github.com/user-attachments/assets/9d1a6a64-de22-4b5a-a597-685c663c9c79\n\n\n# Tools\n\n- `get-signal`: Provide all changes of the specified signal name to the model's context. This is useful for large waveform files with many signals where you cannot fit the entire VCD file into the model's context window.\n  - Can optionally specify a start and end timestamp range for the model to look at.\n\n# Installation\n\n`uv pip install --system mcp-vcd`\n\nAnd add the following to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"mcp-vcd\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"run\",\n      \"mcp-vcd\"\n    ]\n  }\n}\n```\nSee [Anthropic's MCP documentation](https://modelcontextprotocol.io/quickstart/user) for more info.\n",
    "publisher": {
      "id": "SeanMcLoughlin",
      "name": "SeanMcLoughlin",
      "url": "https://github.com/SeanMcLoughlin/mcp-vcd"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/SeanMcLoughlin/mcp-vcd",
    "distribution": {
      "type": "pip",
      "package": "mcp-vcd"
    },
    "license": "MIT",
    "runtime": "python",
    "config": {
      "command": "uvx",
      "args": [
        "mcp-vcd"
      ],
      "env": {}
    }
  },
  {
    "id": "b1adf75b-a7e9-417e-a5e5-ea3401e58430",
    "name": "baranwang/mcp-tung-shing",
    "description": "Tung Shing MCP Server",
    "fullDescription": "# Tung Shing MCP Server\n\n中国传统黄历 MCP 服务 | Chinese Traditional Almanac MCP Service\n\n## 简介 | Introduction\n\n这是一个基于 Model Context Protocol (MCP) 的中国传统黄历（通胜）计算服务。它能够提供日期、时辰的吉凶、宜忌等传统历法信息。\n\nThis is a Chinese Traditional Almanac (Tung Shing) calculation service based on Model Context Protocol (MCP). It provides traditional calendar information such as auspicious/inauspicious times, suitable/unsuitable activities for specific dates and hours.\n\n## 功能特点 | Features\n\n- 支持公历转农历日期 | Support conversion between Gregorian and Lunar calendar\n- 提供每日吉凶宜忌 | Daily auspicious/inauspicious activities\n- 十二时辰信息 | Twelve double-hour periods information\n- 五行、神煞、星宿等详细信息 | Detailed information about Five Elements, Gods, Stars, etc.\n\n## 使用方法 | Usage\n\n### NPX 方式 | Using NPX\n\n在你的 MCP 配置中添加以下内容：\nAdd the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"tung-shing\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-tung-shing\"\n      ]\n    }\n  }\n}\n```\n\n### CLI 方式 | Using CLI\n\n全局安装包：\nInstall the package globally:\n\n```bash\nnpm install -g mcp-tung-shing\n```\n\n然后在 MCP 配置中添加：\nThen add to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"tung-shing\": {\n      \"command\": \"mcp-tung-shing\"\n    }\n  }\n}\n```\n\n## API 参数 | API Parameters\n\n### get-tung-shing\n\n获取指定日期的黄历信息 | Get almanac information for specified dates\n\n- `startDate`: 开始日期，格式为 \"YYYY-MM-DD\" | Start date in \"YYYY-MM-DD\" format\n- `days`: 获取天数，默认为 1 | Number of days to retrieve, defaults to 1\n",
    "publisher": {
      "id": "baranwang",
      "name": "baranwang",
      "url": "https://github.com/baranwang/mcp-tung-shing"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/baranwang/mcp-tung-shing",
    "distribution": {
      "type": "npm",
      "package": "mcp-tung-shing"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-tung-shing"
      ],
      "env": {}
    }
  },
  {
    "id": "94d322b6-9bd6-4c52-9e1c-c3b735fc769e",
    "name": "server-slack",
    "description": "Slack MCP Server",
    "fullDescription": "# Slack MCP Server\n\nMCP Server for the Slack API, enabling Claude to interact with Slack workspaces.\n\n## Tools\n\n1. `slack_list_channels`\n   - List public channels in the workspace\n   - Optional inputs:\n     - `limit` (number, default: 100, max: 200): Maximum number of channels to return\n     - `cursor` (string): Pagination cursor for next page\n   - Returns: List of channels with their IDs and information\n\n2. `slack_post_message`\n   - Post a new message to a Slack channel\n   - Required inputs:\n     - `channel_id` (string): The ID of the channel to post to\n     - `text` (string): The message text to post\n   - Returns: Message posting confirmation and timestamp\n\n3. `slack_reply_to_thread`\n   - Reply to a specific message thread\n   - Required inputs:\n     - `channel_id` (string): The channel containing the thread\n     - `thread_ts` (string): Timestamp of the parent message\n     - `text` (string): The reply text\n   - Returns: Reply confirmation and timestamp\n\n4. `slack_add_reaction`\n   - Add an emoji reaction to a message\n   - Required inputs:\n     - `channel_id` (string): The channel containing the message\n     - `timestamp` (string): Message timestamp to react to\n     - `reaction` (string): Emoji name without colons\n   - Returns: Reaction confirmation\n\n5. `slack_get_channel_history`\n   - Get recent messages from a channel\n   - Required inputs:\n     - `channel_id` (string): The channel ID\n   - Optional inputs:\n     - `limit` (number, default: 10): Number of messages to retrieve\n   - Returns: List of messages with their content and metadata\n\n6. `slack_get_thread_replies`\n   - Get all replies in a message thread\n   - Required inputs:\n     - `channel_id` (string): The channel containing the thread\n     - `thread_ts` (string): Timestamp of the parent message\n   - Returns: List of replies with their content and metadata\n\n\n7. `slack_get_users`\n   - Get list of workspace users with basic profile information\n   - Optional inputs:\n     - `cursor` (string): Pagination cursor for next page\n     - `limit` (number, default: 100, max: 200): Maximum users to return\n   - Returns: List of users with their basic profiles\n\n8. `slack_get_user_profile`\n   - Get detailed profile information for a specific user\n   - Required inputs:\n     - `user_id` (string): The user's ID\n   - Returns: Detailed user profile information\n\n## Setup\n\n1. Create a Slack App:\n   - Visit the [Slack Apps page](https://api.slack.com/apps)\n   - Click \"Create New App\"\n   - Choose \"From scratch\"\n   - Name your app and select your workspace\n\n2. Configure Bot Token Scopes:\n   Navigate to \"OAuth & Permissions\" and add these scopes:\n   - `channels:history` - View messages and other content in public channels\n   - `channels:read` - View basic channel information\n   - `chat:write` - Send messages as the app\n   - `reactions:write` - Add emoji reactions to messages\n   - `users:read` - View users and their basic information\n\n4. Install App to Workspace:\n   - Click \"Install to Workspace\" and authorize the app\n   - Save the \"Bot User OAuth Token\" that starts with `xoxb-`\n\n5. Get your Team ID (starts with a `T`) by following [this guidance](https://slack.com/help/articles/221769328-Locate-your-Slack-URL-or-ID#find-your-workspace-or-org-id)\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\"\n      }\n    }\n  }\n}\n```\n\n#### docker\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SLACK_BOT_TOKEN\",\n        \"-e\",\n        \"SLACK_TEAM_ID\",\n        \"mcp/slack\"\n      ],\n      \"env\": {\n        \"SLACK_BOT_TOKEN\": \"xoxb-your-bot-token\",\n        \"SLACK_TEAM_ID\": \"T01234567\"\n      }\n    }\n  }\n}\n```\n\n### Troubleshooting\n\nIf you encounter permission errors, verify that:\n1. All required scopes are added to your Slack app\n2. The app is properly installed to your workspace\n3. The tokens and workspace ID are correctly copied to your configuration\n4. The app has been added to the channels it needs to access\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/slack -f src/slack/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
    "publisher": {
      "id": "modelcontextprotocol",
      "name": "modelcontextprotocol",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
    "distribution": {
      "type": "npm",
      "package": "@modelcontextprotocol/server-slack"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-slack"
      ],
      "env": {
        "SLACK_BOT_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "SLACK_TEAM_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "60501c35-bbcd-4742-a5f4-beb83b3cf268",
    "name": "ThetaBird/mcp-server-axiom-js",
    "description": "MCP Server for Axiom",
    "fullDescription": "# MCP Server for Axiom\n\nA JavaScript port of the [official Axiom MCP server](https://github.com/axiomhq/mcp-server-axiom) that enables AI agents to query data using Axiom Processing Language (APL).\n\n<a href=\"https://glama.ai/mcp/servers/8hxxw8uenu\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/8hxxw8uenu/badge\" />\n</a>\n\nThis implementation provides the same functionality as the original Go version but packaged as an npm module for easier integration with Node.js environments.\n\n## Installation & Usage\n\n### MCP Configuration\n\nYou can run this MCP server directly using npx. Add the following configuration to your MCP configuration file:\n\n```json\n{\n  \"axiom\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"mcp-server-axiom\"],\n    \"env\": {\n      \"AXIOM_TOKEN\": \"<AXIOM_TOKEN_HERE>\",\n      \"AXIOM_URL\": \"https://api.axiom.co\",\n      \"AXIOM_ORG_ID\": \"<AXIOM_ORG_ID_HERE>\"\n    }\n  }\n}\n```\n\n### Local Development & Testing\n\n#### Installation\n\n```bash\nnpm install -g mcp-server-axiom\n```\n\n#### Environment Variables\n\nThe server can be configured using environment variables:\n\n- `AXIOM_TOKEN` (required): Your Axiom API token\n- `AXIOM_ORG_ID` (required): Your Axiom organization ID\n- `AXIOM_URL` (optional): Custom Axiom API URL (defaults to https://api.axiom.co)\n- `AXIOM_QUERY_RATE` (optional): Queries per second limit (default: 1)\n- `AXIOM_QUERY_BURST` (optional): Query burst capacity (default: 1)\n- `AXIOM_DATASETS_RATE` (optional): Dataset list operations per second (default: 1)\n- `AXIOM_DATASETS_BURST` (optional): Dataset list burst capacity (default: 1)\n- `PORT` (optional): Server port (default: 3000)\n\n#### Running the Server Locally\n\n1. Using environment variables:\n\n```bash\nexport AXIOM_TOKEN=your_token\nmcp-server-axiom\n```\n\n2. Using a config file:\n\n```bash\nmcp-server-axiom config.json\n```\n\nExample config.json:\n\n```json\n{\n  \"token\": \"your_token\",\n  \"url\": \"https://custom.axiom.co\",\n  \"orgId\": \"your_org_id\",\n  \"queryRate\": 2,\n  \"queryBurst\": 5,\n  \"datasetsRate\": 1,\n  \"datasetsBurst\": 2\n}\n```\n\n## API Endpoints\n\n- `GET /`: Get server implementation info\n- `GET /tools`: List available tools\n- `POST /tools/:name/call`: Call a specific tool\n  - Available tools:\n    - `queryApl`: Execute APL queries\n    - `listDatasets`: List available datasets\n\n### Example Tool Calls\n\n1. Query APL:\n\n```bash\ncurl -X POST http://localhost:3000/tools/queryApl/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"arguments\": {\n      \"query\": \"['logs'] | where ['severity'] == \\\"error\\\" | limit 10\"\n    }\n  }'\n```\n\n2. List Datasets:\n\n```bash\ncurl -X POST http://localhost:3000/tools/listDatasets/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"arguments\": {}\n  }'\n```\n\n## License\n\nMIT\n",
    "publisher": {
      "id": "ThetaBird",
      "name": "ThetaBird",
      "url": "https://github.com/ThetaBird/mcp-server-axiom-js"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/ThetaBird/mcp-server-axiom-js",
    "distribution": {
      "type": "npm",
      "package": "mcp-server-axiom"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-axiom"
      ],
      "env": {
        "AXIOM_TOKEN": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AXIOM_ORG_ID": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        },
        "AXIOM_URL": {
          "description": "Optional environment variable",
          "type": "string"
        },
        "AXIOM_QUERY_RATE": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "AXIOM_QUERY_BURST": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "AXIOM_DATASETS_RATE": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "AXIOM_DATASETS_BURST": {
          "description": "Optional environment variable",
          "type": "number"
        },
        "PORT": {
          "description": "Optional environment variable",
          "type": "number"
        }
      }
    }
  },
  {
    "id": "36902007-eb9c-4dbc-8afb-03d81e82b39e",
    "name": "GongRzhe/Calendar-Autoauth-MCP-Server",
    "description": "Calendar AutoAuth MCP Server",
    "fullDescription": "# Calendar AutoAuth MCP Server\n\nA Model Context Protocol (MCP) server for Google Calendar integration in Cluade Desktop with auto authentication support. This server enables AI assistants to manage Google Calendar events through natural language interactions.\n\n## Features\n\n- Create calendar events with title, time, description, and location\n- Retrieve event details by event ID\n- Update existing events (title, time, description, location)\n- Delete events\n- List events within a specified time range\n- Full integration with Google Calendar API\n- Simple OAuth2 authentication flow with auto browser launch\n- Support for both Desktop and Web application credentials\n- Global credential storage for convenience\n\n## Installation & Authentication\n\n### Installing via Smithery\n\nTo install Calendar AutoAuth Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gongrzhe/server-calendar-autoauth-mcp):\n\n```bash\nnpx -y @smithery/cli install @gongrzhe/server-calendar-autoauth-mcp --client claude\n```\n\n1. Create a Google Cloud Project and obtain credentials:\n\n   a. Create a Google Cloud Project:\n      - Go to [Google Cloud Console](https://console.cloud.google.com/)\n      - Create a new project or select an existing one\n      - Enable the Google Calendar API for your project\n\n   b. Create OAuth 2.0 Credentials:\n      - Go to \"APIs & Services\" > \"Credentials\"\n      - Click \"Create Credentials\" > \"OAuth client ID\"\n      - Choose either \"Desktop app\" or \"Web application\" as application type\n      - Give it a name and click \"Create\"\n      - For Web application, add `http://localhost:3000/oauth2callback` to the authorized redirect URIs\n      - Download the JSON file of your client's OAuth keys\n      - Rename the key file to `gcp-oauth.keys.json`\n\n2. Run Authentication:\n\n   You can authenticate in two ways:\n\n   a. Global Authentication (Recommended):\n   ```bash\n   # First time: Place gcp-oauth.keys.json in your home directory's .calendar-mcp folder\n   mkdir -p ~/.calendar-mcp\n   mv gcp-oauth.keys.json ~/.calendar-mcp/\n\n   # Run authentication from anywhere\n   npx @gongrzhe/server-calendar-autoauth-mcp auth\n   ```\n\n   b. Local Authentication:\n   ```bash\n   # Place gcp-oauth.keys.json in your current directory\n   # The file will be automatically copied to global config\n   npx @gongrzhe/server-calendar-autoauth-mcp auth\n   ```\n\n   The authentication process will:\n   - Look for `gcp-oauth.keys.json` in the current directory or `~/.calendar-mcp/`\n   - If found in current directory, copy it to `~/.calendar-mcp/`\n   - Open your default browser for Google authentication\n   - Save credentials as `~/.calendar-mcp/credentials.json`\n\n   > **Note**: \n   > - After successful authentication, credentials are stored globally in `~/.calendar-mcp/` and can be used from any directory\n   > - Both Desktop app and Web application credentials are supported\n   > - For Web application credentials, make sure to add `http://localhost:3000/oauth2callback` to your authorized redirect URIs\n\n3. Configure in Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@gongrzhe/server-calendar-autoauth-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Docker Support\n\nIf you prefer using Docker:\n\n1. Authentication:\n```bash\ndocker run -i --rm \\\n  --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json \\\n  -v mcp-calendar:/calendar-server \\\n  -e CALENDAR_OAUTH_PATH=/gcp-oauth.keys.json \\\n  -e \"CALENDAR_CREDENTIALS_PATH=/calendar-server/credentials.json\" \\\n  -p 3000:3000 \\\n  mcp/calendar auth\n```\n\n2. Usage:\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"mcp-calendar:/calendar-server\",\n        \"-e\",\n        \"CALENDAR_CREDENTIALS_PATH=/calendar-server/credentials.json\",\n        \"mcp/calendar\"\n      ]\n    }\n  }\n}\n```\n\n## Usage Examples\n\nThe server provides several tools that can be used through the Claude Desktop:\n\n### Create Event\n```json\n{\n  \"summary\": \"Team Meeting\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T10:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"description\": \"Weekly team sync\",\n  \"location\": \"Conference Room A\"\n}\n```\n\n### List Events\n```json\n{\n  \"timeMin\": \"2024-01-01T00:00:00Z\",\n  \"timeMax\": \"2024-12-31T23:59:59Z\",\n  \"maxResults\": 10,\n  \"orderBy\": \"startTime\"\n}\n```\n\n### Update Event\n```json\n{\n  \"eventId\": \"event123\",\n  \"summary\": \"Updated Meeting Title\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T12:00:00Z\"\n  }\n}\n```\n\n### Delete Event\n```json\n{\n  \"eventId\": \"event123\"\n}\n```\n\n## Security Notes\n\n- OAuth credentials are stored securely in your local environment (`~/.calendar-mcp/`)\n- The server uses offline access to maintain persistent authentication\n- Never share or commit your credentials to version control\n- Regularly review and revoke unused access in your Google Account settings\n- Credentials are stored globally but are only accessible by the current user\n\n## Troubleshooting\n\n1. **OAuth Keys Not Found**\n   - Make sure `gcp-oauth.keys.json` is in either your current directory or `~/.calendar-mcp/`\n   - Check file permissions\n\n2. **Invalid Credentials Format**\n   - Ensure your OAuth keys file contains either `web` or `installed` credentials\n   - For web applications, verify the redirect URI is correctly configured\n\n3. **Port Already in Use**\n   - If port 3000 is already in use, please free it up before running authentication\n   - You can find and stop the process using that port\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Author\n\ngongrzhe\n\n## Support\n\nIf you encounter any issues or have questions, please file an issue on the GitHub repository.\n",
    "publisher": {
      "id": "gongrzhe",
      "name": "gongrzhe",
      "url": "https://github.com/GongRzhe/Calendar-Autoauth-MCP-Server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/GongRzhe/Calendar-Autoauth-MCP-Server",
    "distribution": {
      "type": "npm",
      "package": "@gongrzhe/server-calendar-autoauth-mcp"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "@gongrzhe/server-calendar-autoauth-mcp"
      ],
      "env": {}
    }
  },
  {
    "id": "4cf9a3f8-d3cb-4234-bd8d-0131a1bdd91e",
    "name": "dkmaker/mcp-azure-tablestorage",
    "description": "Azure TableStore MCP Server",
    "fullDescription": "# Azure TableStore MCP Server\n\nA TypeScript-based MCP server that enables interaction with Azure Table Storage directly through Cline. This tool allows you to query and manage data in Azure Storage Tables.\n\n## Features\n\n- Query Azure Storage Tables with OData filter support\n- Get table schemas to understand data structure\n- List all tables in the storage account\n- Detailed error handling and response information\n- Simple configuration through connection string\n\n## Installation\n\n### Local Development Setup\n\n1. Clone the repository:\n```powershell\ngit clone https://github.com/dkmaker/mcp-azure-tablestorage.git\ncd mcp-azure-tablestorage\n```\n\n2. Install dependencies:\n```powershell\nnpm install\n```\n\n3. Build the server:\n```powershell\nnpm run build\n```\n\n### NPM Installation\n\nYou can install the package globally via npm:\n\n```bash\nnpm install -g dkmaker-mcp-server-tablestore\n```\n\nOr run it directly with npx:\n\n```bash\nnpx dkmaker-mcp-server-tablestore\n```\n\nNote: When using npx or global installation, you'll still need to configure the AZURE_STORAGE_CONNECTION_STRING environment variable.\n\n### Installing in Cline\n\nTo use the Azure TableStore server with Cline, you need to add it to your MCP settings configuration. The configuration file is located at:\n\nWindows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n\nAdd the following to your configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"tablestore\": {\n      \"command\": \"node\",\n      \"args\": [\"C:/path/to/your/mcp-azure-tablestorage/build/index.js\"],\n      \"env\": {\n        \"AZURE_STORAGE_CONNECTION_STRING\": \"your_connection_string_here\"  // Required: Your Azure Storage connection string\n      }\n    }\n  }\n}\n```\n\nReplace `C:/path/to/your/mcp-azure-tablestorage` with the actual path where you cloned the repository.\n\n## Configuration\n\nThe server requires the following environment variable:\n\n- `AZURE_STORAGE_CONNECTION_STRING`: Your Azure Storage account connection string\n\n## Usage in Cline\n\n⚠️ **IMPORTANT SAFETY NOTE**: The query_table tool returns a limited subset of results (default: 5 items) to protect the LLM's context window. DO NOT increase this limit unless explicitly confirmed by the user, as larger result sets can overwhelm the context window.\n\nOnce installed, you can use the Azure TableStore server through Cline. Here are some examples:\n\n1. Querying a table:\n```\nQuery the Users table where PartitionKey is 'ACTIVE'\n```\n\nCline will use the query_table tool with:\n```json\n{\n  \"tableName\": \"Users\",\n  \"filter\": \"PartitionKey eq 'ACTIVE'\",\n  \"limit\": 5  // Optional: Defaults to 5 items. WARNING: Do not increase without user confirmation\n}\n```\n\nThe response will include:\n- Total number of items that match the query (without limit)\n- Limited subset of items (default 5) for safe LLM processing\n- Applied limit value\n\nFor example:\n```json\n{\n  \"totalItems\": 25,\n  \"limit\": 5,\n  \"items\": [\n    // First 5 matching items\n  ]\n}\n```\n\nThis design allows the LLM to understand the full scope of the data while working with a manageable subset. The default limit of 5 items protects against overwhelming the LLM's context window - this limit should only be increased when explicitly confirmed by the user.\n\n2. Getting table schema:\n```\nShow me the schema for the Orders table\n```\n\nCline will use the get_table_schema tool with:\n```json\n{\n  \"tableName\": \"Orders\"\n}\n```\n\n3. Listing tables:\n```\nList all tables in the storage account\n```\n\nCline will use the list_tables tool with:\n```json\n{}\n```\n\n## Project Structure\n\n- `src/index.ts`: Main server implementation with Azure Table Storage interaction logic\n- `build/`: Compiled JavaScript output\n- `package.json`: Project dependencies and scripts\n\n## Dependencies\n\n- @azure/data-tables: Azure Table Storage client library\n- @modelcontextprotocol/sdk: MCP server implementation toolkit\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. This means you can use, modify, distribute, and sublicense the code freely, provided you include the original copyright notice and license terms.\n",
    "publisher": {
      "id": "dkmaker",
      "name": "dkmaker",
      "url": "https://github.com/dkmaker/mcp-azure-tablestorage"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/dkmaker/mcp-azure-tablestorage",
    "distribution": {
      "type": "npm",
      "package": "dkmaker-mcp-server-tablestore"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "dkmaker-mcp-server-tablestore"
      ],
      "env": {
        "AZURE_STORAGE_CONNECTION_STRING": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  },
  {
    "id": "5c66417c-d785-42b6-ae49-fcd71a9dd02d",
    "name": "crazyrabbitLTC/mpc-tally-api-server",
    "description": "MPC Tally API Server",
    "fullDescription": "# MPC Tally API Server\n\nA Model Context Protocol (MCP) server for interacting with the Tally API. This server allows AI agents to fetch information about DAOs, including their governance data, proposals, and metadata.\n\n## Features\n\n- List DAOs sorted by popularity or exploration status\n- Fetch comprehensive DAO metadata including social links and governance information\n- Pagination support for handling large result sets\n- Built with TypeScript and GraphQL\n- Full test coverage with Bun's test runner\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mpc-tally-api-server.git\ncd mpc-tally-api-server\n\n# Install dependencies\nbun install\n\n# Build the project\nbun run build\n```\n\n## Configuration\n\n1. Create a `.env` file in the root directory:\n```env\nTALLY_API_KEY=your_api_key_here\n```\n\n2. Get your API key from [Tally](https://tally.xyz)\n\n⚠️ **Security Note**: Keep your API key secure:\n- Never commit your `.env` file\n- Don't expose your API key in logs or error messages\n- Rotate your API key if it's ever exposed\n- Use environment variables for configuration\n\n## Usage\n\n### Running the Server\n\n```bash\n# Start the server\nbun run start\n\n# Development mode with auto-reload\nbun run dev\n```\n\n### Claude Desktop Configuration\n\nAdd the following to your Claude Desktop configuration:\n\n```json\n{\n  \"tally\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"/path/to/mpc-tally-api-server/build/index.js\"\n    ],\n    \"env\": {\n      \"TALLY_API_KEY\": \"your_api_key_here\"\n    }\n  }\n}\n```\n\n## Available Scripts\n\n- `bun run clean` - Clean the build directory\n- `bun run build` - Build the project\n- `bun run start` - Run the built server\n- `bun run dev` - Run in development mode with auto-reload\n- `bun test` - Run tests\n- `bun test --watch` - Run tests in watch mode\n- `bun test --coverage` - Run tests with coverage\n\n## API Functions\n\nThe server exposes the following MCP functions:\n\n### list_daos\nLists DAOs sorted by specified criteria.\n\nParameters:\n- `limit` (optional): Maximum number of DAOs to return (default: 20, max: 50)\n- `afterCursor` (optional): Cursor for pagination\n- `sortBy` (optional): How to sort the DAOs (default: popular)\n  - Options: \"id\", \"name\", \"explore\", \"popular\"\n\n## License\n\nMIT ",
    "publisher": {
      "id": "crazyrabbitLTC",
      "name": "crazyrabbitLTC",
      "url": "https://github.com/crazyrabbitLTC/mpc-tally-api-server"
    },
    "isOfficial": false,
    "sourceUrl": "https://github.com/crazyrabbitLTC/mpc-tally-api-server",
    "distribution": {
      "type": "npm",
      "package": "mpc-tally-api-server"
    },
    "license": "MIT",
    "runtime": "node",
    "config": {
      "command": "npx",
      "args": [
        "-y",
        "mpc-tally-api-server"
      ],
      "env": {
        "TALLY_API_KEY": {
          "description": "Required environment variable",
          "type": "string",
          "required": true
        }
      }
    }
  }
]


interface RegistryTool {
  id: string;
  name: string;
  description: string;
  fullDescription: string;
  publisher: {
    id: string;
    name: string;
    url: string;
  };
  isOfficial: boolean;
  sourceUrl: string;
  distribution: {
    type: string;
    package: string;
  };
  license: string;
  runtime: string;
  config: {
    command: string;
    args: string[];
    env: Record<string, any>;
  };
}

/**
* Get all available tools from the registry
*/
export const getAvailableTools = async (): Promise<RegistryTool[]> => {
  return availableTools;
};

/**
* Get a specific tool by ID
*/
export const getToolById = async (id: string): Promise<RegistryTool | null> => {
  return availableTools.find(tool => tool.id === id) || null;
};

export default {
  getAvailableTools,
  getToolById
};